{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "{Bharvi - bhutbharvi@gmail.com}",
    "comments": "Solution template for Rubrik"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "playbook1-API Hostname": {
      "defaultValue": "rubrik-rcf-2512.my.rubrik.com",
      "type": "string",
      "minLength": 1
    },
    "playbook1-customApis_RubrikCustomConnector_name": {
      "defaultValue": "RubrikCustomConnector",
      "type": "string",
      "minLength": 1
    },
    "playbook2-PlaybookName": {
      "defaultValue": "RubrikAnomalyAnalysis",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook3-API Hostname": {
      "defaultValue": "rubrik-rcf-2512.my.rubrik.com",
      "type": "string",
      "minLength": 1
    },
    "playbook3-PlaybookName": {
      "defaultValue": "RubrikAnomalyIncidentResponse",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook4-PlaybookName": {
      "defaultValue": "RubrikDataObjectDiscovery",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook5-PlaybookName": {
      "defaultValue": "RubrikFilesetRansomwareDiscovery",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook6-PlaybookName": {
      "defaultValue": "RubrikIOCScan",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook7-PlaybookName": {
      "defaultValue": "RubrikPollAsyncResult",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook8-PlaybookName": {
      "defaultValue": "RubrikRansomwareDiscoveryAndFileRecovery",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "playbook9-PlaybookName": {
      "defaultValue": "RubrikRansomwareDiscoveryAndVMRecovery",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Resource name for the logic app playbook.  No spaces are allowed"
      }
    },
    "connector1-name": {
      "type": "string",
      "defaultValue": "555ae997-3bc9-4118-8474-8b000a51e3b9"
    }
  },
  "variables": {
    "playbook1-Playbooks": "playbook1-Playbooks",
    "_playbook1-Playbooks": "[variables('playbook1-Playbooks')]",
    "operationId-Authentication": "Authentication",
    "_operationId-Authentication": "[variables('operationId-Authentication')]",
    "playbook2-Playbooks": "playbook2-Playbooks",
    "_playbook2-Playbooks": "[variables('playbook2-Playbooks')]",
    "playbook2-RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('playbook2-PlaybookName'))]",
    "playbook2-KeyvaultConnectionName": "[concat('Keyvault-', parameters('playbook2-PlaybookName'))]",
    "playbook-2-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/customApis/Rubrikcustomconnector')]",
    "_playbook-2-connection-2": "[variables('playbook-2-connection-2')]",
    "playbook-2-connection-3": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]",
    "_playbook-2-connection-3": "[variables('playbook-2-connection-3')]",
    "playbook3-Playbooks": "playbook3-Playbooks",
    "_playbook3-Playbooks": "[variables('playbook3-Playbooks')]",
    "playbook3-MicrosoftSentinelConnectionName": "[concat('MicrosoftSentinel-', parameters('playbook3-PlaybookName'))]",
    "playbook3-TeamsConnectionName": "[concat('Teams-', parameters('playbook3-PlaybookName'))]",
    "playbook-3-connection-2": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
    "_playbook-3-connection-2": "[variables('playbook-3-connection-2')]",
    "playbook-3-connection-3": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Teams')]",
    "_playbook-3-connection-3": "[variables('playbook-3-connection-3')]",
    "playbook4-Playbooks": "playbook4-Playbooks",
    "_playbook4-Playbooks": "[variables('playbook4-Playbooks')]",
    "playbook4-RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('playbook4-PlaybookName'))]",
    "playbook4-KeyvaultConnectionName": "[concat('Keyvault-', parameters('playbook4-PlaybookName'))]",
    "playbook5-Playbooks": "playbook5-Playbooks",
    "_playbook5-Playbooks": "[variables('playbook5-Playbooks')]",
    "playbook5-TeamsConnectionName": "[concat('Teams-', parameters('playbook5-PlaybookName'))]",
    "playbook6-Playbooks": "playbook6-Playbooks",
    "_playbook6-Playbooks": "[variables('playbook6-Playbooks')]",
    "playbook6-RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('playbook6-PlaybookName'))]",
    "playbook6-KeyvaultConnectionName": "[concat('Keyvault-', parameters('playbook6-PlaybookName'))]",
    "playbook7-Playbooks": "playbook7-Playbooks",
    "_playbook7-Playbooks": "[variables('playbook7-Playbooks')]",
    "playbook7-RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('playbook7-PlaybookName'))]",
    "playbook7-KeyvaultConnectionName": "[concat('Keyvault-', parameters('playbook7-PlaybookName'))]",
    "playbook8-Playbooks": "playbook8-Playbooks",
    "_playbook8-Playbooks": "[variables('playbook8-Playbooks')]",
    "playbook8-RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('playbook8-PlaybookName'))]",
    "playbook8-KeyvaultConnectionName": "[concat('Keyvault-', parameters('playbook8-PlaybookName'))]",
    "playbook8-TeamsConnectionName": "[concat('Teams-', parameters('playbook8-PlaybookName'))]",
    "playbook9-Playbooks": "playbook9-Playbooks",
    "_playbook9-Playbooks": "[variables('playbook9-Playbooks')]",
    "playbook9-RubrikcustomconnectorConnectionName": "[concat('Rubrikcustomconnector-', parameters('playbook9-PlaybookName'))]",
    "playbook9-KeyvaultConnectionName": "[concat('Keyvault-', parameters('playbook9-PlaybookName'))]",
    "playbook9-TeamsConnectionName": "[concat('Teams-', parameters('playbook9-PlaybookName'))]",
    "connector1-source": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',parameters('connector1-name'))]",
    "_connector1-source": "[variables('connector1-source')]",
    "RubrikConnector": "RubrikConnector",
    "_RubrikConnector": "[variables('RubrikConnector')]",
    "sourceId": "Id of Publisher.Solution Offer Id",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/customApis",
      "apiVersion": "2016-06-01",
      "name": "[parameters('playbook1-customApis_RubrikCustomConnector_name')]",
      "location": "eastus",
      "properties": {
        "runtimeUrls": [
          "https://logic-apis-eastus.azure-apim.net/apim/d91aaf06af23412da43cf0b057079b4c",
          "http://logic-apis-eastus.azure-apim.net/apim/d91aaf06af23412da43cf0b057079b4c"
        ],
        "description": "RubrikApis",
        "displayName": "[parameters('playbook1-customApis_RubrikCustomConnector_name')]",
        "iconUri": "/Content/retail/assets/default-connection-icon.e6bb72160664a5e37b9923c3d9f50ca5.2.svg",
        "swagger": {
          "swagger": "2.0",
          "info": {
            "version": "1.0.0",
            "title": "RubrikApis",
            "description": "RubrikApis"
          },
          "host": "[parameters('playbook1-API Hostname')]",
          "basePath": "/",
          "schemes": [
            "https"
          ],
          "produces": [
            "application/json"
          ],
          "paths": {
            "/api/client_token": {
              "post": {
                "responses": {
                  "default": {
                    "description": "default"
                  }
                },
                "summary": "Authentication",
                "description": "Getting access token using service account",
                "operationId": "[variables('_operationId-Authentication')]",
                "x-ms-visibility": "important",
                "parameters": [
                  {
                    "name": "Content-Type",
                    "in": "header",
                    "required": true,
                    "type": "string",
                    "default": "application/json",
                    "x-ms-visibility": "important"
                  },
                  {
                    "name": "body",
                    "in": "body",
                    "required": true,
                    "schema": {
                      "type": "object",
                      "properties": {
                        "client_id": {
                          "type": "string",
                          "description": "client_id",
                          "title": "1"
                        },
                        "client_secret": {
                          "type": "string",
                          "description": "client_secret",
                          "title": "1"
                        }
                      },
                      "required": [
                        "client_id",
                        "client_secret"
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "apiType": "Rest",
        "backendService": {
          "serviceUrl": "[concat('https://', parameters('playbook1-API Hostname'))]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Disabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ClusterId": {
                      "type": "string"
                    },
                    "IncidentStartTime": {
                      "type": "string"
                    },
                    "ObjectName": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Authentication": {
              "runAfter": {
                "Get_secret": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "client_id": "@body('Get_Client_Id_')?['value']",
                  "client_secret": "@body('Get_secret')?['value']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/client_token"
              }
            },
            "Determine_the_status_of_the_Rubrik_Radar_analysis_process": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query EventSeriesListQuery($after: String, $filters: ActivitySeriesFilterInput, $first: Int, $sortBy: ActivitySeriesSortByEnum, $sortOrder: SortOrderEnum) {   activitySeriesConnection(     after: $after     first: $first     filters: $filters     sortBy: $sortBy     sortOrder: $sortOrder   ) {     edges {       cursor       node {         ...EventSeriesFragment         cluster {           id           name           __typename         }         activityConnection(first: 1) {           nodes {             id             message             __typename           }           __typename         }         __typename       }       __typename     }     pageInfo {       endCursor       hasNextPage       hasPreviousPage       __typename     }     __typename   } }  fragment EventSeriesFragment on ActivitySeries {   id   fid   activitySeriesId   lastUpdated   lastActivityType   lastActivityStatus   objectId   objectName   objectType   severity   progress   isCancelable   isPolarisEventSeries   location   __typename } ",
                  "variables": {
                    "filters": {
                      "cluster": {
                        "id": "@{variables('ClusterId')}"
                      },
                      "lastActivityType": [
                        "Anomaly"
                      ],
                      "lastUpdatedGt": "@{variables('StartDate')}",
                      "objectName": "@{variables('ObjectName')}"
                    },
                    "first": 40,
                    "sortBy": "StartTime",
                    "sortOrder": "Asc"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Does_Object_List_get_status_code_200": {
              "actions": {
                "Does_Object_List_API_response_contains_errors": {
                  "actions": {
                    "Set_API_response_error_as_status": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Status",
                        "value": "Error:@{body('rubrik-sonar-sensitive-hits(Object_List)')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Does_Object_Id_found": {
                        "actions": {
                          "Does_sonar_sensitive_hits(Object_Details)_get_status_code_200": {
                            "actions": {
                              "Does_Object_Details_API_response_contain_errors": {
                                "actions": {
                                  "Set_API_error_response_as_status_": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "Status",
                                      "value": "Error:@{body('sonar_sensitive_hits(Object_Details)')?['errors'][0]?['message']}"
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "contains": [
                                        "@body('sonar_sensitive_hits(Object_Details)')",
                                        "errors"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {
                              "sonar_sensitive_hits(Object_Details)": [
                                "Succeeded",
                                "Failed"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Set_Error_message_with_status_code_for_Object_Details": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Status",
                                    "value": "StatusCode: @{outputs('sonar_sensitive_hits(Object_Details)')['statusCode']}Error:@{body('sonar_sensitive_hits(Object_Details)')?['message']}"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('sonar_sensitive_hits(Object_Details)')['statusCode']",
                                    200
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "sonar_sensitive_hits(Object_Details)": {
                            "type": "Http",
                            "inputs": {
                              "body": {
                                "query": "query ObjectDetailQuery($snappableFid: String!, $snapshotFid: String!) {                 policyObj(snappableFid: $snappableFid, snapshotFid: $snapshotFid) {                     id                     rootFileResult {                         hits {                             totalHits                     }                     analyzerGroupResults {                         analyzerGroup {                             name                         }                         analyzerResults {                             hits {                                 totalHits                             }                             analyzer {                                 name                             }                         }                             hits {                             totalHits                         }                     }                     filesWithHits {                         totalHits                     }                     openAccessFiles {                         totalHits                     }                     openAccessFolders {                         totalHits                     }                     openAccessFilesWithHits {                         totalHits                     }                     staleFiles {                         totalHits                     }                     staleFilesWithHits {                         totalHits                     }                     openAccessStaleFiles {                         totalHits                     }                     }                 }             } ",
                                "variables": {
                                  "snappableFid": "@{variables('ObjectId')}",
                                  "snapshotFid": "@{variables('SnapshotId')}"
                                }
                              },
                              "headers": {
                                "Authorization": "Bearer @{variables('access_token')}",
                                "Content-Type": "application/json"
                              },
                              "method": "POST",
                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                            }
                          }
                        },
                        "runAfter": {
                          "For_each": [
                            "Succeeded"
                          ]
                        },
                        "expression": {
                          "and": [
                            {
                              "not": {
                                "equals": [
                                  "@empty(variables('ObjectId'))",
                                  true
                                ]
                              }
                            }
                          ]
                        },
                        "type": "If"
                      },
                      "For_each": {
                        "foreach": "@body('Parse_JSON_of_Object_List')?['data']?['policyObjs']?['edges']",
                        "actions": {
                          "Does_snappable_name_equals_to_Object_name_fetched_from_incidnet_": {
                            "actions": {
                              "Set_Object_Id": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ObjectId",
                                  "value": "@items('For_each')?['node']?['snappable']?['id']"
                                }
                              },
                              "Set_Snapshot_Id": {
                                "runAfter": {
                                  "Set_Object_Id": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "SnapshotId",
                                  "value": "@items('For_each')?['node']?['snapshotFid']"
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@items('For_each')?['node']?['snappable']?['name']",
                                    "@variables('ObjectName')"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        },
                        "runAfter": {
                          "Parse_JSON_of_Object_List": [
                            "Succeeded"
                          ]
                        },
                        "type": "Foreach",
                        "runtimeConfiguration": {
                          "concurrency": {
                            "repetitions": 1
                          }
                        }
                      },
                      "Parse_JSON_of_Object_List": {
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('rubrik-sonar-sensitive-hits(Object_List)')",
                          "schema": {
                            "properties": {
                              "data": {
                                "properties": {
                                  "policyObjs": {
                                    "properties": {
                                      "__typename": {
                                        "type": "string"
                                      },
                                      "edges": {
                                        "items": {
                                          "properties": {
                                            "__typename": {
                                              "type": "string"
                                            },
                                            "cursor": {
                                              "type": "string"
                                            },
                                            "node": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "objectStatus": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "latestSnapshotResult": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "snapshotFid": {
                                                          "type": "string"
                                                        },
                                                        "snapshotTime": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "policyStatuses": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "status": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "status",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "osType": {
                                                  "type": "string"
                                                },
                                                "rootFileResult": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "analyzerGroupResults": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "analyzerGroup": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "groupType": {
                                                                "type": "string"
                                                              },
                                                              "id": {
                                                                "type": "string"
                                                              },
                                                              "name": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "analyzerResults": {
                                                            "items": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "analyzer": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "analyzerType": {
                                                                      "type": "string"
                                                                    },
                                                                    "id": {
                                                                      "type": "string"
                                                                    },
                                                                    "name": {
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                },
                                                                "hits": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "permittedHits": {
                                                                      "type": "integer"
                                                                    },
                                                                    "totalHits": {
                                                                      "type": "integer"
                                                                    },
                                                                    "violations": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                }
                                                              },
                                                              "required": [
                                                                "hits",
                                                                "analyzer",
                                                                "__typename"
                                                              ],
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          },
                                                          "hits": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "permittedHits": {
                                                                "type": "integer"
                                                              },
                                                              "totalHits": {
                                                                "type": "integer"
                                                              },
                                                              "totalHitsDelta": {
                                                                "type": "integer"
                                                              },
                                                              "violations": {
                                                                "type": "integer"
                                                              },
                                                              "violationsDelta": {
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "required": [
                                                          "analyzerGroup",
                                                          "analyzerResults",
                                                          "hits",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "filesWithHits": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "hits": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "numActivities": {
                                                      "type": "integer"
                                                    },
                                                    "numActivitiesDelta": {
                                                      "type": "integer"
                                                    },
                                                    "openAccessFiles": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "openAccessFilesWithHits": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "openAccessFolders": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "openAccessStaleFiles": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "staleFiles": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "staleFilesWithHits": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "permittedHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHits": {
                                                          "type": "integer"
                                                        },
                                                        "totalHitsDelta": {
                                                          "type": "integer"
                                                        },
                                                        "violations": {
                                                          "type": "integer"
                                                        },
                                                        "violationsDelta": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "shareType": {
                                                  "type": "string"
                                                },
                                                "snappable": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "cluster": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "effectiveSlaDomain": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "logicalPath": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "objectType": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "name",
                                                          "objectType",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "objectType": {
                                                      "type": "string"
                                                    },
                                                    "physicalPath": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "name": {
                                                            "type": "string"
                                                          },
                                                          "objectType": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "name",
                                                          "objectType",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    },
                                                    "slaAssignment": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "snapshotFid": {
                                                  "type": "string"
                                                },
                                                "snapshotTimestamp": {
                                                  "type": "integer"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "cursor",
                                            "node",
                                            "__typename"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "pageInfo": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "endCursor": {
                                            "type": "string"
                                          },
                                          "hasNextPage": {
                                            "type": "boolean"
                                          },
                                          "hasPreviousPage": {
                                            "type": "boolean"
                                          },
                                          "startCursor": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('rubrik-sonar-sensitive-hits(Object_List)')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "rubrik-sonar-sensitive-hits(Object_List)": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_error_message_with_status_code_for_Object_List": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Status",
                      "value": "StatusCode:@{outputs('rubrik-sonar-sensitive-hits(Object_List)')['statusCode']} Error:@{body('rubrik-sonar-sensitive-hits(Object_List)')?['message']}"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('rubrik-sonar-sensitive-hits(Object_List)')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Does_cdm-cluster-connection_get_status_code_200": {
              "actions": {
                "Does_cdm-cluster-connection_API_response_contain_errors": {
                  "actions": {
                    "Set_error_response_as_cluster_connection_status": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ClusterConnectionStatus",
                        "value": "Error:@{body('rubrik-cdm-cluster-connection-state')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('rubrik-cdm-cluster-connection-state')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "rubrik-cdm-cluster-connection-state": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_error_message_with_status_code_for_cluster_connection": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ClusterConnectionStatus",
                      "value": "StatusCode:@{outputs('rubrik-cdm-cluster-connection-state')['statusCode']} Error:@{body('rubrik-cdm-cluster-connection-state')?['message']}"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('rubrik-cdm-cluster-connection-state')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Does_cdm-cluster-location_get_status_code_200": {
              "actions": {
                "Does_cdm-cluster-location_API_response_contains_error": {
                  "actions": {
                    "Set_error_response_as_cluster_location_status": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ClusterLocationStatus",
                        "value": "Error:@{body('rubrik-cdm-cluster-location')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('rubrik-cdm-cluster-location')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "rubrik-cdm-cluster-location": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_Error_message_with_status_code_for_Cluster_location": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ClusterLocationStatus",
                      "value": "StatusCode: @{outputs('rubrik-cdm-cluster-location')['statusCode']}Error:@{body('rubrik-cdm-cluster-location')?['message']}"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('rubrik-cdm-cluster-location')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Does_radar_analysis_get_status_code_200_": {
              "actions": {
                "Does_radar_analysis_response_contains_error": {
                  "actions": {
                    "Set_Event__List_API_error_response": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "EventListAPIStatus",
                        "value": "Error:@{body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "For_each_2": {
                        "foreach": "@body('Parse_JSON_of_Radar_Analysis_Process')?['data']?['activitySeriesConnection']?['edges']",
                        "actions": {
                          "Does_this_edge_object_name_equal_to_object_name_fetched_from_incident": {
                            "actions": {
                              "Set_ransomware_analysis_status": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "RansomwareAnalysisStatus",
                                  "value": "@items('For_each_2')?['node']?['lastActivityStatus']"
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@items('For_each_2')?['node']?['objectName']",
                                    "@variables('ObjectName')"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        },
                        "runAfter": {
                          "Parse_JSON_of_Radar_Analysis_Process": [
                            "Succeeded"
                          ]
                        },
                        "type": "Foreach",
                        "runtimeConfiguration": {
                          "concurrency": {
                            "repetitions": 1
                          }
                        }
                      },
                      "Parse_JSON_of_Radar_Analysis_Process": {
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')",
                          "schema": {
                            "properties": {
                              "data": {
                                "properties": {
                                  "activitySeriesConnection": {
                                    "properties": {
                                      "__typename": {
                                        "type": "string"
                                      },
                                      "edges": {
                                        "items": {
                                          "properties": {
                                            "__typename": {
                                              "type": "string"
                                            },
                                            "cursor": {
                                              "type": "string"
                                            },
                                            "node": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "activityConnection": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "nodes": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "id": {
                                                            "type": "string"
                                                          },
                                                          "message": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "id",
                                                          "message",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "activitySeriesId": {
                                                  "type": "string"
                                                },
                                                "cluster": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "fid": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "integer"
                                                },
                                                "isCancelable": {
                                                  "type": "boolean"
                                                },
                                                "isPolarisEventSeries": {
                                                  "type": "boolean"
                                                },
                                                "lastActivityStatus": {
                                                  "type": "string"
                                                },
                                                "lastActivityType": {
                                                  "type": "string"
                                                },
                                                "lastUpdated": {
                                                  "type": "string"
                                                },
                                                "location": {
                                                  "type": "string"
                                                },
                                                "objectId": {
                                                  "type": "string"
                                                },
                                                "objectName": {
                                                  "type": "string"
                                                },
                                                "objectType": {
                                                  "type": "string"
                                                },
                                                "progress": {
                                                  "type": "string"
                                                },
                                                "severity": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "cursor",
                                            "node",
                                            "__typename"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "pageInfo": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "endCursor": {
                                            "type": "string"
                                          },
                                          "hasNextPage": {
                                            "type": "boolean"
                                          },
                                          "hasPreviousPage": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Determine_the_status_of_the_Rubrik_Radar_analysis_process": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_Error_message_with_status_code_for_radar_analysis": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "EventListAPIStatus",
                      "value": "Status Code:@{outputs('Determine_the_status_of_the_Rubrik_Radar_analysis_process')['statusCode']}Error:@{body('Determine_the_status_of_the_Rubrik_Radar_analysis_process')?['message']}"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('Determine_the_status_of_the_Rubrik_Radar_analysis_process')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Get_Client_Id_": {
              "runAfter": {
                "Initialize_Event_List_API_status": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "outputs"
                  ]
                }
              }
            },
            "Get_secret": {
              "runAfter": {
                "Get_Client_Id_": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "outputs"
                  ]
                }
              }
            },
            "Initialize_Cluster_Id": {
              "runAfter": {
                "Initialize_Snapshot_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterId",
                    "type": "string",
                    "value": "@triggerBody()?['ClusterId']"
                  }
                ]
              },
              "description": "from playbook input"
            },
            "Initialize_Event_List_API_status": {
              "runAfter": {
                "Initialize_cluster_connection_status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "EventListAPIStatus",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              }
            },
            "Initialize_Object_Id": {
              "runAfter": {
                "Initialize_Object_Name": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Object_Name": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectName",
                    "type": "string",
                    "value": "@triggerBody()?['ObjectName']"
                  }
                ]
              },
              "description": "from playbook input"
            },
            "Initialize_Snapshot_Id": {
              "runAfter": {
                "Initialize_Object_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "SnapshotId",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Start_Date": {
              "runAfter": {
                "Initialize_Cluster_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "StartDate",
                    "type": "string",
                    "value": "@triggerBody()?['IncidentStartTime']"
                  }
                ]
              },
              "description": "start time of incident"
            },
            "Initialize_access_token": {
              "runAfter": {
                "Is_Authentication_failed": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "access_token",
                    "type": "string",
                    "value": "@{body('Authentication')?['access_token']}"
                  }
                ]
              }
            },
            "Initialize_cluster_connection_status": {
              "runAfter": {
                "Initialize_cluster_location_status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterConnectionStatus",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              }
            },
            "Initialize_cluster_location_status": {
              "runAfter": {
                "Initialize_sonar_sensitive_hits_status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterLocationStatus",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              }
            },
            "Initialize_ransomware_analysis_status": {
              "runAfter": {
                "Initialize_Start_Date": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RansomwareAnalysisStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_sonar_sensitive_hits_status": {
              "runAfter": {
                "Initialize_ransomware_analysis_status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Status",
                    "type": "string",
                    "value": "@{null}"
                  }
                ]
              }
            },
            "Is_Authentication_failed": {
              "actions": {
                "Failed_Response_": {
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "Error:@{body('Authentication')?['message']}",
                    "statusCode": "@outputs('Authentication')['statusCode']"
                  }
                },
                "Terminate": {
                  "runAfter": {
                    "Failed_Response_": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Authentication')['statusCode']}",
                      "message": "Error:@{body('Authentication')?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Authentication": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Authentication')['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Is_ransomware_analysis_running": {
              "actions": {
                "Does_Radar_Analysis_status_get_status_code_200": {
                  "actions": {
                    "Does_Radar_analysis_status_response_contain_errors": {
                      "actions": {
                        "Set_Radar_Analysis_status": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "EventListAPIStatus",
                            "value": "Error:@{body('Gather_the_final_Radar_Analysis_results')?['errors'][0]?['message']}"
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Parse_JSON_of_Gather_final_Radar_analysis_status": {
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('Gather_the_final_Radar_Analysis_results')",
                              "schema": {
                                "properties": {
                                  "data": {
                                    "properties": {
                                      "activitySeriesConnection": {
                                        "properties": {
                                          "edges": {
                                            "items": {
                                              "properties": {
                                                "node": {
                                                  "properties": {
                                                    "activityConnection": {
                                                      "properties": {
                                                        "nodes": {
                                                          "items": {
                                                            "properties": {
                                                              "id": {
                                                                "type": "string"
                                                              },
                                                              "message": {
                                                                "type": "string"
                                                              },
                                                              "severity": {
                                                                "type": "string"
                                                              },
                                                              "time": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "id",
                                                              "message",
                                                              "severity",
                                                              "time"
                                                            ],
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "activitySeriesId": {
                                                      "type": "string"
                                                    },
                                                    "cluster": {
                                                      "properties": {
                                                        "id": {
                                                          "type": "string"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "fid": {
                                                      "type": "string"
                                                    },
                                                    "id": {
                                                      "type": "integer"
                                                    },
                                                    "lastActivityStatus": {
                                                      "type": "string"
                                                    },
                                                    "lastActivityType": {
                                                      "type": "string"
                                                    },
                                                    "lastUpdated": {
                                                      "type": "string"
                                                    },
                                                    "objectId": {
                                                      "type": "string"
                                                    },
                                                    "objectName": {
                                                      "type": "string"
                                                    },
                                                    "objectType": {
                                                      "type": "string"
                                                    },
                                                    "progress": {
                                                      "type": "string"
                                                    },
                                                    "severity": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "node"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "pageInfo": {
                                            "properties": {
                                              "endCursor": {
                                                "type": "string"
                                              },
                                              "hasNextPage": {
                                                "type": "boolean"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "featureFlag": {
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "variant": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('Gather_the_final_Radar_Analysis_results')",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {
                    "Gather_the_final_Radar_Analysis_results": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Set_Error_message_for_Radar_Analysis_status": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "EventListAPIStatus",
                          "value": "StatusCode:@{outputs('Gather_the_final_Radar_Analysis_results')['statusCode']} Error:@{body('Gather_the_final_Radar_Analysis_results')}"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('Gather_the_final_Radar_Analysis_results')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Gather_the_final_Radar_Analysis_results": {
                  "runAfter": {
                    "Until": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "body": {
                      "query": "query EventSeriesListQuery($after: String, $filters: ActivitySeriesFilterInput, $first: Int, $sortBy: ActivitySeriesSortByEnum, $sortOrder: SortOrderEnum) {   activitySeriesConnection(     after: $after     first: $first     filters: $filters     sortBy: $sortBy     sortOrder: $sortOrder   ) {     edges {       cursor       node {         ...EventSeriesFragment         cluster {           id           name           __typename         }         activityConnection(first: 1) {           nodes {             id             message             __typename           }           __typename         }         __typename       }       __typename     }     pageInfo {       endCursor       hasNextPage       hasPreviousPage       __typename     }     __typename   } }  fragment EventSeriesFragment on ActivitySeries {   id   fid   activitySeriesId   lastUpdated   lastActivityType   lastActivityStatus   objectId   objectName   objectType   severity   progress   isCancelable   isPolarisEventSeries   location   __typename } ",
                      "variables": {
                        "filters": {
                          "cluster": {
                            "id": "@{variables('ClusterId')}"
                          },
                          "lastActivityType": [
                            "Anomaly"
                          ],
                          "lastUpdatedGt": "@{variables('StartDate')}",
                          "objectName": "@{variables('ObjectName')}"
                        },
                        "first": 40,
                        "sortBy": "StartTime",
                        "sortOrder": "Asc"
                      }
                    },
                    "headers": {
                      "Authorization": "Beare @{variables('access_token')}",
                      "Content-Type": "application/json"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                      }
                    },
                    "method": "POST",
                    "path": "/api/graphql",
                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                  }
                },
                "Until": {
                  "actions": {
                    "Delay": {
                      "runAfter": {
                        "Does_Event_List_get_status_code_200_in_Generic_Polling": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait",
                      "inputs": {
                        "interval": {
                          "count": 1,
                          "unit": "Minute"
                        }
                      }
                    },
                    "Does_Event_List_get_status_code_200_in_Generic_Polling": {
                      "actions": {
                        "Does_Event_List_response_contains_errors": {
                          "actions": {
                            "Set_Event_List_error_response_": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "EventListAPIStatus",
                                "value": "Error:@{body('GenericPolling')?['errors'][0]?['message']}"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "For_each_edge_in_activitySeriesConnection": {
                                "foreach": "@body('Parse_JSON_of_Generic_Polling')?['data']?['activitySeriesConnection']?['edges']",
                                "actions": {
                                  "Does_object_name_equal_to_object_name_fetched_from_incident": {
                                    "actions": {
                                      "Update_Ransomware_Analysis_status": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "RansomwareAnalysisStatus",
                                          "value": "@items('For_each_edge_in_activitySeriesConnection')?['node']?['lastActivityStatus']"
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@items('For_each_edge_in_activitySeriesConnection')?['node']?['objectName']",
                                            "@variables('ObjectName')"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "Parse_JSON_of_Generic_Polling": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Foreach"
                              },
                              "Parse_JSON_of_Generic_Polling": {
                                "type": "ParseJson",
                                "inputs": {
                                  "content": "@body('GenericPolling')",
                                  "schema": {
                                    "properties": {
                                      "data": {
                                        "properties": {
                                          "activitySeriesConnection": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "edges": {
                                                "items": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "cursor": {
                                                      "type": "string"
                                                    },
                                                    "node": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "activityConnection": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "nodes": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "message": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "id",
                                                                  "message",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "activitySeriesId": {
                                                          "type": "string"
                                                        },
                                                        "cluster": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "fid": {
                                                          "type": "string"
                                                        },
                                                        "id": {
                                                          "type": "integer"
                                                        },
                                                        "isCancelable": {
                                                          "type": "boolean"
                                                        },
                                                        "isPolarisEventSeries": {
                                                          "type": "boolean"
                                                        },
                                                        "lastActivityStatus": {
                                                          "type": "string"
                                                        },
                                                        "lastActivityType": {
                                                          "type": "string"
                                                        },
                                                        "lastUpdated": {
                                                          "type": "string"
                                                        },
                                                        "location": {
                                                          "type": "string"
                                                        },
                                                        "objectId": {
                                                          "type": "string"
                                                        },
                                                        "objectName": {
                                                          "type": "string"
                                                        },
                                                        "objectType": {
                                                          "type": "string"
                                                        },
                                                        "progress": {
                                                          "type": "string"
                                                        },
                                                        "severity": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "required": [
                                                    "cursor",
                                                    "node",
                                                    "__typename"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "pageInfo": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "endCursor": {
                                                    "type": "string"
                                                  },
                                                  "hasNextPage": {
                                                    "type": "boolean"
                                                  },
                                                  "hasPreviousPage": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@body('GenericPolling')",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "runAfter": {
                        "GenericPolling": [
                          "Succeeded",
                          "Failed"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@outputs('GenericPolling')['statusCode']",
                              200
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "GenericPolling": {
                      "type": "Http",
                      "inputs": {
                        "body": {
                          "query": "query EventSeriesListQuery($after: String, $filters: ActivitySeriesFilterInput, $first: Int, $sortBy: ActivitySeriesSortByEnum, $sortOrder: SortOrderEnum) {   activitySeriesConnection(     after: $after     first: $first     filters: $filters     sortBy: $sortBy     sortOrder: $sortOrder   ) {     edges {       cursor       node {         ...EventSeriesFragment         cluster {           id           name           __typename         }         activityConnection(first: 1) {           nodes {             id             message             __typename           }           __typename         }         __typename       }       __typename     }     pageInfo {       endCursor       hasNextPage       hasPreviousPage       __typename     }     __typename   } }  fragment EventSeriesFragment on ActivitySeries {   id   fid   activitySeriesId   lastUpdated   lastActivityType   lastActivityStatus   objectId   objectName   objectType   severity   progress   isCancelable   isPolarisEventSeries   location   __typename } ",
                          "variables": {
                            "filters": {
                              "cluster": {
                                "id": "@{variables('ClusterId')}"
                              },
                              "lastActivityType": [
                                "Anomaly"
                              ],
                              "lastUpdatedGt": "@{variables('StartDate')}",
                              "objectName": "@{variables('ObjectName')}"
                            },
                            "first": 40,
                            "sortBy": "StartTime",
                            "sortOrder": "Asc"
                          }
                        },
                        "headers": {
                          "Authorization": "Bearer @{variables('access_token')}",
                          "Content-Type": "application/json"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                          }
                        },
                        "method": "POST",
                        "path": "/api/graphql",
                        "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                      }
                    }
                  },
                  "expression": "@not(equals(variables('RansomwareAnalysisStatus'), 'Running'))",
                  "limit": {
                    "timeout": "PT1440M"
                  },
                  "type": "Until"
                }
              },
              "runAfter": {
                "Does_radar_analysis_get_status_code_200_": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@variables('RansomwareAnalysisStatus')",
                      "Running"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Response": {
              "runAfter": {
                "Does_cdm-cluster-connection_get_status_code_200": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ],
                "Is_ransomware_analysis_running": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "statusCode": "@if(or(contains(variables('EventListAPIStatus'),'Error'),or(contains(variables('ClusterConnectionStatus'),'Error'),or(contains(variables('ClusterLocationStatus'),'Error'),contains(variables('Status'),'Error')))),400,200)"
              }
            },
            "rubrik-cdm-cluster-connection-state": {
              "runAfter": {
                "Does_cdm-cluster-location_get_status_code_200": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query ClusterDetailQuery($id: UUID!) {   clusterConnection(filter: {id: [$id]}) {     nodes {       status       }     } }",
                  "variables": {
                    "id": "@{variables('ClusterId')}"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "rubrik-cdm-cluster-location": {
              "runAfter": {
                "Does_Object_List_get_status_code_200": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query ClusterDetailQuery($id: UUID!) {   clusterConnection(filter: {id: [$id]}) {     nodes {       geoLocation {         address       }     }   } }",
                  "variables": {
                    "id": "@{variables('ClusterId')}"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "rubrik-sonar-sensitive-hits(Object_List)": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query ObjectsListQuery($day: String!, $timezone: String!) {   policyObjs(day: $day, timezone: $timezone) {     edges {       cursor       node {         ...PolicyObjFragment         __typename       }       __typename     }     pageInfo {       startCursor       endCursor       hasNextPage       hasPreviousPage       __typename     }     __typename   } }  fragment PolicyObjFragment on PolicyObj {   id   snapshotFid   snapshotTimestamp   osType   shareType   objectStatus {     policyStatuses {       status       __typename     }     latestSnapshotResult {       snapshotTime       snapshotFid       __typename     }     __typename   }   rootFileResult {     hits {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     analyzerGroupResults {       ...AnalyzerGroupResultFragment       __typename     }     filesWithHits {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     openAccessFiles {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     openAccessFolders {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     openAccessFilesWithHits {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     staleFiles {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     staleFilesWithHits {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     openAccessStaleFiles {       totalHits       violations       permittedHits       violationsDelta       totalHitsDelta       __typename     }     numActivities     numActivitiesDelta     __typename   }   snappable {     ...SnappableFragment     __typename   }   __typename }  fragment AnalyzerGroupResultFragment on AnalyzerGroupResult {   analyzerGroup {     groupType     id     name     __typename   }   analyzerResults {     hits {       totalHits       violations       permittedHits       __typename     }     analyzer {       id       name       analyzerType       __typename     }     __typename   }   hits {     totalHits     violations     permittedHits     violationsDelta     totalHitsDelta     __typename   }   __typename }  fragment SnappableFragment on HierarchyObject {   id   name   objectType   slaAssignment   logicalPath {     name     objectType     __typename   }   physicalPath {     name     objectType     __typename   }   effectiveSlaDomain {     id     name     __typename   }   ... on VSphereVm {     cluster {       id       name       __typename     }     __typename   }   ... on LinuxFileset {     cluster {       id       name       __typename     }     __typename   }   ... on ShareFileset {     cluster {       id       name       __typename     }     __typename   }   ... on WindowsFileset {     cluster {       id       name       __typename     }     __typename   }   ... on NutanixVm {     cluster {       id       name       __typename     }     __typename   }   ... on HyperVVirtualMachine {     cluster {       id       name       __typename     }     __typename   }   ... on VolumeGroup {     cluster {       id       name       __typename     }     __typename   }   __typename } ",
                  "variables": {
                    "day": "@{formatDateTime(utcNow(),'yyyy-MM-dd')}",
                    "timezone": "Asia/Calcutta"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "RubrikCustomConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-RubrikcustomconnectorConnectionName'))]",
                "connectionName": "[variables('playbook2-RubrikcustomconnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/customApis/Rubrikcustomconnector')]"
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook2-KeyvaultConnectionName'))]",
                "connectionName": "[variables('playbook2-KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook2-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikAnomalyAnalysis",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook2-RubrikcustomconnectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook2-KeyvaultConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook2-RubrikcustomconnectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook2-RubrikcustomconnectorConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook2-KeyvaultConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook2-KeyvaultConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "Microsoft_Sentinel_incident": {
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "callback_url": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "path": "/incident-creation"
              }
            }
          },
          "actions": {
            "For_each_2": {
              "foreach": "@triggerBody()?['object']?['properties']?['Alerts']",
              "actions": {
                "Parse_JSON": {
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@items('For_each_2')?['properties']?['additionalData']?['Custom Details']",
                    "schema": {
                      "properties": {
                        "ClusterId": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "ObjectId": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "ObjectName": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "ObjectType": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "Set_ClusterId": {
                  "runAfter": {
                    "Set_ObjectId": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ClusterId",
                    "value": "@{body('Parse_JSON')?['ClusterId'][0]}"
                  }
                },
                "Set_ObjectId": {
                  "runAfter": {
                    "Parse_JSON": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ObjectId",
                    "value": "@{body('Parse_JSON')?['ObjectId'][0]}"
                  }
                },
                "Set_ObjectName": {
                  "runAfter": {
                    "Set_ClusterId": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ObjectName",
                    "value": "@{body('Parse_JSON')?['ObjectName'][0]}"
                  }
                },
                "Set_ObjectType": {
                  "runAfter": {
                    "Set_ObjectName": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ObjectType",
                    "value": "@{body('Parse_JSON')?['ObjectType'][0]}"
                  }
                }
              },
              "runAfter": {
                "Initialize_status": [
                  "Succeeded"
                ]
              },
              "type": "Foreach",
              "runtimeConfiguration": {
                "concurrency": {
                  "repetitions": 1
                }
              }
            },
            "Initialize_BaseURL": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "BaseUrl",
                    "type": "string",
                    "value": "[concat('https://', parameters('playbook3-API Hostname'))]"
                  }
                ]
              }
            },
            "Initialize_Cluster_Id": {
              "runAfter": {
                "Initialize_Object_Name": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterId",
                    "type": "string",
                    "value": "d1879b0c-e18f-4bf6-8894-c35f8fa336a6"
                  }
                ]
              }
            },
            "Initialize_Object_Id": {
              "runAfter": {
                "Initialize_Cluster_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "string",
                    "value": "0cc517e9-23f7-5579-86f1-d9cb8e5d67a7"
                  }
                ]
              }
            },
            "Initialize_Object_Name": {
              "runAfter": {
                "Initialize_Object_Type": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectName",
                    "type": "string",
                    "value": "haverford-db-01"
                  }
                ]
              }
            },
            "Initialize_Object_Type": {
              "runAfter": {
                "Initialize_BaseURL": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectType",
                    "type": "string",
                    "value": "VmwareVm"
                  }
                ]
              }
            },
            "Initialize_Start_Time_of_Incident": {
              "runAfter": {
                "Initialize_Object_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IncidentStartTime",
                    "type": "string",
                    "value": "@triggerBody()?['object']?['properties']?['createdTimeUtc']"
                  }
                ]
              }
            },
            "Initialize_status": {
              "runAfter": {
                "Initialize_Start_Time_of_Incident": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Status",
                    "type": "string"
                  }
                ]
              }
            },
            "Is_object_type_Fileset": {
              "actions": {
                "RubrikFilesetRansomwareDiscovery": {
                  "type": "Workflow",
                  "inputs": {
                    "body": {
                      "BaseUrl": "@variables('BaseUrl')",
                      "ClusterId": "@variables('ClusterId')",
                      "ObjectId": "@variables('ObjectId')",
                      "ObjectType": "@variables('ObjectType')"
                    },
                    "host": {
                      "triggerName": "manual",
                      "workflow": {
                        "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikFilesetRansomwareDiscovery"
                      }
                    }
                  }
                }
              },
              "runAfter": {
                "For_each_2": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Is_object_type_Vm": {
                    "actions": {
                      "Collect_Ransomware_Discovery_and_Recovery_Data": {
                        "type": "ApiConnectionWebhook",
                        "inputs": {
                          "body": {
                            "body": {
                              "messageBody": "{     \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",     \"type\": \"AdaptiveCard\",     \"version\": \"1.3\",     \"body\": [         {             \"type\": \"TextBlock\",             \"size\": \"Large\",             \"weight\": \"Bolder\",             \"text\": \"Ransomware Discovery and Recovery Data\",             \"horizontalAlignment\": \"Center\",             \"style\": \"heading\",             \"color\": \"Accent\",             \"fontType\": \"Default\",             \"wrap\": true,             \"id\": \"heading\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Please provide input values to initiate ransomware discovery and recovery.\",             \"wrap\": true,             \"color\": \"Light\",             \"style\": \"default\",             \"separator\": true,             \"id\": \"info\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Which playbook to use for ransomware discovery and recovery?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip1\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"Rubrik Ransomware Discovery and VM Recovery\",                     \"value\": \"Rubrik Ransomware Discovery and VM Recovery\"                 },                 {                     \"title\": \"Rubrik Ransomware Discovery and File Recovery\",                     \"value\": \"Rubrik Ransomware Discovery and File Recovery\"                 },                 {                     \"title\": \"No Recovery\",                     \"value\": \"No Recovery\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"value\": \"Rubrik Ransomware Discovery and VM Recovery\",             \"style\": \"expanded\",             \"id\": \"File VM or No recovery\"         }     ],     \"actions\": [         {             \"type\": \"Action.Submit\",             \"title\": \"Submit Answer\",             \"data\": {                 \"id\": \"LoginVal\"             },             \"style\": \"positive\",             \"id\": \"Submit\"         }     ] } ",
                              "recipient": {
                                "channelId": "19:bnaBaHVOHCBYW6MgUqrQK9R7mnkjvb9j7F1T9TaTct41@thread.tacv2",
                                "groupId": "33066078-fe8e-4fad-80a5-9b6728e915a4"
                              },
                              "updateMessage": "Thanks for your response!"
                            },
                            "notificationUrl": "@{listCallbackUrl()}"
                          },
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['teams_1']['connectionId']"
                            }
                          },
                          "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                        }
                      },
                      "Shall_recovery_be_performed": {
                        "actions": {
                          "Is_file_recovery_selected": {
                            "actions": {
                              "RubrikRansomwareDiscoveryAndFileRecovery": {
                                "type": "Workflow",
                                "inputs": {
                                  "body": {
                                    "BaseUrl": "@variables('BaseUrl')",
                                    "ClusterId": "@variables('ClusterId')",
                                    "ObjectId": "@variables('ObjectId')",
                                    "ObjectType": "@variables('ObjectType')"
                                  },
                                  "host": {
                                    "triggerName": "manual",
                                    "workflow": {
                                      "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikRansomwareDiscoveryAndFileRecovery"
                                    }
                                  }
                                }
                              }
                            },
                            "else": {
                              "actions": {
                                "RubrikRansomwareDiscoveryAndVMRecovery": {
                                  "type": "Workflow",
                                  "inputs": {
                                    "body": {
                                      "BaseUrl": "@variables('BaseUrl')",
                                      "ClusterId": "@variables('ClusterId')",
                                      "ObjectId": "@variables('ObjectId')",
                                      "ObjectType": "@variables('ObjectType')"
                                    },
                                    "host": {
                                      "triggerName": "manual",
                                      "workflow": {
                                        "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikRansomwareDiscoveryAndVMRecovery"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "contains": [
                                    "@body('Collect_Ransomware_Discovery_and_Recovery_Data')?['data']?['file VM or No recovery']",
                                    "File Recovery"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        },
                        "runAfter": {
                          "Collect_Ransomware_Discovery_and_Recovery_Data": [
                            "Succeeded"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Set_status_as_No_Recovery": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Status",
                                "value": "Error: No recovery selected"
                              }
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "not": {
                                "contains": [
                                  "@body('Collect_Ransomware_Discovery_and_Recovery_Data')?['data']?['file VM or No recovery']",
                                  "No Recovery"
                                ]
                              }
                            }
                          ]
                        },
                        "type": "If"
                      }
                    },
                    "else": {
                      "actions": {
                        "Set_status_for_not_a_valid_object": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Status",
                            "value": "Not a valid object"
                          }
                        }
                      }
                    },
                    "expression": {
                      "and": [
                        {
                          "contains": [
                            "@variables('ObjectType')",
                            "Vm"
                          ]
                        }
                      ]
                    },
                    "type": "If"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "contains": [
                      "@variables('ObjectType')",
                      "Fileset"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "RubrikAnomalyAnalysis": {
              "runAfter": {
                "For_each_2": [
                  "Succeeded"
                ]
              },
              "type": "Workflow",
              "inputs": {
                "body": {
                  "BaseUrl": "@variables('BaseUrl')",
                  "ClusterId": "@variables('ClusterId')",
                  "IncidentStartTime": "@variables('IncidentStartTime')",
                  "ObjectName": "@variables('ObjectName')"
                },
                "host": {
                  "triggerName": "manual",
                  "workflow": {
                    "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikAnomalyAnalysis"
                  }
                }
              }
            },
            "RubrikDataObjectDiscovery": {
              "runAfter": {
                "For_each_2": [
                  "Succeeded"
                ]
              },
              "type": "Workflow",
              "inputs": {
                "body": {
                  "BaseUrl": "@variables('BaseUrl')",
                  "ObjectId": "@variables('ObjectId')",
                  "ObjectName": "@variables('ObjectName')"
                },
                "host": {
                  "triggerName": "manual",
                  "workflow": {
                    "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikDataObjectDiscovery"
                  }
                }
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-MicrosoftSentinelConnectionName'))]",
                "connectionName": "[variables('playbook3-MicrosoftSentinelConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "teams_1": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook3-TeamsConnectionName'))]",
                "connectionName": "[variables('playbook3-TeamsConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Teams')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook3-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikAnomalyIncidentResponse",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook3-MicrosoftSentinelConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook3-TeamsConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook3-MicrosoftSentinelConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook3-MicrosoftSentinelConnectionName')]",
        "parameterValueType": "Alternative",
        "api": {
          "id": "[variables('_playbook-3-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook3-TeamsConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook3-TeamsConnectionName')]",
        "api": {
          "id": "[variables('_playbook-3-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Disabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ObjectId": {
                      "type": "string"
                    },
                    "ObjectName": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Authentication_2": {
              "runAfter": {
                "ClientSecret": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "client_id": "@body('ClientId')?['value']",
                  "client_secret": "@body('ClientSecret')?['value']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/client_token"
              }
            },
            "ClientId": {
              "runAfter": {
                "Initialize_error_message_variable_for_vm": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "ClientSecret": {
              "runAfter": {
                "ClientId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Initialize_Object_Name": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectName",
                    "type": "string",
                    "value": "haverford-db-01"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_1_File": {
              "runAfter": {
                "access_token": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckConditionFile1",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_1_Snapshot": {
              "runAfter": {
                "Initialize_check_condition_-_4_VM": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckCondition9",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_1_VM": {
              "runAfter": {
                "Initialize_check_condition_-_4_File": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckCondition5",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_2_File": {
              "runAfter": {
                "Initialize_check_condition_-_1_File": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckConditionFile2",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_2_Snapshot": {
              "runAfter": {
                "Initialize_check_condition_-_1_Snapshot": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckCondition10",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_2_VM": {
              "runAfter": {
                "Initialize_check_condition_-_1_VM": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckCondition6",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_3_File": {
              "runAfter": {
                "Initialize_check_condition_-_2_File": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckConditionFile3",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_3_Snapshot": {
              "runAfter": {
                "Initialize_check_condition_-_2_Snapshot": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckCondition11",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_3_VM": {
              "runAfter": {
                "Initialize_check_condition_-_2_VM": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckCondition7",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_4_File": {
              "runAfter": {
                "Initialize_check_condition_-_3_File": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckConditionFile4",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_check_condition_-_4_VM": {
              "runAfter": {
                "Initialize_check_condition_-_3_VM": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CheckCondition8",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_error_message_variable_for_file": {
              "runAfter": {
                "Initialize_variable_for_general_error_message": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ErrorMessageFile",
                    "type": "string",
                    "value": "No Errors"
                  }
                ]
              }
            },
            "Initialize_error_message_variable_for_vm": {
              "runAfter": {
                "Initialize_error_message_variable_for_file": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ErrorMessageVm",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_terminate_variable_for_File": {
              "runAfter": {
                "Initialize_check_condition_-_3_Snapshot": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "terminate",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_terminate_variable_for_Snapshot": {
              "runAfter": {
                "Initialize_terminate_variable_for_VM": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "terminateFileset",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_terminate_variable_for_VM": {
              "runAfter": {
                "Initialize_terminate_variable_for_File": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "terminateVM",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Initialize_variable_Object_Id": {
              "runAfter": {
                "Initialize_Object_Name": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "string",
                    "value": "215d52b9-5285-4634-a5e4-08bbabe9981b"
                  }
                ]
              }
            },
            "Initialize_variable_for_general_error_message": {
              "runAfter": {
                "Initialize_variable_Object_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ErrorMessage",
                    "type": "string"
                  }
                ]
              }
            },
            "Is_Authentication_Failed": {
              "actions": {
                "Response_if_status_code_is_NOT_200": {
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "@body('Authentication_2')?['message']",
                    "statusCode": "@outputs('Authentication_2')['statusCode']"
                  }
                },
                "auth_failed": {
                  "runAfter": {
                    "Response_if_status_code_is_NOT_200": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Authentication_2')['statusCode']}",
                      "message": "@{body('Authentication_2')?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Authentication_2": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Authentication_2')['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Is_there_an_Object_Name": {
              "actions": {
                "Check_for_effective_Sla_domain_Id_is_empty_or_not": {
                  "actions": {
                    "Check_for_effective_Sla_domain_Id": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                      "actions": {
                        "Condition_7": {
                          "actions": {
                            "Set_variable_16": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CheckConditionFile4",
                                "value": "@true"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_variable_17": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "CheckConditionFile4",
                                  "value": "@{false}"
                                }
                              },
                              "Set_variable_18": {
                                "runAfter": {
                                  "Set_variable_17": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "terminate",
                                  "value": "@false"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@items('check_for_effective_Sla_domain_Id')?['effectiveSlaDomain']?['id']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Check_for_physical_Path_name_": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminate'), true)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Check_for_effective_Sla_domain_Id_is_empty_or_not_VM": {
                  "actions": {
                    "For_each_7": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                      "actions": {
                        "Condition_13": {
                          "actions": {
                            "Set_variable_28": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CheckCondition8",
                                "value": "@true"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_variable_29": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "CheckCondition8",
                                  "value": "@false"
                                }
                              },
                              "Set_variable_30": {
                                "runAfter": {
                                  "Set_variable_29": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "terminateVM",
                                  "value": "@false"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@items('For_each_7')?['effectiveSlaDomain']?['id']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Check_for_physical_Path_name_VM": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminateVM'), true)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Check_for_id_and_name_which_has_File_data": {
                  "actions": {
                    "Check_for_id_and_name": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['edges']",
                      "actions": {
                        "Condition_3": {
                          "actions": {
                            "Condition_4": {
                              "actions": {
                                "Set_variable_10": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "CheckConditionFile2",
                                    "value": "@true"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set_variable_11": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CheckConditionFile2",
                                      "value": "@false"
                                    }
                                  },
                                  "Set_variable_12": {
                                    "runAfter": {
                                      "Set_variable_11": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "terminate",
                                      "value": "@false"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('Check_for_id_and_name')?['node']?['id']",
                                        "@null"
                                      ]
                                    }
                                  },
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('Check_for_id_and_name')?['node']?['name']",
                                        "@null"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_variable_44": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "CheckConditionFile2",
                                  "value": "@false"
                                }
                              },
                              "Set_variable_45": {
                                "runAfter": {
                                  "Set_variable_44": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "terminate",
                                  "value": "@false"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@items('Check_for_id_and_name')?['node']?['objectType']",
                                  "File"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Check_snapshotId_is_empty_or_not": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminate'), true)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Check_for_id_and_name_which_has_VM_data": {
                  "actions": {
                    "For_each_4": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['edges']",
                      "actions": {
                        "Condition_9": {
                          "actions": {
                            "Condition_10": {
                              "actions": {
                                "Set_variable_22": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "CheckCondition6",
                                    "value": "@true"
                                  }
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set_variable_23": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CheckCondition6",
                                      "value": "@false"
                                    }
                                  },
                                  "Set_variable_24": {
                                    "runAfter": {
                                      "Set_variable_23": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "terminateVM",
                                      "value": "@false"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_4')?['node']?['id']",
                                        "@null"
                                      ]
                                    }
                                  },
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_4')?['node']?['name']",
                                        "@null"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "contains": [
                                  "@items('For_each_4')?['node']?['objectType']",
                                  "VM"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Check_snapshotId_is_empty_or_not_in_VM": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminateVM'), true)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Check_for_physical_Path_name_": {
                  "actions": {
                    "For_each": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                      "actions": {
                        "For_each_2": {
                          "foreach": "@items('For_each')?['physicalPath']",
                          "actions": {
                            "Condition_5": {
                              "actions": {
                                "Condition_6": {
                                  "actions": {
                                    "Set_variable_13": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckConditionFile3",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_variable_14": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "CheckConditionFile3",
                                          "value": "@false"
                                        }
                                      },
                                      "Set_variable_15": {
                                        "runAfter": {
                                          "Set_variable_14": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "terminate",
                                          "value": "@true"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@items('For_each_2')?['name']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@items('For_each_2')?['objectType']",
                                      "VSphereHost"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Check_for_id_and_name_which_has_File_data": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminate'), false)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Check_for_physical_Path_name_VM": {
                  "actions": {
                    "For_each_5": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                      "actions": {
                        "For_each_6": {
                          "foreach": "@items('For_each_5')?['physicalPath']",
                          "actions": {
                            "Condition_11": {
                              "actions": {
                                "Condition_12": {
                                  "actions": {
                                    "Set_variable_25": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckCondition7",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_variable_26": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "CheckCondition7",
                                          "value": "@false"
                                        }
                                      },
                                      "Set_variable_27": {
                                        "runAfter": {
                                          "Set_variable_26": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "terminateVM",
                                          "value": "@true"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@items('For_each_6')?['name']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@items('For_each_6')?['objectType']",
                                      "VSphereVCenter"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Check_for_id_and_name_which_has_VM_data": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminateVM'), false)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Check_snapshotId_is_empty_or_not": {
                  "actions": {
                    "check_snapshotId": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                      "actions": {
                        "Condition": {
                          "actions": {
                            "Set_variable_5": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CheckConditionFile1",
                                "value": "@true"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_variable_8": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "CheckConditionFile1",
                                  "value": "@false"
                                }
                              },
                              "Set_variable_9": {
                                "runAfter": {
                                  "Set_variable_8": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "terminate",
                                  "value": "@true"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@items('check_snapshotId')?['snapshotDistribution']?['id']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "List_the_snapshots_for_all_objects_gets_status_code_200_or_not": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminate'), false)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Check_snapshotId_is_empty_or_not_in_VM": {
                  "actions": {
                    "For_each_3": {
                      "foreach": "@body('Parse_Search_the_global_objects')?['data']?['globalSearchResults']?['nodes']",
                      "actions": {
                        "Condition_8": {
                          "actions": {
                            "Set_variable_19": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CheckCondition5",
                                "value": "@true"
                              }
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_variable_20": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "CheckCondition5",
                                  "value": "@false"
                                }
                              },
                              "Set_variable_21": {
                                "runAfter": {
                                  "Set_variable_20": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "terminateVM",
                                  "value": "@true"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@items('For_each_3')?['snapshotDistribution']?['id']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "List_the_snapshots_for_all_objects_gets_status_code_200_or_not": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@equals(variables('terminateVM'), false)",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Is_Fileset_data_returned": {
                  "runAfter": {
                    "Check_for_effective_Sla_domain_Id_is_empty_or_not": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Set_variable_40": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessageFile",
                          "value": "No data for this type was obtained"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@variables('CheckConditionFile1')",
                            "@false"
                          ]
                        }
                      },
                      {
                        "not": {
                          "equals": [
                            "@variables('CheckConditionFile2')",
                            "@false"
                          ]
                        }
                      },
                      {
                        "not": {
                          "equals": [
                            "@variables('CheckConditionFile3')",
                            "@false"
                          ]
                        }
                      },
                      {
                        "not": {
                          "equals": [
                            "@variables('CheckConditionFile4')",
                            "@false"
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If"
                },
                "Is_VM_data_returned": {
                  "runAfter": {
                    "Check_for_effective_Sla_domain_Id_is_empty_or_not_VM": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Set_variable_41": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessageVm",
                          "value": "No data for this type was obtained"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@variables('CheckCondition5')",
                          "@true"
                        ]
                      },
                      {
                        "equals": [
                          "@variables('CheckCondition6')",
                          "@true"
                        ]
                      },
                      {
                        "equals": [
                          "@variables('CheckCondition7')",
                          "@true"
                        ]
                      },
                      {
                        "equals": [
                          "@variables('CheckCondition8')",
                          "@true"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "List_the_snapshots_for_all_objects_2": {
                  "runAfter": {
                    "Search_the_global_objects_gets_status_code_200_or_not": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "body": {
                      "query": "query SnapshotsListSingleQuery($snappableId: String!, $first: Int, $after: String, $snapshotFilter: [SnapshotQueryFilterInput!], $sortBy: SnapshotQuerySortByField, $sortOrder: SortOrderEnum, $timeRange: TimeRangeInput) {   snapshotsListConnection: snapshotOfASnappableConnection(     snappableId: $snappableId     first: $first     after: $after     snapshotFilter: $snapshotFilter     sortBy: $sortBy     sortOrder: $sortOrder     timeRange: $timeRange   ) {     edges {       node {         id         date         expirationDate         isOnDemandSnapshot         ... on CdmSnapshot {           cdmVersion           isDownloadedSnapshot           cluster {             id             name             version             status           }           pendingSnapshotDeletion {             id: snapshotFid             status           }           slaDomain {             name             ... on ClusterSlaDomain {               fid               cluster {                 id                 name               }             }             ... on GlobalSla {               id             }           }           pendingSla {             id             name           }           snapshotRetentionInfo {             archivalInfos {               name               isExpirationDateCalculated               expirationTime             }             localInfo {               name               isExpirationDateCalculated               expirationTime             }             replicationInfos {               name               isExpirationDateCalculated               expirationTime             }           }           sapHanaAppMetadata {             backupId             backupPrefix             snapshotType             files {               backupFileSizeInBytes             }           }           legalHoldInfo {             shouldHoldInPlace           }         }         ... on PolarisSnapshot {           isDownloadedSnapshot           isReplica           isArchivalCopy           slaDomain {             name             ... on ClusterSlaDomain {               fid               cluster {                 id                 name               }             }             ... on GlobalSla {               id             }           }         }       }     }     pageInfo {       endCursor       hasNextPage     }   } } ",
                      "variables": {
                        "snappableId": "@{triggerBody()?['ObjectId']}",
                        "snapshotFilter": [
                          {
                            "field": "SNAPSHOT_TYPE",
                            "typeFilters": [
                              "ON_DEMAND"
                            ]
                          }
                        ],
                        "sortBy": "CREATION_TIME",
                        "sortOrder": "Desc",
                        "timeRange": {
                          "end": "2022-07-05",
                          "start": "2022-01-21"
                        }
                      }
                    },
                    "headers": {
                      "Authorization": "Bearer @{variables('access_token')}",
                      "Content-Type": "application/json"
                    },
                    "method": "POST",
                    "path": "/api/graphql",
                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                  }
                },
                "List_the_snapshots_for_all_objects_gets_status_code_200_or_not": {
                  "actions": {
                    "check_for_error_in_response": {
                      "actions": {
                        "Response_if_has_error_in_response_": {
                          "runAfter": {
                            "Set_error_message_if_has_error_in_response_2": [
                              "Succeeded"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@variables('ErrorMessage')",
                            "statusCode": 200
                          }
                        },
                        "Set_error_message_if_has_error_in_response_2": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "@{body('List_the_snapshots_for_all_objects_2')?['errors'][0]?['message']}"
                          }
                        },
                        "Terminate_if_has_error_in_response_": {
                          "runAfter": {
                            "Response_if_has_error_in_response_": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('List_the_snapshots_for_all_objects_2')?['statusCode']}",
                              "message": "@{body('List_the_snapshots_for_all_objects_2')?['errors'][0]?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('List_the_snapshots_for_all_objects_2')",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {
                    "List_the_snapshots_for_all_objects_2": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Response_4_if_status_code_is_NOT_200_": {
                        "runAfter": {
                          "Set_error_message3_if_status_code_is_NOT_200_": [
                            "Succeeded"
                          ]
                        },
                        "type": "Response",
                        "kind": "Http",
                        "inputs": {
                          "body": "@body('List_the_snapshots_for_all_objects_2')?['message']",
                          "statusCode": "@outputs('List_the_snapshots_for_all_objects_2')['statusCode']"
                        }
                      },
                      "Set_error_message3_if_status_code_is_NOT_200_": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "@{body('List_the_snapshots_for_all_objects_2')?['message']}"
                        }
                      },
                      "Terminate_If_status_code_is_NOT_200_": {
                        "runAfter": {
                          "Response_4_if_status_code_is_NOT_200_": [
                            "Succeeded"
                          ]
                        },
                        "type": "Terminate",
                        "inputs": {
                          "runError": {
                            "code": "@{outputs('List_the_snapshots_for_all_objects_2')?['statusCode']}",
                            "message": "@{body('List_the_snapshots_for_all_objects_2')?['message']}"
                          },
                          "runStatus": "Failed"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('List_the_snapshots_for_all_objects_2')?['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Response_if_successed": {
                  "runAfter": {
                    "Is_Fileset_data_returned": [
                      "Succeeded"
                    ],
                    "Is_VM_data_returned": [
                      "Succeeded"
                    ]
                  },
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": {
                      "File-data-message": "@{variables('ErrorMessageFile')}",
                      "Status": "Successful",
                      "Vm-data-message": "@{variables('ErrorMessageVm')}",
                      "general-message": "@{variables('ErrorMessage')}"
                    },
                    "statusCode": 200
                  }
                },
                "Search_the_global_objects": {
                  "type": "Http",
                  "inputs": {
                    "body": {
                      "query": "    query GlobalSearchResults($first: Int, $after: String, $last: Int, $before: String, $sortBy: HierarchySortByField, $sortOrder: HierarchySortOrder, $filter: [Filter!]) {     globalSearchResults(first: $first, after: $after, last: $last, before: $before, sortBy: $sortBy, sortOrder: $sortOrder, filter: $filter) {         edges {         cursor         node {             id             name             objectType             slaAssignment             slaPauseStatus             numSnappableDescendants         }         }         nodes {         id         name         objectType         slaAssignment         effectiveSlaDomain {             id             name             version         }         slaPauseStatus         snapshotDistribution {             totalCount             scheduledCount             onDemandCount             retrievedCount             id         }         effectiveRetentionSlaDomain {             id             name             version         }         configuredSlaDomain {             id             name             version         }         effectiveSlaSourceObject {             fid             name             objectType         }         logicalPath {             fid             name             objectType         }         physicalPath {             fid             name             objectType         }         numSnappableDescendants         allOrgs {             id             name             description             url             orgAdminId         }         }         pageInfo {         startCursor         endCursor         hasPreviousPage         hasNextPage         }         count     }     }",
                      "variables": {
                        "filter": [
                          {
                            "field": "NAME",
                            "texts": [
                              "@{triggerBody()?['ObjectName']}"
                            ]
                          }
                        ],
                        "first": 10,
                        "sortBy": "ID",
                        "sortOrder": "ASC"
                      }
                    },
                    "headers": {
                      "Authorization": "Bearer @{variables('access_token')}",
                      "Content-Type": "application/json"
                    },
                    "method": "POST",
                    "path": "/api/graphql",
                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                  }
                },
                "Search_the_global_objects_gets_status_code_200_or_not": {
                  "actions": {
                    "Search_the_global_objects_API_has_error_in_response": {
                      "actions": {
                        "Response_if_has_error_in_response": {
                          "runAfter": {
                            "Set_error_message_if_has_error_in_response": [
                              "Succeeded"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": "@variables('ErrorMessage')",
                            "statusCode": 200
                          }
                        },
                        "Set_error_message_if_has_error_in_response": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "@{body('Search_the_global_objects')?['errors'][0]?['message']}"
                          }
                        },
                        "Terminate_if_has_error_in_response": {
                          "runAfter": {
                            "Response_if_has_error_in_response": [
                              "Succeeded"
                            ]
                          },
                          "type": "Terminate",
                          "inputs": {
                            "runError": {
                              "code": "@{outputs('Search_the_global_objects')?['statusCode']}",
                              "message": "@{body('Search_the_global_objects')?['errors'][0]?['message']}"
                            },
                            "runStatus": "Failed"
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Parse_Search_the_global_objects": {
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('Search_the_global_objects')",
                              "schema": {
                                "properties": {
                                  "data": {
                                    "properties": {
                                      "globalSearchResults": {
                                        "properties": {
                                          "count": {
                                            "type": "integer"
                                          },
                                          "edges": {
                                            "items": {
                                              "properties": {
                                                "cursor": {
                                                  "type": "string"
                                                },
                                                "node": {
                                                  "properties": {
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "numSnappableDescendants": {
                                                      "type": "integer"
                                                    },
                                                    "objectType": {
                                                      "type": "string"
                                                    },
                                                    "slaAssignment": {
                                                      "type": "string"
                                                    },
                                                    "slaPauseStatus": {
                                                      "type": "boolean"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "cursor",
                                                "node"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "nodes": {
                                            "items": {
                                              "properties": {
                                                "allOrgs": {
                                                  "type": "array"
                                                },
                                                "configuredSlaDomain": {
                                                  "properties": {
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "effectiveSlaDomain": {
                                                  "properties": {
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "effectiveSlaSourceObject": {
                                                  "properties": {
                                                    "fid": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "objectType": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": [
                                                    "object",
                                                    "null"
                                                  ]
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "logicalPath": {
                                                  "items": {
                                                    "properties": {
                                                      "fid": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "objectType": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "fid",
                                                      "name",
                                                      "objectType"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "numSnappableDescendants": {
                                                  "type": "integer"
                                                },
                                                "objectType": {
                                                  "type": "string"
                                                },
                                                "physicalPath": {
                                                  "items": {
                                                    "properties": {
                                                      "fid": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "objectType": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "fid",
                                                      "name",
                                                      "objectType"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                },
                                                "slaAssignment": {
                                                  "type": "string"
                                                },
                                                "slaPauseStatus": {
                                                  "type": "boolean"
                                                },
                                                "snapshotDistribution": {
                                                  "properties": {
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "onDemandCount": {
                                                      "type": "integer"
                                                    },
                                                    "retrievedCount": {
                                                      "type": "integer"
                                                    },
                                                    "scheduledCount": {
                                                      "type": "integer"
                                                    },
                                                    "totalCount": {
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "required": [
                                                "id",
                                                "name",
                                                "objectType",
                                                "slaAssignment",
                                                "effectiveSlaDomain",
                                                "slaPauseStatus",
                                                "snapshotDistribution",
                                                "effectiveRetentionSlaDomain",
                                                "configuredSlaDomain",
                                                "effectiveSlaSourceObject",
                                                "logicalPath",
                                                "physicalPath",
                                                "numSnappableDescendants",
                                                "allOrgs"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "pageInfo": {
                                            "properties": {
                                              "endCursor": {
                                                "type": "string"
                                              },
                                              "hasNextPage": {
                                                "type": "boolean"
                                              },
                                              "hasPreviousPage": {
                                                "type": "boolean"
                                              },
                                              "startCursor": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('Search_the_global_objects')",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {
                    "Search_the_global_objects": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Response_if_status_code_is_NOT_200_2": {
                        "runAfter": {
                          "Set_error_message_if_status_code_is_NOT_200_2": [
                            "Succeeded"
                          ]
                        },
                        "type": "Response",
                        "kind": "Http",
                        "inputs": {
                          "body": "@body('Search_the_global_objects')?['message']",
                          "statusCode": "@outputs('Search_the_global_objects')['statusCode']"
                        }
                      },
                      "Set_error_message_if_status_code_is_NOT_200_2": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "@{body('Search_the_global_objects')?['message']}"
                        }
                      },
                      "Terminate_if_status_code_is_NOT_200_2": {
                        "runAfter": {
                          "Response_if_status_code_is_NOT_200_2": [
                            "Succeeded"
                          ]
                        },
                        "type": "Terminate",
                        "inputs": {
                          "runError": {
                            "code": "@{outputs('Search_the_global_objects')?['statusCode']}",
                            "message": "@{body('Search_the_global_objects')?['message']}"
                          },
                          "runStatus": "Failed"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('Search_the_global_objects')?['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Initialize_terminate_variable_for_Snapshot": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Is_object_ID_provided": {
                    "actions": {
                      "Check_Date_is_empty_or_not_in_Snapshotdata": {
                        "actions": {
                          "For_each_10": {
                            "foreach": "@body('Response_of_List_the_snapshots_for_all_objects')?['data']?['snapshotsListConnection']?['edges']",
                            "actions": {
                              "Condition_16": {
                                "actions": {
                                  "Set_variable_37": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CheckCondition11",
                                      "value": "@true"
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_variable_38": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckCondition11",
                                        "value": "@false"
                                      }
                                    },
                                    "Set_variable_39": {
                                      "runAfter": {
                                        "Set_variable_38": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "terminateFileset",
                                        "value": "@true"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "not": {
                                        "equals": [
                                          "@items('For_each_10')?['node']?['date']",
                                          "@null"
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "type": "Foreach"
                          }
                        },
                        "runAfter": {
                          "Check_SnapshotId_Id_is_empty_or_not_in_Snapshotdata": [
                            "Succeeded"
                          ]
                        },
                        "expression": "@equals(variables('terminateFileset'), false)",
                        "limit": {
                          "count": 60,
                          "timeout": "PT1H"
                        },
                        "type": "Until"
                      },
                      "Check_SnapshotId_Id_is_empty_or_not_in_Snapshotdata": {
                        "actions": {
                          "For_each_9": {
                            "foreach": "@body('Response_of_List_the_snapshots_for_all_objects')?['data']?['snapshotsListConnection']?['edges']",
                            "actions": {
                              "Condition_15": {
                                "actions": {
                                  "Set_variable_34": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CheckCondition10",
                                      "value": "@true"
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_variable_35": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckCondition10",
                                        "value": "@false"
                                      }
                                    },
                                    "Set_variable_36": {
                                      "runAfter": {
                                        "Set_variable_35": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "terminateFileset",
                                        "value": "@false"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "not": {
                                        "equals": [
                                          "@items('For_each_9')?['node']?['pendingSnapshotDeletion']",
                                          "@null"
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "type": "Foreach"
                          }
                        },
                        "runAfter": {
                          "Check_object_Id_is_empty_or_not_in_Snapshotdata": [
                            "Succeeded"
                          ]
                        },
                        "expression": "@equals(variables('terminateFileset'), true)",
                        "limit": {
                          "count": 60,
                          "timeout": "PT1H"
                        },
                        "type": "Until"
                      },
                      "Check_object_Id_is_empty_or_not_in_Snapshotdata": {
                        "actions": {
                          "For_each_8": {
                            "foreach": "@body('Response_of_List_the_snapshots_for_all_objects')?['data']?['snapshotsListConnection']?['edges']",
                            "actions": {
                              "Condition_14": {
                                "actions": {
                                  "Set_variable_31": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CheckCondition9",
                                      "value": "@true"
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Set_variable_32": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "CheckCondition9",
                                        "value": "@false"
                                      }
                                    },
                                    "Set_variable_33": {
                                      "runAfter": {
                                        "Set_variable_32": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "terminateFileset",
                                        "value": "@true"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "not": {
                                        "equals": [
                                          "@items('For_each_8')?['node']?['id']",
                                          "@null"
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "type": "Foreach"
                          }
                        },
                        "runAfter": {
                          "Response_of_List_the_snapshots_for_all_objects": [
                            "Succeeded"
                          ]
                        },
                        "expression": "@equals(variables('terminateFileset'), false)",
                        "limit": {
                          "count": 60,
                          "timeout": "PT1H"
                        },
                        "type": "Until"
                      },
                      "Is_Snapshot_data_returned": {
                        "runAfter": {
                          "Check_Date_is_empty_or_not_in_Snapshotdata": [
                            "Succeeded"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Set_variable_43": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ErrorMessage",
                                "value": "No data for this type was obtained"
                              }
                            }
                          }
                        },
                        "expression": {
                          "or": [
                            {
                              "equals": [
                                "@variables('CheckCondition9')",
                                "@true"
                              ]
                            },
                            {
                              "equals": [
                                "@variables('CheckCondition10')",
                                "@true"
                              ]
                            },
                            {
                              "equals": [
                                "@variables('CheckCondition11')",
                                "@true"
                              ]
                            }
                          ]
                        },
                        "type": "If"
                      },
                      "List_the_snapshots_for_all_objects": {
                        "type": "Http",
                        "inputs": {
                          "body": {
                            "query": "query SnapshotsListSingleQuery($snappableId: String!, $first: Int, $after: String, $snapshotFilter: [SnapshotQueryFilterInput!], $sortBy: SnapshotQuerySortByField, $sortOrder: SortOrderEnum, $timeRange: TimeRangeInput) {   snapshotsListConnection: snapshotOfASnappableConnection(     snappableId: $snappableId     first: $first     after: $after     snapshotFilter: $snapshotFilter     sortBy: $sortBy     sortOrder: $sortOrder     timeRange: $timeRange   ) {     edges {       node {         id         date         expirationDate         isOnDemandSnapshot         ... on CdmSnapshot {           cdmVersion           isDownloadedSnapshot           cluster {             id             name             version             status           }           pendingSnapshotDeletion {             id: snapshotFid             status           }           slaDomain {             name             ... on ClusterSlaDomain {               fid               cluster {                 id                 name               }             }             ... on GlobalSla {               id             }           }           pendingSla {             id             name           }           snapshotRetentionInfo {             archivalInfos {               name               isExpirationDateCalculated               expirationTime             }             localInfo {               name               isExpirationDateCalculated               expirationTime             }             replicationInfos {               name               isExpirationDateCalculated               expirationTime             }           }           sapHanaAppMetadata {             backupId             backupPrefix             snapshotType             files {               backupFileSizeInBytes             }           }           legalHoldInfo {             shouldHoldInPlace           }         }         ... on PolarisSnapshot {           isDownloadedSnapshot           isReplica           isArchivalCopy           slaDomain {             name             ... on ClusterSlaDomain {               fid               cluster {                 id                 name               }             }             ... on GlobalSla {               id             }           }         }       }     }     pageInfo {       endCursor       hasNextPage     }   } } ",
                            "variables": {
                              "snappableId": "@{triggerBody()?['ObjectId']}",
                              "snapshotFilter": [
                                {
                                  "field": "SNAPSHOT_TYPE",
                                  "typeFilters": [
                                    "ON_DEMAND"
                                  ]
                                }
                              ],
                              "sortBy": "CREATION_TIME",
                              "sortOrder": "Desc",
                              "timeRange": {
                                "end": "2022-07-05",
                                "start": "2022-01-21"
                              }
                            }
                          },
                          "headers": {
                            "Authorization": "Bearer @{variables('access_token')}",
                            "Content-Type": "application/json"
                          },
                          "method": "POST",
                          "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                        }
                      },
                      "Response_2": {
                        "runAfter": {
                          "Is_Snapshot_data_returned": [
                            "Succeeded"
                          ]
                        },
                        "type": "Response",
                        "kind": "Http",
                        "inputs": {
                          "body": {
                            "error": "@variables('ErrorMessage')",
                            "status": "Successed"
                          },
                          "statusCode": 200
                        }
                      },
                      "Response_of_List_the_snapshots_for_all_objects": {
                        "runAfter": {
                          "check_List_the_snapshots_for_all_objects_gets_200_or_not": [
                            "Succeeded"
                          ]
                        },
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('List_the_snapshots_for_all_objects')",
                          "schema": {
                            "properties": {
                              "data": {
                                "properties": {
                                  "snapshotsListConnection": {
                                    "properties": {
                                      "edges": {
                                        "items": {
                                          "properties": {
                                            "node": {
                                              "properties": {
                                                "cdmVersion": {
                                                  "type": "string"
                                                },
                                                "cluster": {
                                                  "properties": {
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "status": {
                                                      "type": "string"
                                                    },
                                                    "version": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "date": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "isDownloadedSnapshot": {
                                                  "type": "boolean"
                                                },
                                                "isOnDemandSnapshot": {
                                                  "type": "boolean"
                                                },
                                                "slaDomain": {
                                                  "properties": {
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "required": [
                                            "node"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "pageInfo": {
                                        "properties": {
                                          "endCursor": {
                                            "type": "string"
                                          },
                                          "hasNextPage": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        }
                      },
                      "check_List_the_snapshots_for_all_objects_gets_200_or_not": {
                        "actions": {
                          "Check_if_response_contains_error_or_not": {
                            "actions": {
                              "Response_8": {
                                "runAfter": {
                                  "Set_error_message_if_has_error_in_response_3": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Response",
                                "kind": "Http",
                                "inputs": {
                                  "body": "@body('List_the_snapshots_for_all_objects')?['errors'][0]?['message']",
                                  "statusCode": 200
                                }
                              },
                              "Set_error_message_if_has_error_in_response_3": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage",
                                  "value": "@{body('List_the_snapshots_for_all_objects')?['errors'][0]?['message']}"
                                }
                              },
                              "Terminate_6": {
                                "runAfter": {
                                  "Response_8": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Terminate",
                                "inputs": {
                                  "runError": {
                                    "code": "@{outputs('List_the_snapshots_for_all_objects')?['statusCode']}",
                                    "message": "@{body('List_the_snapshots_for_all_objects')?['errors'][0]?['message']}"
                                  },
                                  "runStatus": "Failed"
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "contains": [
                                    "@body('List_the_snapshots_for_all_objects')",
                                    "errors"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        },
                        "runAfter": {
                          "List_the_snapshots_for_all_objects": [
                            "Succeeded",
                            "Failed"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Response_7": {
                              "runAfter": {
                                "Set_error_message_if_status_code_is_NOT_200_5": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Response",
                              "kind": "Http",
                              "inputs": {
                                "body": "@body('List_the_snapshots_for_all_objects')?['message']",
                                "statusCode": "@outputs('List_the_snapshots_for_all_objects')['statusCode']"
                              }
                            },
                            "Set_error_message_if_status_code_is_NOT_200_5": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ErrorMessage",
                                "value": "@{body('List_the_snapshots_for_all_objects')?['message']}"
                              }
                            },
                            "Terminate": {
                              "runAfter": {
                                "Response_7": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Terminate",
                              "inputs": {
                                "runError": {
                                  "code": "@{outputs('List_the_snapshots_for_all_objects')?['statusCode']}",
                                  "message": "@{body('List_the_snapshots_for_all_objects')?['message']}"
                                },
                                "runStatus": "Failed"
                              }
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@outputs('List_the_snapshots_for_all_objects')?['statusCode']",
                                200
                              ]
                            }
                          ]
                        },
                        "type": "If"
                      }
                    },
                    "else": {
                      "actions": {
                        "Response": {
                          "runAfter": {
                            "Set_error_message_if_status_code_is_NOT_200_4": [
                              "Succeeded"
                            ]
                          },
                          "type": "Response",
                          "kind": "Http",
                          "inputs": {
                            "body": {
                              "error": "@variables('ErrorMessage')",
                              "status": "Successed"
                            },
                            "statusCode": 200
                          }
                        },
                        "Set_error_message_if_status_code_is_NOT_200_4": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "Either object_name or object_id input must be provided."
                          }
                        }
                      }
                    },
                    "expression": {
                      "and": [
                        {
                          "not": {
                            "equals": [
                              "@empty(triggerBody()?['ObjectId'])",
                              "@true"
                            ]
                          }
                        }
                      ]
                    },
                    "type": "If"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@empty(triggerBody()?['ObjectName'])",
                        "@true"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "access_token": {
              "runAfter": {
                "Is_Authentication_Failed": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "access_token",
                    "type": "string",
                    "value": "@{body('Authentication_2')?['access_token']}"
                  }
                ]
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "RubrikCustomConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook4-RubrikcustomconnectorConnectionName'))]",
                "connectionName": "[variables('playbook4-RubrikcustomconnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/customApis/Rubrikcustomconnector')]"
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook4-KeyvaultConnectionName'))]",
                "connectionName": "[variables('playbook4-KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook4-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikDataObjectDiscovery",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook4-RubrikcustomconnectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook4-KeyvaultConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook4-RubrikcustomconnectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook4-RubrikcustomconnectorConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook4-KeyvaultConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook4-KeyvaultConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Disabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ClusterId": {
                      "type": "string"
                    },
                    "ObjectId": {
                      "type": "string"
                    },
                    "ObjectType": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Check_that_IOC_scan_has_no_error": {
              "runAfter": {
                "RubrikIOCScan": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Response_2": {
                    "runAfter": {
                      "Set_variable": [
                        "Succeeded"
                      ]
                    },
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": {
                        "error": "@{variables('Status')}"
                      },
                      "statusCode": 400
                    }
                  },
                  "Set_variable": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Status",
                      "value": "Error in IOC Scan: @{body('RubrikIOCScan')?['error']}"
                    }
                  },
                  "Terminate": {
                    "runAfter": {
                      "Response_2": [
                        "Succeeded"
                      ]
                    },
                    "type": "Terminate",
                    "inputs": {
                      "runError": {
                        "message": "Error: @{variables('Status')}"
                      },
                      "runStatus": "Failed"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@empty(body('RubrikIOCScan')?['error'])",
                      "@true"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Check_that_Polling_Timeout_is_less_than_or_equal_to_0_": {
              "actions": {
                "Set_default_value_for_polling_timeout": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "PollingTimeout",
                    "value": 720
                  }
                }
              },
              "runAfter": {
                "Initialize_polling_timeout": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "lessOrEquals": [
                      "@variables('PollingTimeout')",
                      0
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Collect_IOC_Data": {
              "runAfter": {
                "Is_object_type_not_a_Fileset": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "body": {
                    "messageBody": "{     \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",     \"type\": \"AdaptiveCard\",     \"version\": \"1.3\",     \"body\": [         {             \"type\": \"TextBlock\",             \"size\": \"Large\",             \"weight\": \"Bolder\",             \"text\": \"IOC Scan Data\",             \"horizontalAlignment\": \"Center\",             \"style\": \"heading\",             \"color\": \"Accent\",             \"fontType\": \"Default\",             \"wrap\": true,             \"id\": \"heading\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Input arguments required to initiate IOC Scan.\",             \"wrap\": true,             \"color\": \"Light\",             \"style\": \"default\",             \"separator\": true,             \"id\": \"info\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC hash to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip1\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC hash to scan for\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC path to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip2\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC path to scan for\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC Yara rule to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip3\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC Yara rule to scan for\",             \"isMultiline\": true         },         {             \"type\": \"TextBlock\",             \"text\": \"Start date to initiate the IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip4\"         },         {             \"type\": \"Input.Date\",             \"id\": \"Start date to initiate the IOC scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"End date to initiate the IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip5\"         },         {             \"type\": \"Input.Date\",             \"id\": \"End date to initiate the IOC scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling interval for IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip7\"         },         {             \"type\": \"Input.Number\",             \"id\": \"Polling interval for IOC Scan\",             \"placeholder\": \"5\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling timeout for IOC Scan\\n\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip8\"         },         {             \"type\": \"Input.Number\",             \"label\": \"In minutes\",             \"id\": \"Polling timeout for IOC Scan\",             \"placeholder\": \"720\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC Yara rule file URL to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip10\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC Yara rule file URL to scan for\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to include in the IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip11\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to include in the IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to exclude in the IOC Scan\",             \"wrap\": true,             \"separator\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip12\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to exclude in the IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to exempt in the IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to exempt in the IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Scan Name\",             \"wrap\": true,             \"separator\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip15\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Scan Name\"         }     ],     \"actions\": [         {             \"type\": \"Action.Submit\",             \"title\": \"Submit Answer\",             \"data\": {                 \"id\": \"LoginVal\"             },             \"style\": \"positive\",             \"id\": \"Submit\"         }     ] } ",
                    "recipient": {
                      "channelId": "19:bnaBaHVOHCBYW6MgUqrQK9R7mnkjvb9j7F1T9TaTct41@thread.tacv2",
                      "groupId": "33066078-fe8e-4fad-80a5-9b6728e915a4"
                    },
                    "updateMessage": "Thanks for your response!"
                  },
                  "notificationUrl": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
              }
            },
            "Initialize_Cluster_Id": {
              "runAfter": {
                "Initialize_Object_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterId",
                    "type": "string",
                    "value": "@triggerBody()?['ClusterId']"
                  }
                ]
              },
              "description": "playbook input from incident"
            },
            "Initialize_IOCYaraRule": {
              "runAfter": {
                "Initialize_Cluster_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IOCYaraRule",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Object_Id": {
              "runAfter": {
                "Initialize_Object_Type": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "string",
                    "value": "@triggerBody()?['ObjectId']"
                  }
                ]
              },
              "description": "playbook input from incident"
            },
            "Initialize_Object_Type": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectType",
                    "type": "string",
                    "value": "@triggerBody()?['ObjectType']"
                  }
                ]
              },
              "description": "fetch from incident"
            },
            "Initialize_Status_for_IOC_scan": {
              "runAfter": {
                "Initialize_IOCYaraRule": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Status",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_polling_timeout": {
              "runAfter": {
                "Collect_IOC_Data": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PollingTimeout",
                    "type": "integer",
                    "value": "@if(empty(body('Collect_IOC_Data')?['data']?['polling timeout ']),0,int(body('Collect_IOC_Data')?['data']?['polling timeout ']))"
                  }
                ]
              }
            },
            "Is_object_type_not_a_Fileset": {
              "actions": {
                "Error_for_not_a_Fileset_object": {
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "message": "Not a Fileset object"
                    },
                    "runStatus": "Failed"
                  }
                },
                "Error_response_for_not_a_Fileset_object": {
                  "runAfter": {
                    "Error_for_not_a_Fileset_object": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "Not a Fileset object",
                    "statusCode": 400
                  }
                }
              },
              "runAfter": {
                "Initialize_Status_for_IOC_scan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "contains": [
                        "@variables('ObjectType')",
                        "Fileset"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Parse_JSON": {
              "runAfter": {
                "Check_that_IOC_scan_has_no_error": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('RubrikIOCScan')",
                "schema": {
                  "properties": {
                    "RadarIOCScan": {
                      "type": "object"
                    },
                    "RadarIOCScanStatus": {
                      "type": "string"
                    },
                    "RecoverableSnapshotid": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string"
                    },
                    "isLatestInfected": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "Response": {
              "runAfter": {
                "Set_scan_status": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": "@if(equals(outputs('RubrikIOCScan')['statusCode'],200),variables('Status'),'Error: IOC Scan is not successful')",
                "statusCode": "@if(equals(outputs('RubrikIOCScan')['statusCode'],200),200,400)"
              }
            },
            "RubrikIOCScan": {
              "runAfter": {
                "Whether_to_fetch_Yara_rule(s)_from_a_URL": [
                  "Succeeded"
                ]
              },
              "type": "Workflow",
              "inputs": {
                "body": {
                  "BaseUrl": "@triggerBody()?['BaseUrl']",
                  "ClusterId": "@variables('ClusterId')",
                  "EndDate": "@body('Collect_IOC_Data')?['data']?['end date to initiate the IOC scan']",
                  "IOCHash": "@body('Collect_IOC_Data')?['data']?['ioc hash to scan for']",
                  "IOCPath": "@body('Collect_IOC_Data')?['data']?['ioc path to scan for']",
                  "IOCYaraRule": "@body('Collect_IOC_Data')?['data']?['ioc Yara rule to scan for']",
                  "Limit": 1,
                  "ObjectId": "@variables('ObjectId')",
                  "PathsToExclude": "@body('Collect_IOC_Data')?['data']?['paths to exclude in the IOC Scan']",
                  "PathsToExempt": "@body('Collect_IOC_Data')?['data']?['paths to exempt in the IOC Scan']",
                  "PathsToInclude": "@body('Collect_IOC_Data')?['data']?['paths to include in the IOC Scan']",
                  "PollingInterval": "@body('Collect_IOC_Data')?['data']?['polling interval for IOC Scan']",
                  "PollingTimeout": "@body('Collect_IOC_Data')?['data']?['polling timeout for IOC Scan']",
                  "ScanName": "@body('Collect_IOC_Data')?['data']?['scan Name']",
                  "StartDate": "@body('Collect_IOC_Data')?['data']?['start date to initiate the IOC scan']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "triggerName": "manual",
                  "workflow": {
                    "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikIOCScan"
                  }
                }
              }
            },
            "Set_scan_status": {
              "runAfter": {
                "Parse_JSON": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "Status",
                "value": "@body('Parse_JSON')?['RadarIOCScanStatus']"
              }
            },
            "Whether_to_fetch_Yara_rule(s)_from_a_URL": {
              "actions": {
                "Fetch_Yara_rule(s)_from_file_URL": {
                  "type": "Http",
                  "inputs": {
                    "method": "GET",
                    "uri": "@body('Collect_IOC_Data')?['data']?['ioc Yara rule file URL to scan for']"
                  }
                },
                "Set_IOCYaraRule_fetched_from_URL": {
                  "runAfter": {
                    "Fetch_Yara_rule(s)_from_file_URL": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "IOCYaraRule",
                    "value": "@{body('Fetch_Yara_rule(s)_from_file_URL')}"
                  }
                }
              },
              "runAfter": {
                "Check_that_Polling_Timeout_is_less_than_or_equal_to_0_": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Set_default_value_for_IOC_YaraRule": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "IOCYaraRule",
                      "value": "@body('Collect_IOC_Data')?['data']?['ioc Yara rule to scan for']"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@body('Collect_IOC_Data')?['data']?['ioc Yara rule file URL to scan for']",
                        null
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "teams": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook5-TeamsConnectionName'))]",
                "connectionName": "[variables('playbook5-TeamsConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Teams')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook5-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikFilesetRansomwareDiscovery",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook5-TeamsConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook5-TeamsConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook5-TeamsConnectionName')]",
        "api": {
          "id": "[variables('_playbook-3-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Disabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ClusterId": {
                      "type": "string"
                    },
                    "EndDate": {
                      "type": "string"
                    },
                    "IOCHash": {
                      "type": "string"
                    },
                    "IOCPath": {
                      "type": "string"
                    },
                    "IOCYaraRule": {
                      "type": "string"
                    },
                    "Limit": {
                      "type": "integer"
                    },
                    "ObjectId": {
                      "type": "string"
                    },
                    "PathsToExclude": {
                      "type": "string"
                    },
                    "PathsToExempt": {
                      "type": "string"
                    },
                    "PathsToInclude": {
                      "type": "string"
                    },
                    "PollingInterval": {
                      "type": "integer"
                    },
                    "PollingTimeout": {
                      "type": "integer"
                    },
                    "RequestedHashType": {
                      "type": "string"
                    },
                    "ScanName": {
                      "type": "string"
                    },
                    "StartDate": {
                      "type": "string"
                    },
                    "TimeDelta": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Authentication": {
              "runAfter": {
                "ClientSecret": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "client_id": "@body('ClientId')?['value']",
                  "client_secret": "@body('ClientSecret')?['value']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/client_token"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Check_if_limit_is_null_or_not_": {
              "runAfter": {
                "Initialize_Input_Limit": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Set_Input_Limit_variable": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "InputLimit",
                      "value": "@int(triggerBody()?['Limit'])"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@triggerBody()?['Limit']",
                      "@null"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Check_if_limit_is_zero_or_not": {
              "actions": {
                "If_limit_is_less_then_or_equal_to_0_then_set_1": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "InputLimit",
                    "value": 1
                  }
                }
              },
              "runAfter": {
                "Initialize_error_message_of_API": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "lessOrEquals": [
                      "@variables('InputLimit')",
                      0
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "ClientId": {
              "runAfter": {
                "Initialize_ObjectId_array": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "ClientSecret": {
              "runAfter": {
                "ClientId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Compose_ObjectId": {
              "runAfter": {
                "Initialize_status_variable_to_send_it_at_the_end_in_response": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": [
                "@{triggerBody()?['ObjectId']}"
              ]
            },
            "Final_Response": {
              "runAfter": {
                "Perform_IOC_Scan_until_limit_reach": [
                  "Succeeded",
                  "Failed",
                  "TimedOut",
                  "Skipped"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "RadarIOCScan": "@if(equals(variables('IOCScanResult'),null),null,variables('IOCScanResult'))",
                  "RadarIOCScanStatus": "@if(equals(variables('RadarIOCScanStatus'),null),null,variables('RadarIOCScanStatus'))",
                  "RecoverableSnapshotid": "@if(equals(variables('RecoverableSnapshotId'),null),null, variables('RecoverableSnapshotId'))",
                  "error": "@if(equals(variables('ErrorMessage'),null),null,variables('ErrorMessage'))",
                  "isLatestInfected": "@if(equals(variables('isLatestInfected'),null),null,variables('isLatestInfected'))"
                },
                "statusCode": "@variables('StatusCode')"
              }
            },
            "Initialization_for_recoverable_snapshots": {
              "runAfter": {
                "initialization_RadarIOCScanStatus": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RecoverableSnapshots",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_Count": {
              "runAfter": {
                "save_ioc_scan_result_body_here": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Count",
                    "type": "integer",
                    "value": 1
                  }
                ]
              }
            },
            "Initialize_CurrentFieldDate_to_compare_snapshot_Id": {
              "runAfter": {
                "Initialize_Recoverable_Snapshot_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CurrentFieldDate",
                    "type": "string",
                    "value": "1980-07-11"
                  }
                ]
              }
            },
            "Initialize_End_Date_for_IOC_Scan": {
              "runAfter": {
                "Initialize_Start_Date_for_IOC_Scan": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "EndDate",
                    "type": "string",
                    "value": "@triggerBody()?['EndDate']"
                  }
                ]
              }
            },
            "Initialize_Input_Limit": {
              "runAfter": {
                "Initialize_indicatorsOfCompromise": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "InputLimit",
                    "type": "integer",
                    "value": "@null"
                  }
                ]
              }
            },
            "Initialize_LastFieldDate_to_compare_snapshot_Id": {
              "runAfter": {
                "Initialize_CurrentFieldDate_to_compare_snapshot_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "LastFieldDate",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_ObjectId_array": {
              "runAfter": {
                "Compose_ObjectId": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "array",
                    "value": "@outputs('Compose_ObjectId')"
                  }
                ]
              }
            },
            "Initialize_Pending_count_for_IOC_scan": {
              "runAfter": {
                "Check_if_limit_is_null_or_not_": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PendingCount",
                    "type": "integer",
                    "value": 0
                  }
                ]
              }
            },
            "Initialize_Polling_Timeout": {
              "runAfter": {
                "Initialize_Count": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PollingTimeout",
                    "type": "integer"
                  }
                ]
              }
            },
            "Initialize_Recoverable_Snapshot_Id": {
              "runAfter": {
                "Limit_(used_inside_loop)": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RecoverableSnapshotId",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Start_Date_for_IOC_Scan": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "StartDate",
                    "type": "string",
                    "value": "@triggerBody()?['StartDate']"
                  }
                ]
              }
            },
            "Initialize_access_token": {
              "runAfter": {
                "Set_end_date_if_not_provided": [
                  "Succeeded"
                ],
                "Set_limit_if_not_provided": [
                  "Succeeded"
                ],
                "Set_start_date_if_not_provided": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "access_token",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_error_message_of_API": {
              "runAfter": {
                "Initialize_isLatestInfected_": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ErrorMessage",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_indicatorsOfCompromise": {
              "runAfter": {
                "Initialize_End_Date_for_IOC_Scan": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IOCAdvance",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_isLatestInfected_": {
              "runAfter": {
                "Initialization_for_recoverable_snapshots": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "isLatestInfected",
                    "type": "boolean"
                  }
                ]
              }
            },
            "Initialize_status_variable_to_send_it_at_the_end_in_response": {
              "runAfter": {
                "initialize_epoch_value_of_end_date": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "StatusCode",
                    "type": "integer",
                    "value": 200
                  }
                ]
              }
            },
            "Is_Authentication_Failed": {
              "actions": {
                "Response": {
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "@body('Authentication')?['message']",
                    "statusCode": "@outputs('Authentication')['statusCode']"
                  }
                },
                "Terminate": {
                  "runAfter": {
                    "Response": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Authentication')?['statusCode']}",
                      "message": "@{body('Authentication')?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Authentication": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Authentication')?['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Limit_(used_inside_loop)": {
              "runAfter": {
                "Check_if_limit_is_zero_or_not": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Limit",
                    "type": "integer",
                    "value": "@variables('InputLimit')"
                  }
                ]
              }
            },
            "Perform_IOC_Scan_until_limit_reach": {
              "actions": {
                "Does_Start_IOC_scan_get_status_code_200": {
                  "actions": {
                    "Does_Start_IOC_scan_API_response_contains_errors": {
                      "actions": {
                        "Set_Limit_to_0_-_will_exit_the_until_loop2": {
                          "runAfter": {
                            "Set_error_message_if_Start_IOC_scan_response_contains_error": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Limit",
                            "value": 0
                          }
                        },
                        "Set_error_message_if_Start_IOC_scan_response_contains_error": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "@{body('Start_IOC_scan')?['errors'][0]?['message']}"
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Parse_Start_IOC_scan_Response": {
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('Start_IOC_scan')",
                              "schema": {
                                "properties": {
                                  "data": {
                                    "properties": {
                                      "startThreatHunt": {
                                        "properties": {
                                          "huntId": {
                                            "type": "string"
                                          },
                                          "isSyncSuccessful": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('Start_IOC_scan')",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {
                    "Start_IOC_scan": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Set_Limit_to_0_-_will_exit_the_until_loop": {
                        "runAfter": {
                          "Set_Status_code_for_response": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "Limit",
                          "value": 0
                        }
                      },
                      "Set_Start_IOC_scan_error_status_with_status_code_not_equal_to_200_": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "StstusCode: @{outputs('Start_IOC_scan')['statusCode']}, Message: @{body('Start_IOC_scan')?['message']}"
                        }
                      },
                      "Set_Status_code_for_response": {
                        "runAfter": {
                          "Set_Start_IOC_scan_error_status_with_status_code_not_equal_to_200_": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "StatusCode",
                          "value": "@outputs('Start_IOC_scan')['statusCode']"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('Start_IOC_scan')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Does_rubrik-radar-ioc-scan-status_get_status_code_200": {
                  "actions": {
                    "Does_rubrik-radar-ioc-scan-status_API_response_contains_errors": {
                      "actions": {
                        "Set_error_message_if_IOC_scan_status_response_has_error": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "ErrorMessage",
                            "value": "message: @{body('rubrik-radar-ioc-scan-status')?['errors'][0]?['message']}"
                          }
                        },
                        "Set_limit_to_0_to_exit_the_loop": {
                          "runAfter": {
                            "Set_error_message_if_IOC_scan_status_response_has_error": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Limit",
                            "value": 0
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Get_scan_results": {
                            "runAfter": {
                              "Run_IOC_scan_until_the_operation_completes": [
                                "Succeeded"
                              ]
                            },
                            "type": "Http",
                            "inputs": {
                              "body": {
                                "query": "query ThreatHuntMalwareResultQuery($huntId: String!) {   threatHuntResult(huntId: $huntId) {     huntId     config {       name       indicatorsOfCompromise {         iocValue         iocKind         __typename       }       __typename     }     results {       object {         id         name         objectType         __typename       }       snapshotResults {         snapshotId         snapshotDate         status         lastJobId         matches {           indicatorIndex           paths {             requestedHashDetails {               hashValue               hashType               __typename             }             yaraMatchDetails {               name               tags               __typename             }             aclDetails             creationTime             modificationTime             path             __typename           }           __typename         }         quarantineDetails {           filesDetails {             fileName             __typename           }           __typename         }         scanStats {           numFiles           numFilesScanned           totalFilesScannedSizeBytes           __typename         }         __typename       }       __typename     }     __typename   } }",
                                "variables": {
                                  "huntId": "@{body('Parse_Start_IOC_scan_Response')?['data']?['startThreatHunt']?['huntId']}"
                                }
                              },
                              "headers": {
                                "Authorization": "Bearer @{variables('access_token')}",
                                "Content-Type": "application/json"
                              },
                              "method": "POST",
                              "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                            }
                          },
                          "Parse_rubrik-radar-ioc-scan-status": {
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('rubrik-radar-ioc-scan-status')",
                              "schema": {
                                "properties": {
                                  "data": {
                                    "properties": {
                                      "threatHuntResult": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "config": {
                                            "properties": {
                                              "__typename": {
                                                "type": "string"
                                              },
                                              "indicatorsOfCompromise": {
                                                "items": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "iocKind": {
                                                      "type": "string"
                                                    },
                                                    "iocValue": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "required": [
                                                    "iocValue",
                                                    "iocKind",
                                                    "__typename"
                                                  ],
                                                  "type": "object"
                                                },
                                                "type": "array"
                                              },
                                              "name": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "huntId": {
                                            "type": "string"
                                          },
                                          "results": {
                                            "items": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "object": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "objectType": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "snapshotResults": {
                                                  "items": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "lastJobId": {
                                                        "type": "string"
                                                      },
                                                      "matches": {
                                                        "type": "array"
                                                      },
                                                      "scanStats": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "numFiles": {
                                                            "type": "integer"
                                                          },
                                                          "numFilesScanned": {
                                                            "type": "integer"
                                                          },
                                                          "totalFilesScannedSizeBytes": {
                                                            "type": "integer"
                                                          }
                                                        },
                                                        "type": "object"
                                                      },
                                                      "snapshotDate": {
                                                        "type": "string"
                                                      },
                                                      "snapshotId": {
                                                        "type": "string"
                                                      },
                                                      "status": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "snapshotId",
                                                      "snapshotDate",
                                                      "status",
                                                      "lastJobId",
                                                      "matches",
                                                      "quarantineDetails",
                                                      "scanStats",
                                                      "__typename"
                                                    ],
                                                    "type": "object"
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "required": [
                                                "object",
                                                "snapshotResults",
                                                "__typename"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          },
                          "Run_IOC_scan_until_the_operation_completes": {
                            "actions": {
                              "Check_how_many_pending_IOC_scan": {
                                "foreach": "@body('Response_of_rubrik-radar-ioc-scan-results')?['data']?['threatHuntResult']?['results']",
                                "actions": {
                                  "For_each_4": {
                                    "foreach": "@items('Check_how_many_pending_IOC_scan')['snapshotResults']",
                                    "actions": {
                                      "Check_status_of_every_snapshot_Id": {
                                        "actions": {
                                          "Increment_pending_count": {
                                            "type": "IncrementVariable",
                                            "inputs": {
                                              "name": "PendingCount",
                                              "value": 1
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "contains": [
                                                "@items('For_each_4')?['status']",
                                                "PENDING"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "type": "Foreach"
                                  }
                                },
                                "runAfter": {
                                  "Set_pending_count": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Foreach"
                              },
                              "Check_pending_count_and_if_0_then_set_status_equals_finished": {
                                "actions": {
                                  "Set_finished_if_pending_count_is_0": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "RadarIOCScanStatus",
                                      "value": "FINISHED"
                                    }
                                  }
                                },
                                "runAfter": {
                                  "Check_how_many_pending_IOC_scan": [
                                    "Succeeded"
                                  ]
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@variables('PendingCount')",
                                        0
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Does_rubrik-radar-ioc-scan-results_get_status_code_200": {
                                "actions": {
                                  "Does_rubrik-radar-ioc-scan-results_API_response_contains_errors": {
                                    "actions": {
                                      "Set_Limit_to_0_to_exit_the_until_loop3": {
                                        "runAfter": {
                                          "Set_error_message_if_IOC_scan_result_response_contains_error": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "Limit",
                                          "value": 0
                                        }
                                      },
                                      "Set_error_message_if_IOC_scan_result_response_contains_error": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "@{body('rubrik-radar-ioc-scan-results')?['errors'][0]?['message']}"
                                        }
                                      }
                                    },
                                    "else": {
                                      "actions": {
                                        "Response_of_rubrik-radar-ioc-scan-results": {
                                          "type": "ParseJson",
                                          "inputs": {
                                            "content": "@body('rubrik-radar-ioc-scan-results')",
                                            "schema": {
                                              "properties": {
                                                "data": {
                                                  "properties": {
                                                    "threatHuntResult": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "config": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "indicatorsOfCompromise": {
                                                              "items": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "iocKind": {
                                                                    "type": "string"
                                                                  },
                                                                  "iocValue": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "required": [
                                                                  "iocValue",
                                                                  "iocKind",
                                                                  "__typename"
                                                                ],
                                                                "type": "object"
                                                              },
                                                              "type": "array"
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        },
                                                        "huntId": {
                                                          "type": "string"
                                                        },
                                                        "results": {
                                                          "items": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "object": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "id": {
                                                                    "type": "string"
                                                                  },
                                                                  "name": {
                                                                    "type": "string"
                                                                  },
                                                                  "objectType": {
                                                                    "type": "string"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              },
                                                              "snapshotResults": {
                                                                "items": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "lastJobId": {
                                                                      "type": "string"
                                                                    },
                                                                    "matches": {
                                                                      "type": "array"
                                                                    },
                                                                    "scanStats": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "numFiles": {
                                                                          "type": "integer"
                                                                        },
                                                                        "numFilesScanned": {
                                                                          "type": "integer"
                                                                        },
                                                                        "totalFilesScannedSizeBytes": {
                                                                          "type": "integer"
                                                                        }
                                                                      },
                                                                      "type": "object"
                                                                    },
                                                                    "snapshotDate": {
                                                                      "type": "string"
                                                                    },
                                                                    "snapshotId": {
                                                                      "type": "string"
                                                                    },
                                                                    "status": {
                                                                      "type": "string"
                                                                    }
                                                                  },
                                                                  "required": [
                                                                    "snapshotId",
                                                                    "snapshotDate",
                                                                    "status",
                                                                    "lastJobId",
                                                                    "matches",
                                                                    "quarantineDetails",
                                                                    "scanStats",
                                                                    "__typename"
                                                                  ],
                                                                  "type": "object"
                                                                },
                                                                "type": "array"
                                                              }
                                                            },
                                                            "required": [
                                                              "object",
                                                              "snapshotResults",
                                                              "__typename"
                                                            ],
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "contains": [
                                            "@body('rubrik-radar-ioc-scan-results')",
                                            "errors"
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "runAfter": {
                                  "rubrik-radar-ioc-scan-results": [
                                    "Succeeded"
                                  ]
                                },
                                "else": {
                                  "actions": {
                                    "Set_Limit_to_0_and_exit_the_until_loop_": {
                                      "runAfter": {
                                        "Set_variable_status_Code_to_pass_it_in_response": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "Limit",
                                        "value": 0
                                      }
                                    },
                                    "Set_error_on_failed_status_of_IOC_scan_result": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "ErrorMessage",
                                        "value": "Status:  @{outputs('rubrik-radar-ioc-scan-results')['statusCode']}, Message:  @{body('rubrik-radar-ioc-scan-results')?['message']}"
                                      }
                                    },
                                    "Set_variable_status_Code_to_pass_it_in_response": {
                                      "runAfter": {
                                        "Set_error_on_failed_status_of_IOC_scan_result": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "StatusCode",
                                        "value": "@outputs('rubrik-radar-ioc-scan-results')['statusCode']"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "equals": [
                                        "@outputs('rubrik-radar-ioc-scan-results')?['statusCode']",
                                        200
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              },
                              "Polling_interval": {
                                "runAfter": {
                                  "Check_pending_count_and_if_0_then_set_status_equals_finished": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Wait",
                                "inputs": {
                                  "interval": {
                                    "count": "@if(or(empty(string(triggerBody()?['PollingInterval'])),lessOrEquals(triggerBody()?['PollingInterval'],0)), 5, triggerBody()?['PollingInterval']) ",
                                    "unit": "Minute"
                                  }
                                }
                              },
                              "Set_pending_count": {
                                "runAfter": {
                                  "Does_rubrik-radar-ioc-scan-results_get_status_code_200": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "PendingCount",
                                  "value": 0
                                }
                              },
                              "rubrik-radar-ioc-scan-results": {
                                "type": "Http",
                                "inputs": {
                                  "body": {
                                    "query": "query ThreatHuntMalwareResultQuery($huntId: String!) {   threatHuntResult(huntId: $huntId) {     huntId     config {       name       indicatorsOfCompromise {         iocValue         iocKind         __typename       }       __typename     }     results {       object {         id         name         objectType         __typename       }       snapshotResults {         snapshotId         snapshotDate         status         lastJobId         matches {           indicatorIndex           paths {             requestedHashDetails {               hashValue               hashType               __typename             }             yaraMatchDetails {               name               tags               __typename             }             aclDetails             creationTime             modificationTime             path             __typename           }           __typename         }         quarantineDetails {           filesDetails {             fileName             __typename           }           __typename         }         scanStats {           numFiles           numFilesScanned           totalFilesScannedSizeBytes           __typename         }         __typename       }       __typename     }     __typename   } }",
                                    "variables": {
                                      "huntId": "@{body('Parse_Start_IOC_scan_Response')?['data']?['startThreatHunt']?['huntId']}"
                                    }
                                  },
                                  "headers": {
                                    "Authorization": "Bearer @{variables('access_token')}",
                                    "Content-Type": "application/json"
                                  },
                                  "method": "POST",
                                  "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                }
                              }
                            },
                            "runAfter": {
                              "Set_IOC_scan_status_": [
                                "Succeeded"
                              ]
                            },
                            "expression": "@contains(variables('RadarIOCScanStatus'), 'FINISHED')",
                            "limit": {
                              "timeout": "@{if(empty(string(triggerBody()?['PollingTimeout'])), 'PT720M', concat('PT',string(triggerBody()?['PollingTimeout']),'M'))}"
                            },
                            "type": "Until"
                          },
                          "Set_IOC_scan_status_": {
                            "runAfter": {
                              "Parse_rubrik-radar-ioc-scan-status": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "RadarIOCScanStatus",
                              "value": "@{body('Parse_rubrik-radar-ioc-scan-status')?['data']?['threatHuntResult']?['results'][0]?['snapshotResults'][0]?['status']}"
                            }
                          },
                          "rubrik-radar-ioc-scan-result_get_status_code_200": {
                            "actions": {
                              "Does_rubrik-radar-ioc-scan-result_API_response_contains_errors": {
                                "actions": {
                                  "Set_error_message_if_IOC_scan_result_response_has_error": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "ErrorMessage",
                                      "value": "@{body('Get_scan_results')?['errors'][0]?['message']}"
                                    }
                                  },
                                  "Set_limit_variable_to_0": {
                                    "runAfter": {
                                      "Set_error_message_if_IOC_scan_result_response_has_error": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "Limit",
                                      "value": 0
                                    }
                                  }
                                },
                                "else": {
                                  "actions": {
                                    "Get_status_of_scan_result_-_Last_Array_Element": {
                                      "foreach": "@body('Parse_Get_scan_results_response')?['data']?['threatHuntResult']?['results']",
                                      "actions": {
                                        "For_each_2": {
                                          "foreach": "@items('Get_status_of_scan_result_-_Last_Array_Element')?['snapshotResults']",
                                          "actions": {
                                            "Set_status": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "RadarIOCScanStatus",
                                                "value": "@items('For_each_2')?['status']"
                                              }
                                            }
                                          },
                                          "type": "Foreach"
                                        }
                                      },
                                      "runAfter": {
                                        "Parse_Get_scan_results_response": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Foreach"
                                    },
                                    "Parse_Get_scan_results_response": {
                                      "runAfter": {
                                        "Set_IOC_scan_result": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "ParseJson",
                                      "inputs": {
                                        "content": "@body('Get_scan_results')",
                                        "schema": {
                                          "properties": {
                                            "data": {
                                              "properties": {
                                                "threatHuntResult": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "config": {
                                                      "properties": {
                                                        "__typename": {
                                                          "type": "string"
                                                        },
                                                        "indicatorsOfCompromise": {
                                                          "items": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "iocKind": {
                                                                "type": "string"
                                                              },
                                                              "iocValue": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "required": [
                                                              "iocValue",
                                                              "iocKind",
                                                              "__typename"
                                                            ],
                                                            "type": "object"
                                                          },
                                                          "type": "array"
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "type": "object"
                                                    },
                                                    "huntId": {
                                                      "type": "string"
                                                    },
                                                    "results": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "object": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "id": {
                                                                "type": "string"
                                                              },
                                                              "name": {
                                                                "type": "string"
                                                              },
                                                              "objectType": {
                                                                "type": "string"
                                                              }
                                                            },
                                                            "type": "object"
                                                          },
                                                          "snapshotResults": {
                                                            "items": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "lastJobId": {
                                                                  "type": "string"
                                                                },
                                                                "matches": {
                                                                  "type": "array"
                                                                },
                                                                "scanStats": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "numFiles": {
                                                                      "type": "integer"
                                                                    },
                                                                    "numFilesScanned": {
                                                                      "type": "integer"
                                                                    },
                                                                    "totalFilesScannedSizeBytes": {
                                                                      "type": "integer"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                },
                                                                "snapshotDate": {
                                                                  "type": "string"
                                                                },
                                                                "snapshotId": {
                                                                  "type": "string"
                                                                },
                                                                "status": {
                                                                  "type": "string"
                                                                }
                                                              },
                                                              "required": [
                                                                "snapshotId",
                                                                "snapshotDate",
                                                                "status",
                                                                "lastJobId",
                                                                "matches",
                                                                "quarantineDetails",
                                                                "scanStats",
                                                                "__typename"
                                                              ],
                                                              "type": "object"
                                                            },
                                                            "type": "array"
                                                          }
                                                        },
                                                        "required": [
                                                          "object",
                                                          "snapshotResults",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              },
                                              "type": "object"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      }
                                    },
                                    "Set_IOC_scan_result": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "IOCScanResult",
                                        "value": "@body('Get_scan_results')"
                                      }
                                    }
                                  }
                                },
                                "expression": {
                                  "and": [
                                    {
                                      "contains": [
                                        "@body('Get_scan_results')",
                                        "errors"
                                      ]
                                    }
                                  ]
                                },
                                "type": "If"
                              }
                            },
                            "runAfter": {
                              "Get_scan_results": [
                                "Succeeded",
                                "Failed"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Set_Status_Code_to_pass_in_the_response_at_the_end": {
                                  "runAfter": {
                                    "Set_error_message_on_failed_status_of_IOC_scan_result_": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "StatusCode",
                                    "value": "@outputs('Get_scan_results')['statusCode']"
                                  }
                                },
                                "Set_error_message_on_failed_status_of_IOC_scan_result_": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "ErrorMessage",
                                    "value": "StatusCode:  @{outputs('Get_scan_results')['statusCode']}, message: @{body('Get_scan_results')?['message']}"
                                  }
                                },
                                "Set_limit_to_0_": {
                                  "runAfter": {
                                    "Set_Status_Code_to_pass_in_the_response_at_the_end": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Limit",
                                    "value": 0
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@outputs('Get_scan_results')?['statusCode']",
                                    200
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('rubrik-radar-ioc-scan-status')",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {
                    "rubrik-radar-ioc-scan-status": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Set_Error_Message_on_failed_status_of_IOC_scan_status": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "Status Code: @{outputs('rubrik-radar-ioc-scan-status')?['statusCode']},  Message: \"@{body('rubrik-radar-ioc-scan-status')?['message']}\""
                        }
                      },
                      "Set_Limit_to_0": {
                        "runAfter": {
                          "Set_variable_status_code_for_response_at_the_end": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "Limit",
                          "value": 0
                        }
                      },
                      "Set_variable_status_code_for_response_at_the_end": {
                        "runAfter": {
                          "Set_Error_Message_on_failed_status_of_IOC_scan_status": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "StatusCode",
                          "value": "@outputs('rubrik-radar-ioc-scan-status')['statusCode']"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('rubrik-radar-ioc-scan-status')?['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Is_scan_successfull": {
                  "actions": {
                    "Are_recoverable_snapshot_ID(s)_obtained_-_if_yes_set_the_recoverable_snapshot": {
                      "foreach": "@body('Parse_Get_scan_results_response')?['data']?['threatHuntResult']?['results']",
                      "actions": {
                        "For_each_5": {
                          "foreach": "@items('Are_recoverable_snapshot_ID(s)_obtained_-_if_yes_set_the_recoverable_snapshot')?['snapshotResults']",
                          "actions": {
                            "Set_Last_field_date": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "LastFieldDate",
                                "value": "@{div(sub(ticks(variables('CurrentFieldDate')),ticks('1970-01-01Z00:00:00')),10000000) }"
                              }
                            },
                            "check_for_latest_snapshot_ID": {
                              "actions": {
                                "set_recoverable_snapshot_ID": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "RecoverableSnapshotId",
                                    "value": "@items('For_each_5')?['snapshotId']"
                                  }
                                }
                              },
                              "runAfter": {
                                "check_matches_is_empty_or_not": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "greater": [
                                      "@variables('CurrentFieldDate')",
                                      "@variables('LastFieldDate')"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "check_matches_is_empty_or_not": {
                              "actions": {
                                "Append_snapshot_Id": {
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "RecoverableSnapshots",
                                    "value": "@items('For_each_5')?['snapshotId']"
                                  }
                                },
                                "Set_current_field_date": {
                                  "runAfter": {
                                    "Append_snapshot_Id": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "CurrentFieldDate",
                                    "value": "    @{div(sub(ticks(items('For_each_5')?['snapshotDate']),ticks('1970-01-01Z00:00:00')),10000000) }"
                                  }
                                }
                              },
                              "runAfter": {
                                "Set_Last_field_date": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@items('For_each_5')?['matches']",
                                      "@null"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "type": "Foreach"
                        }
                      },
                      "type": "Foreach"
                    },
                    "Are_there_any_recoverable_snapshots": {
                      "runAfter": {
                        "Is_this_the_first_playbook_run": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Convert_end_date_to_epochs": {
                            "runAfter": {
                              "Convert_start_date_to_epochs": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "EpochEndDate",
                              "value": "@{div(sub(ticks(variables('EndDate')),ticks('1970-01-01Z00:00:00')),10000000)}"
                            }
                          },
                          "Convert_start_date_to_epochs": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "EpochStartDate",
                              "value": "@{div(sub(ticks(variables('StartDate')),ticks('1970-01-01Z00:00:00')),10000000)}"
                            }
                          },
                          "Is_time_delta_available": {
                            "actions": {
                              "Update_the_start_date_using_time_delta": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "StartDate",
                                  "value": "@{sub(variables('EpochStartDate'),int(triggerBody()?['TimeDelta']))}"
                                }
                              }
                            },
                            "runAfter": {
                              "Convert_end_date_to_epochs": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "Update_the_start_date": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "StartDate",
                                    "value": " @{sub(mul(int(variables('EpochStartDate')), 2), int(variables('EpochEndDate')))}"
                                  }
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "not": {
                                    "equals": [
                                      "6",
                                      "@null"
                                    ]
                                  }
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Update_the_end_date": {
                            "runAfter": {
                              "Convert_end_date_to_epochs": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "EndDate",
                              "value": "@{addToTime('1970-01-01T00:00:00Z', int(variables('EpochStartDate')), 'second')}"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@variables('RecoverableSnapshots')",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Decrease_limit": {
                      "runAfter": {
                        "Are_there_any_recoverable_snapshots": [
                          "Succeeded"
                        ]
                      },
                      "type": "DecrementVariable",
                      "inputs": {
                        "name": "Limit",
                        "value": 1
                      }
                    },
                    "Is_this_the_first_playbook_run": {
                      "actions": {
                        "Until_isLatestInfected_variable_set": {
                          "actions": {
                            "Is_the_latest_snapshot_infected": {
                              "foreach": "@body('Parse_Get_scan_results_response')?['data']?['threatHuntResult']?['results']",
                              "actions": {
                                "For_each": {
                                  "foreach": "@items('Is_the_latest_snapshot_infected')?['snapshotResults']",
                                  "actions": {
                                    "Condition": {
                                      "actions": {
                                        "Set_isLatestInfected_to_true": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "isLatestInfected",
                                            "value": "@true"
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_isLatestInfected_to_false": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "isLatestInfected",
                                              "value": "@false"
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@items('For_each')?['matches']",
                                              "@null"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "type": "Foreach"
                                }
                              },
                              "type": "Foreach"
                            }
                          },
                          "expression": "@equals(variables('isLatestInfected'), null)",
                          "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                          },
                          "type": "Until"
                        }
                      },
                      "runAfter": {
                        "Are_recoverable_snapshot_ID(s)_obtained_-_if_yes_set_the_recoverable_snapshot": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('InputLimit')",
                              "@variables('Limit')"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {
                    "Does_rubrik-radar-ioc-scan-status_get_status_code_200": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Check_error_message_is_empty_or_not": {
                        "actions": {
                          "Set_variable_15": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ErrorMessage",
                              "value": "IOC Scan is not successfuly finished."
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "equals": [
                                "@empty(variables('ErrorMessage'))",
                                "@true"
                              ]
                            }
                          ]
                        },
                        "type": "If"
                      },
                      "Set_limit_to_zero": {
                        "runAfter": {
                          "Check_error_message_is_empty_or_not": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "Limit",
                          "value": 0
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@variables('RadarIOCScanStatus')",
                          "FINISHED"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "Start_IOC_scan": {
                  "runAfter": {
                    "prepared_advance_IOC_": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "body": {
                      "query": "mutation StartThreatHuntMutation($input: StartThreatHuntInput!) {     startThreatHunt(input: $input) {       huntId       isSyncSuccessful     }   }",
                      "variables": {
                        "input": {
                          "clusterUuid": "@{triggerBody()?['ClusterId']}",
                          "fileScanCriteria": {
                            "fileSizeLimits": {
                              "maximumSizeInBytes": 5000000000
                            },
                            "pathFilter": {
                              "includes": [
                                "**"
                              ]
                            }
                          },
                          "indicatorsOfCompromise": "@variables('IOCAdvance')",
                          "maxMatchesPerSnapshot": 100,
                          "name": "DemoRecovery",
                          "objectFids": "@variables('ObjectId')",
                          "snapshotScanLimit": {
                            "endTime": "@{variables('EndDate')}",
                            "maxSnapshotsPerObject": 10,
                            "startTime": "@{variables('StartDate')}"
                          }
                        }
                      }
                    },
                    "headers": {
                      "Authorization": "Bearer @{variables('access_token')}",
                      "Content-Type": "application/json"
                    },
                    "method": "POST",
                    "path": "/api/graphql",
                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                  }
                },
                "prepared_advance_IOC_": {
                  "actions": {
                    "Set_IOC_Hash_PATH_and_YARA_rule_to_IOC_advance": {
                      "type": "Compose",
                      "inputs": [
                        {
                          "iocKind": "IOC_FILE_PATTERN",
                          "iocValue": "@{triggerBody()?['IOCPath']}"
                        },
                        {
                          "iocKind": "IOC_YARA",
                          "iocValue": "@{triggerBody()?['IOCYaraRule']}"
                        },
                        {
                          "iocKind": "IOC_HASH",
                          "iocValue": "@{triggerBody()?['IOCHash']}"
                        }
                      ]
                    },
                    "Set_variable_IOC_Advance": {
                      "runAfter": {
                        "Set_IOC_Hash_PATH_and_YARA_rule_to_IOC_advance": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "IOCAdvance",
                        "value": "@outputs('Set_IOC_Hash_PATH_and_YARA_rule_to_IOC_advance')"
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Set_IOC_Advance": {
                        "runAfter": {
                          "Set_IOC_PATH_and_YARA_rule_to_IOC_advance": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "IOCAdvance",
                          "value": "@outputs('Set_IOC_PATH_and_YARA_rule_to_IOC_advance')"
                        }
                      },
                      "Set_IOC_PATH_and_YARA_rule_to_IOC_advance": {
                        "type": "Compose",
                        "inputs": [
                          {
                            "iocKind": "IOC_FILE_PATTERN",
                            "iocValue": "@{triggerBody()?['IOCPath']}"
                          },
                          {
                            "iocKind": "IOC_YARA",
                            "iocValue": "@{triggerBody()?['IOCYaraRule']}"
                          }
                        ]
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@empty(triggerBody()?['IOCHash'])",
                          "@false"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "rubrik-radar-ioc-scan-status": {
                  "runAfter": {
                    "Does_Start_IOC_scan_get_status_code_200": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "body": {
                      "query": "query ThreatHuntMalwareResultQuery($huntId: String!) {   threatHuntResult(huntId: $huntId) {     huntId     config {       name       indicatorsOfCompromise {         iocValue         iocKind         __typename       }       __typename     }     results {       object {         id         name         objectType         __typename       }       snapshotResults {         snapshotId         snapshotDate         status         lastJobId         matches {           indicatorIndex           paths {             requestedHashDetails {               hashValue               hashType               __typename             }             yaraMatchDetails {               name               tags               __typename             }             aclDetails             creationTime             modificationTime             path             __typename           }           __typename         }         quarantineDetails {           filesDetails {             fileName             __typename           }           __typename         }         scanStats {           numFiles           numFilesScanned           totalFilesScannedSizeBytes           __typename         }         __typename       }       __typename     }     __typename   } }",
                      "variables": {
                        "huntId": "@{body('Parse_Start_IOC_scan_Response')?['data']?['startThreatHunt']?['huntId']}"
                      }
                    },
                    "headers": {
                      "Authorization": "Bearer @{variables('access_token')}",
                      "Content-Type": "application/json"
                    },
                    "method": "POST",
                    "path": "/api/graphql",
                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                  }
                }
              },
              "runAfter": {
                "Initialize_Polling_Timeout": [
                  "Succeeded"
                ]
              },
              "expression": "@greaterOrEquals(variables('Limit'), 0)",
              "limit": {
                "timeout": "PT900M"
              },
              "type": "Until"
            },
            "Set_access_token": {
              "runAfter": {
                "Is_Authentication_Failed": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable",
              "inputs": {
                "name": "access_token",
                "value": "@{body('Authentication')?['access_token']}"
              }
            },
            "Set_end_date_if_not_provided": {
              "actions": {
                "set_default_value_of__end_date": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "EndDate",
                    "value": "@{utcNow()}"
                  }
                }
              },
              "runAfter": {
                "Initialize_Pending_count_for_IOC_scan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@triggerBody()?['EndDate']",
                      "@null"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Set_limit_if_not_provided": {
              "actions": {
                "set_default_value_of__limit_date": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "InputLimit",
                    "value": 1
                  }
                }
              },
              "runAfter": {
                "Initialize_Pending_count_for_IOC_scan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@variables('InputLimit')",
                      "@null"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Set_start_date_if_not_provided": {
              "actions": {
                "Get_7_days_ago_time": {
                  "type": "Expression",
                  "kind": "GetPastTime",
                  "inputs": {
                    "interval": 7,
                    "timeUnit": "Day"
                  }
                },
                "set_default_value_of__start_date": {
                  "runAfter": {
                    "Get_7_days_ago_time": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "StartDate",
                    "value": "@body('Get_7_days_ago_time')"
                  }
                }
              },
              "runAfter": {
                "Initialize_Pending_count_for_IOC_scan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@triggerBody()?['StartDate']",
                      "@null"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "initialization_RadarIOCScanStatus": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RadarIOCScanStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "initialize_epoch_value_of_end_date": {
              "runAfter": {
                "initialize_epoch_value_of_start_date": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "EpochEndDate",
                    "type": "string"
                  }
                ]
              }
            },
            "initialize_epoch_value_of_start_date": {
              "runAfter": {
                "Initialize_LastFieldDate_to_compare_snapshot_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "EpochStartDate",
                    "type": "string"
                  }
                ]
              }
            },
            "save_ioc_scan_result_body_here": {
              "runAfter": {
                "Set_access_token": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IOCScanResult",
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "RubrikCustomConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook6-RubrikcustomconnectorConnectionName'))]",
                "connectionName": "[variables('playbook6-RubrikcustomconnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/customApis/Rubrikcustomconnector')]"
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook6-KeyvaultConnectionName'))]",
                "connectionName": "[variables('playbook6-KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook6-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikIOCScan",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook6-RubrikcustomconnectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook6-KeyvaultConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook6-RubrikcustomconnectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook6-RubrikcustomconnectorConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook6-KeyvaultConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook6-KeyvaultConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ClusterId": {
                      "type": "string"
                    },
                    "PollingInterval": {
                      "type": "integer"
                    },
                    "PollingTimeout": {
                      "type": "integer"
                    },
                    "RequestId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Are_the_required_inputs_not_provided": {
              "actions": {
                "Invalid_input_response": {
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": {
                      "error": "Error: Required inputs are not provided"
                    },
                    "statusCode": 400
                  }
                },
                "Terminate": {
                  "runAfter": {
                    "Invalid_input_response": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "400",
                      "message": "Error: Required inputs are not provided"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Initialize_variable": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@empty(triggerBody()?['ClusterId'])",
                      "@true"
                    ]
                  },
                  {
                    "equals": [
                      "@empty(triggerBody()?['RequestId'])",
                      "@true"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Authentication": {
              "runAfter": {
                "Get_ClientSecret": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "client_id": "@body('Get_ClientId')?['value']",
                  "client_secret": "@body('Get_ClientSecret')?['value']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/client_token"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Does_Get_async_results_get_status_code_200": {
              "actions": {
                "Does_Get_async_result_API_response_contain_errors_": {
                  "actions": {
                    "Error_Response_": {
                      "runAfter": {
                        "Set_Get_async_result_API_error_response": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "error": "@{variables('APIStatus')}"
                        },
                        "statusCode": 400
                      }
                    },
                    "Set_Get_async_result_API_error_response": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "APIStatus",
                        "value": "Error:@{body('Get_Async_Results')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Parse_JSON_of_Get_async_results": {
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('Get_Async_Results')",
                          "schema": {
                            "properties": {
                              "data": {
                                "properties": {
                                  "vSphereVMAsyncRequestStatus": {
                                    "properties": {
                                      "__typename": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "links": {
                                        "items": {
                                          "properties": {
                                            "href": {
                                              "type": "string"
                                            },
                                            "rel": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "href",
                                            "rel"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "status": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        }
                      },
                      "Success_Response": {
                        "runAfter": {
                          "Parse_JSON_of_Get_async_results": [
                            "Succeeded"
                          ]
                        },
                        "type": "Response",
                        "kind": "Http",
                        "inputs": {
                          "body": "@body('Parse_JSON_of_Get_async_results')?['data']?['vSphereVMAsyncRequestStatus']",
                          "statusCode": 200
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('Get_Async_Results')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Get_Async_Results": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Response": {
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": {
                        "error": "Error:@{body('Get_Async_Results')?['message']}"
                      },
                      "statusCode": "@outputs('Get_Async_Results')['statusCode']"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('Get_Async_Results')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Generic_Polling": {
              "actions": {
                "Does_GPS_Async_Result_get_status_code_200": {
                  "actions": {
                    "Does_GPS_Async_Result_response_contains_errors": {
                      "actions": {
                        "Set_ERROR_status_for_async_result": {
                          "runAfter": {
                            "Set_GPS_Async_Result_API_error_status": [
                              "Succeeded"
                            ]
                          },
                          "type": "SetVariable",
                          "inputs": {
                            "name": "AsyncResultStatus",
                            "value": "ERROR"
                          }
                        },
                        "Set_GPS_Async_Result_API_error_status": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "APIStatus",
                            "value": "@{body('GPS_Async_Result')?['errors'][0]?['message']}"
                          }
                        }
                      },
                      "else": {
                        "actions": {
                          "Parse_JSON_of_GPS_Async_Result": {
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('GPS_Async_Result')",
                              "schema": {
                                "properties": {
                                  "data": {
                                    "properties": {
                                      "vSphereVMAsyncRequestStatus": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "links": {
                                            "items": {
                                              "properties": {
                                                "href": {
                                                  "type": "string"
                                                },
                                                "rel": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "href",
                                                "rel"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "status": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          },
                          "Polling_Interval": {
                            "runAfter": {
                              "Update_Async_Result_Status": [
                                "Succeeded"
                              ]
                            },
                            "type": "Wait",
                            "inputs": {
                              "interval": {
                                "count": "@if(or(empty(string(triggerBody()?['PollingInterval'])),lessOrEquals(triggerBody()?['PollingInterval'],0)), 5, triggerBody()?['PollingInterval']) ",
                                "unit": "Minute"
                              }
                            }
                          },
                          "Update_Async_Result_Status": {
                            "runAfter": {
                              "Parse_JSON_of_GPS_Async_Result": [
                                "Succeeded"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "AsyncResultStatus",
                              "value": "@body('Parse_JSON_of_GPS_Async_Result')?['data']?['vSphereVMAsyncRequestStatus']?['status']"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "contains": [
                              "@body('GPS_Async_Result')",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "runAfter": {
                    "GPS_Async_Result": [
                      "Succeeded",
                      "Failed"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Set_Async_result_status_as_ERROR": {
                        "runAfter": {
                          "Set_Error_message_with_status_code": [
                            "Succeeded"
                          ]
                        },
                        "type": "SetVariable",
                        "inputs": {
                          "name": "AsyncResultStatus",
                          "value": "ERROR"
                        }
                      },
                      "Set_Error_message_with_status_code": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "APIStatus",
                          "value": "StatusCode:@{outputs('GPS_Async_Result')['statusCode']} Error:@{body('GPS_Async_Result')?['message']}"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('GPS_Async_Result')['statusCode']",
                          200
                        ]
                      }
                    ]
                  },
                  "type": "If"
                },
                "GPS_Async_Result": {
                  "type": "Http",
                  "inputs": {
                    "body": {
                      "query": "query VSphereVMAsyncRequestStatus($clusterUuid: UUID!, $vSphereVmAsyncRequestStatusId: String!) {   vSphereVMAsyncRequestStatus(clusterUuid: $clusterUuid, id: $vSphereVmAsyncRequestStatusId) {     id     status     links {       href       rel     }     error {       message     }   } } ",
                      "variables": {
                        "clusterUuid": "@{triggerBody()?['ClusterId']}",
                        "vSphereVmAsyncRequestStatusId": "@{triggerBody()?['RequestId']}"
                      }
                    },
                    "headers": {
                      "Authorization": "Bearer @{variables('access_token')}",
                      "Content-Type": "application/json"
                    },
                    "method": "POST",
                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                  }
                }
              },
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "expression": "@not(equals(variables('AsyncResultStatus'), or(equals(variables('AsyncResultStatus'), 'QUEUED'), or(equals(variables('AsyncResultStatus'), 'RUNNING'), equals(variables('AsyncResultStatus'), 'ACQUIRING')))))",
              "limit": {
                "timeout": "@{if(contains(triggerBody(),'PollingTimeout'),concat('PT',triggerBody()['PollingTimeout'],'M'),'PT720M')}"
              },
              "type": "Until"
            },
            "Get_Async_Results": {
              "runAfter": {
                "Generic_Polling": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query VSphereVMAsyncRequestStatus($clusterUuid: UUID!, $vSphereVmAsyncRequestStatusId: String!) {   vSphereVMAsyncRequestStatus(clusterUuid: $clusterUuid, id: $vSphereVmAsyncRequestStatusId) {     id     status     links {       href       rel     }     error {       message     }   } } ",
                  "variables": {
                    "clusterUuid": "@{triggerBody()?['ClusterId']}",
                    "vSphereVmAsyncRequestStatusId": "@{triggerBody()?['RequestId']}"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Get_ClientId": {
              "runAfter": {
                "Are_the_required_inputs_not_provided": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "outputs"
                  ]
                }
              }
            },
            "Get_ClientSecret": {
              "runAfter": {
                "Get_ClientId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs"
                  ]
                }
              }
            },
            "Initialize_API_response_status": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "APIStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_AsyncResultStatus": {
              "runAfter": {
                "Initialize_API_response_status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AsyncResultStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Polling_Interval": {
              "runAfter": {
                "Initialize_AsyncResultStatus": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PollingInterval",
                    "type": "integer"
                  }
                ]
              }
            },
            "Initialize_access_token": {
              "runAfter": {
                "Is_Authentication_Failed": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "access_token",
                    "type": "string",
                    "value": "@{body('Authentication')?['access_token']}"
                  }
                ]
              }
            },
            "Initialize_variable": {
              "runAfter": {
                "Initialize_Polling_Interval": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "limit",
                    "type": "integer",
                    "value": 1
                  }
                ]
              }
            },
            "Is_Authentication_Failed": {
              "actions": {
                "Response_2": {
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": {
                      "error": "@{body('Authentication')?['message']}"
                    },
                    "statusCode": "@outputs('Authentication')['statusCode']"
                  }
                },
                "Terminate_2": {
                  "runAfter": {
                    "Response_2": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Authentication')['statusCode']}",
                      "message": "@{body('Authentication')?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Authentication": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Authentication')['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Response_3": {
              "runAfter": {
                "Does_Get_async_results_get_status_code_200": [
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "error": "@variables('APIStatus')"
                },
                "statusCode": 400
              }
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "RubrikCustomConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook7-RubrikcustomconnectorConnectionName'))]",
                "connectionName": "[variables('playbook7-RubrikcustomconnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/customApis/Rubrikcustomconnector')]"
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook7-KeyvaultConnectionName'))]",
                "connectionName": "[variables('playbook7-KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook7-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikPollAsyncResult",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook7-RubrikcustomconnectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook7-KeyvaultConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook7-RubrikcustomconnectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook7-RubrikcustomconnectorConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook7-KeyvaultConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook7-KeyvaultConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Disabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ClusterId": {
                      "type": "string"
                    },
                    "ObjectId": {
                      "type": "string"
                    },
                    "ObjectType": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Authentication": {
              "runAfter": {
                "Get_ClientSecret": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "client_id": "@body('Get_ClientId')?['value']",
                  "client_secret": "@body('Get_ClientSecret')?['value']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/client_token"
              }
            },
            "Check_if_Polling_Timeout_is_less_than_or_equals_to_0": {
              "actions": {
                "Set_default_value_for_polling_timeout": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "PollingTimeout",
                    "value": 720
                  }
                }
              },
              "runAfter": {
                "Initialize_Polling_Timeout_for_IOC_Scan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "lessOrEquals": [
                      "@variables('PollingTimeout')",
                      0
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Check_that_IOC_scan_has_no_error": {
              "runAfter": {
                "RubrikIOCScan": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "IOC_Scan_Error_Response_": {
                    "runAfter": {
                      "Set_Error_message_from_IOC_scan_response": [
                        "Succeeded"
                      ]
                    },
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": "@variables('IOCScanResultStatus')",
                      "statusCode": 400
                    }
                  },
                  "Set_Error_message_from_IOC_scan_response": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "IOCScanResultStatus",
                      "value": "Status Error  in IOC scan: @{body('RubrikIOCScan')?['errors']}"
                    }
                  },
                  "Terminate": {
                    "runAfter": {
                      "IOC_Scan_Error_Response_": [
                        "Succeeded"
                      ]
                    },
                    "type": "Terminate",
                    "inputs": {
                      "runError": {
                        "message": "Error: @{variables('IOCScanResultStatus')}"
                      },
                      "runStatus": "Failed"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@empty(body('RubrikIOCScan')?['error'])",
                      "@true"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Collect_IOC_Scan_Data": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "body": {
                    "messageBody": "{     \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",     \"type\": \"AdaptiveCard\",     \"version\": \"1.3\",     \"body\": [         {             \"type\": \"TextBlock\",             \"size\": \"Large\",             \"weight\": \"Bolder\",             \"text\": \"IOC Scan Data\",             \"horizontalAlignment\": \"Center\",             \"style\": \"heading\",             \"color\": \"Accent\",             \"fontType\": \"Default\",             \"wrap\": true,             \"id\": \"heading\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Input arguments required to initiate IOC Scan(s) and option to recover file(s) of recoverable snapshot.\",             \"wrap\": true,             \"color\": \"Light\",             \"style\": \"default\",             \"separator\": true,             \"id\": \"info\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC hash to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip1\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC hash \"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC path to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip2\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC path \"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC Yara rule to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip3\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC Yara rule\",             \"isMultiline\": true         },         {             \"type\": \"TextBlock\",             \"text\": \"Start date to initiate the IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip4\"         },         {             \"type\": \"Input.Date\",             \"id\": \"Start date \"         },         {             \"type\": \"TextBlock\",             \"text\": \"End date to initiate the IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip5\"         },         {             \"type\": \"Input.Date\",             \"id\": \"End date \"         },         {             \"type\": \"TextBlock\",             \"text\": \"Time Delta to update the date range of IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip6\"         },         {             \"type\": \"Input.Number\",             \"id\": \"Time Delta \"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling interval for IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip7\"         },         {             \"type\": \"Input.Number\",             \"id\": \"Polling interval \",             \"placeholder\": \"5\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling timeout for IOC Scan\\n\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip8\"         },         {             \"type\": \"Input.Number\",             \"label\": \"In minutes\",             \"id\": \"Polling timeout \",             \"placeholder\": \"720\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Limit to loop the IOC scan sub-playbook\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip9\"         },         {             \"type\": \"Input.Number\",             \"id\": \"Limit to loop the IOC scan sub-playbook\",             \"placeholder\": \"1\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC Yara rule file URL to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip10\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC Yara rule file URL \",             \"isMultiline\": true         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to include in the IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip11\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to include \"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to exclude in the IOC Scan\",             \"wrap\": true,             \"separator\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip12\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to exclude\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to exempt in the IOC Scan\\n\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip13\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to exempt\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Perform recovery\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip14\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"Yes\",                     \"value\": \"Yes\"                 },                 {                     \"title\": \"No\",                     \"value\": \"No\"                 }             ],             \"id\": \"Perform recovery\",             \"isRequired\": true,             \"errorMessage\": \"Please select Performance recovery\",             \"value\": \"Yes\",             \"style\": \"expanded\",             \"label\": \"required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Requested Hash Type\",             \"wrap\": true,             \"separator\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip15\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"HASH_TYPE_M_D5\",                     \"value\": \"HASH_TYPE_M_D5\"                 },                 {                     \"title\": \"HASH_TYPE_SH_A256\",                     \"value\": \"HASH_TYPE_SH_A256\"                 }             ],             \"value\": \"HASH_TYPE_M_D5\",             \"id\": \"Requested Hash Type\",             \"style\": \"expanded\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Scan Name\",             \"wrap\": true,             \"separator\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip16\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Scan Name\"         }     ],     \"actions\": [         {             \"type\": \"Action.Submit\",             \"title\": \"Submit Answer\",             \"data\": {                 \"id\": \"LoginVal\"             },             \"style\": \"positive\",             \"id\": \"Submit\"         }     ] } ",
                    "recipient": {
                      "channelId": "19:bnaBaHVOHCBYW6MgUqrQK9R7mnkjvb9j7F1T9TaTct41@thread.tacv2",
                      "groupId": "33066078-fe8e-4fad-80a5-9b6728e915a4"
                    },
                    "updateMessage": "Thanks for your response!"
                  },
                  "notificationUrl": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
              }
            },
            "Create_Snapshot_for_evidence": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "mutation TakeVSphereSnapshotMutation($snappableId: UUID!, $slaID: String) {     vsphereOnDemandSnapshot(snappableFid: $snappableId, slaID: $slaID) {       id       status     }   }",
                  "variables": {
                    "snappableId": "@{variables('ObjectId')}"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Does_Create_Snapshot_get_status_code_200": {
              "actions": {
                "Does_Create_Snapshot_API_response_contains_errors": {
                  "actions": {
                    "Set_response_error_message_as_Create_Snapshot_status": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "CreateSnapshotStatus",
                        "value": "Error: @{body('Create_Snapshot_for_evidence')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Is_Snapshot_creation_started": {
                        "actions": {
                          "Is_the_snapshot_created_successfully": {
                            "runAfter": {
                              "Parse_JSON_of_PollAsyncResult": [
                                "Succeeded"
                              ]
                            },
                            "cases": {
                              "Case_RUNNING": {
                                "case": "RUNNING",
                                "actions": {
                                  "Set_timeout_message_in_status": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CreateSnapshotStatus",
                                      "value": "Wait for evidence snapshot creation results timed out. Please see incident context for further details."
                                    }
                                  }
                                }
                              },
                              "Case_SUCCESS": {
                                "case": "SUCCEEDED",
                                "actions": {
                                  "Set_success_message_in_status": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "CreateSnapshotStatus",
                                      "value": "Evidence snapshot has been created for the VM object."
                                    }
                                  }
                                }
                              }
                            },
                            "default": {
                              "actions": {
                                "Set_error_message": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "CreateSnapshotStatus",
                                    "value": "Evidence snapshot was not created. "
                                  }
                                }
                              }
                            },
                            "expression": "@if(or(or(equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'QUEUED'),equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'RUNNING')),equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'ACQUIRING')),'RUNNING',if(equals(body('Parse_JSON_of_PollAsyncResult')?['status'],'SUCCEEDED'),'SUCCEEDED','Default'))",
                            "type": "Switch"
                          },
                          "Parse_JSON_of_PollAsyncResult": {
                            "runAfter": {
                              "RubrikPollAsyncResult": [
                                "Succeeded"
                              ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('RubrikPollAsyncResult')",
                              "schema": {
                                "properties": {
                                  "__typename": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "links": {
                                    "items": {
                                      "properties": {
                                        "href": {
                                          "type": "string"
                                        },
                                        "rel": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "href",
                                        "rel"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "status": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          },
                          "RubrikPollAsyncResult": {
                            "type": "Workflow",
                            "inputs": {
                              "body": {
                                "BaseUrl": "@triggerBody()?['BaseUrl']",
                                "ClusterId": "@variables('ClusterId')",
                                "PollingInterval": 5,
                                "PollingTimeout": 720,
                                "RequestId": "@body('Parse_JSON_of_create_snapshot_')?['data']?['vsphereOnDemandSnapshot']?['id']"
                              },
                              "headers": {
                                "Content-Type": "application/json"
                              },
                              "host": {
                                "triggerName": "manual",
                                "workflow": {
                                  "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult"
                                }
                              }
                            }
                          },
                          "Set_Error_for_Poll_Async_Result_in_create_snapshot": {
                            "runAfter": {
                              "RubrikPollAsyncResult": [
                                "Failed"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "CreateSnapshotStatus",
                              "value": "Error Occurred in Poll Async Result"
                            }
                          }
                        },
                        "runAfter": {
                          "Parse_JSON_of_create_snapshot_": [
                            "Succeeded"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Set__error_message_for_snapshot_creation": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "CreateSnapshotStatus",
                                "value": "Evidence snapshot was not created. Please see context for more details."
                              }
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "not": {
                                "equals": [
                                  "@body('Parse_JSON_of_create_snapshot_')?['data']?['vsphereOnDemandSnapshot']?['id']",
                                  "@null"
                                ]
                              }
                            }
                          ]
                        },
                        "type": "If"
                      },
                      "Parse_JSON_of_create_snapshot_": {
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('Create_Snapshot_for_evidence')",
                          "schema": {
                            "properties": {
                              "data": {
                                "properties": {
                                  "vsphereOnDemandSnapshot": {
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('Create_Snapshot_for_evidence')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Create_Snapshot_for_evidence": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_create_snapshot_error_status_with_status_code_not_equal_to_200_": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Status",
                      "value": "Status code:@{outputs('Create_Snapshot_for_evidence')['statusCode']}  Error: @{body('Create_Snapshot_for_evidence')?['message']}"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('Create_Snapshot_for_evidence')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Does_List_all_Snapshots_get_status_code_200": {
              "actions": {
                "Does_List_all_Snapshots_response_contain_errors": {
                  "actions": {
                    "Set_response_error_message_as_List_Snapshot_status": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ListSnapshotsStatus",
                        "value": "Error: @{body('List_all_Snapshots')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "8",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "List_all_Snapshots": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_error_message_with_status_code_as_List_snapshots_status": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ListSnapshotsStatus",
                      "value": "Status code:@{outputs('List_all_Snapshots')['statusCode']}  Error:@{body('List_all_Snapshots')?['message']} "
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('List_all_Snapshots')['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Get_7_days_ago_date": {
              "runAfter": {
                "Initialize_access_token": [
                  "Succeeded"
                ]
              },
              "type": "Expression",
              "kind": "GetPastTime",
              "inputs": {
                "interval": 7,
                "timeUnit": "Day"
              }
            },
            "Get_ClientId": {
              "runAfter": {
                "Is_object_type_not_a_VM": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-clientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "outputs"
                  ]
                }
              }
            },
            "Get_ClientSecret": {
              "runAfter": {
                "Get_ClientId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "outputs"
                  ]
                }
              }
            },
            "Initialize_Cluster_Id": {
              "runAfter": {
                "Initialize_Object_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterId",
                    "type": "string",
                    "value": "@triggerBody()?['ClusterId']"
                  }
                ]
              },
              "description": "from input of playbook"
            },
            "Initialize_Count": {
              "runAfter": {
                "Initialize_restoreConfig": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Count",
                    "type": "integer",
                    "value": -1
                  }
                ]
              }
            },
            "Initialize_IOC_Scan_Result_Status": {
              "runAfter": {
                "Initialize_Status_for_IOC_scan_and_Recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IOCScanResultStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_IOC_Yara_rule_to_scan_for": {
              "runAfter": {
                "Initialize_Cluster_Id": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "IOCYaraRule",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Object_Id": {
              "runAfter": {
                "Initialize_Object_Type": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "string",
                    "value": "@triggerBody()?['ObjectId']"
                  }
                ]
              },
              "description": "from input of playbook"
            },
            "Initialize_Object_Type": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectType",
                    "type": "string",
                    "value": "@triggerBody()?['ObjectType']"
                  }
                ]
              },
              "description": "Fetch from incident"
            },
            "Initialize_Polling_Timeout_for_IOC_Scan": {
              "runAfter": {
                "Collect_IOC_Scan_Data": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PollingTimeout",
                    "type": "integer",
                    "value": "@if(empty(body('Collect_IOC_Scan_Data')?['data']?['polling timeout ']),0,int(body('Collect_IOC_Scan_Data')?['data']?['polling timeout ']))"
                  }
                ]
              }
            },
            "Initialize_Status_for_IOC_scan_and_Recovery": {
              "runAfter": {
                "Initialize_IOC_Yara_rule_to_scan_for": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Status",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Status_for_List_all_Snapshot": {
              "runAfter": {
                "Initialize_Status_for_Snapshot_Creation": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ListSnapshotsStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Status_for_Snapshot_Creation": {
              "runAfter": {
                "Initialize_IOC_Scan_Result_Status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "CreateSnapshotStatus",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_access_token": {
              "runAfter": {
                "Is_Authentication_Failed": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "access_token",
                    "type": "string",
                    "value": "@{body('Authentication')?['access_token']}"
                  }
                ]
              }
            },
            "Initialize_config": {
              "runAfter": {
                "Initialize_Count": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "config",
                    "type": "object"
                  }
                ]
              }
            },
            "Initialize_path_for_recovery": {
              "runAfter": {
                "Initialize_polling_timeout_for_recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Path",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_polling_timeout_for_recovery": {
              "runAfter": {
                "Initialize_Status_for_List_all_Snapshot": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "PollingTimeoutRecovery",
                    "type": "integer"
                  }
                ]
              }
            },
            "Initialize_restoreConfig": {
              "runAfter": {
                "Initialize_restorePath_for_recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RestoreConfig",
                    "type": "array"
                  }
                ]
              }
            },
            "Initialize_restorePath_for_recovery": {
              "runAfter": {
                "Initialize_path_for_recovery": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RestorePath",
                    "type": "array"
                  }
                ]
              }
            },
            "Is_Authentication_Failed": {
              "actions": {
                "Failed_authentication_Response_": {
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "Error:@{body('Authentication')?['message']}",
                    "statusCode": "@outputs('Authentication')['statusCode']"
                  }
                },
                "Terminate_for_failed_authentication_": {
                  "runAfter": {
                    "Failed_authentication_Response_": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{outputs('Authentication')['statusCode']}",
                      "message": "Error:@{body('Authentication')?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Authentication": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Authentication')['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Is_IOC_scan_successful": {
              "runAfter": {
                "Parse_JSON_of_RubrikIOCScan": [
                  "Succeeded"
                ]
              },
              "cases": {
                "Case_ERROR": {
                  "case": "ERROR",
                  "actions": {
                    "Set_error_message_for_IOC_scan": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Status",
                        "value": "There was an error while running the IOC scan."
                      }
                    }
                  }
                },
                "Case_FINISHED": {
                  "case": "FINISHED",
                  "actions": {
                    "Are_there_any_recoverable_snapshots": {
                      "actions": {
                        "Is_the_latest_snapshot_infected": {
                          "actions": {
                            "Is_recovery_enabled": {
                              "actions": {
                                "Collect_Recovery_Data": {
                                  "type": "ApiConnectionWebhook",
                                  "inputs": {
                                    "body": {
                                      "body": {
                                        "messageBody": "{     \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",     \"type\": \"AdaptiveCard\",     \"version\": \"1.3\",     \"body\": [         {             \"type\": \"TextBlock\",             \"size\": \"Large\",             \"weight\": \"Bolder\",             \"text\": \"Recovery Data\",             \"horizontalAlignment\": \"Center\",             \"style\": \"heading\",             \"color\": \"Accent\",             \"fontType\": \"Default\",             \"wrap\": true,             \"id\": \"heading\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Input arguments required to initiate recovery of file(s) of recoverable snapshot.\",             \"wrap\": true,             \"color\": \"Light\",             \"style\": \"default\",             \"separator\": true,             \"id\": \"info\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to recover from the recoverable snapshot\\n\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip1\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to recover\",             \"isMultiline\": true,             \"isRequired\": true,             \"label\": \"required\",             \"errorMessage\": \"\\Paths",
                                        "recipient": {
                                          "channelId": "19:bnaBaHVOHCBYW6MgUqrQK9R7mnkjvb9j7F1T9TaTct41@thread.tacv2",
                                          "groupId": "33066078-fe8e-4fad-80a5-9b6728e915a4"
                                        },
                                        "updateMessage": "Thanks for your response!"
                                      },
                                      "notificationUrl": "@{listCallbackUrl()}"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                      }
                                    },
                                    "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                  }
                                },
                                "Does_Recover_snapshot_files_get_status_code_200": {
                                  "actions": {
                                    "Does_Recover_snapshot_files_contains_errors": {
                                      "actions": {
                                        "Set_response_error_message_as_Recover_files_status": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "Status",
                                            "value": "Error: @{body('Recover_snapshot_files')?['errors'][0]?['message']}"
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Has_recovery_started": {
                                            "actions": {
                                              "Is_recovery_completed": {
                                                "actions": {
                                                  "Set_success_message_for_file_recovery": {
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                      "name": "Status",
                                                      "value": "@{concat('The files have been successfully recovered from the Snapshot with ID ',body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshot']?['id'])}"
                                                    }
                                                  }
                                                },
                                                "runAfter": {
                                                  "Parse_JSON_for_PollAsyncResult2": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "else": {
                                                  "actions": {
                                                    "Set_error_message_for_file_recovery": {
                                                      "type": "SetVariable",
                                                      "inputs": {
                                                        "name": "Status",
                                                        "value": "Recovery of snapshot files for given snapshot ID did not complete."
                                                      }
                                                    }
                                                  }
                                                },
                                                "expression": {
                                                  "and": [
                                                    {
                                                      "equals": [
                                                        "@body('Parse_JSON_for_PollAsyncResult2')?['status']",
                                                        "SUCCEEDED"
                                                      ]
                                                    }
                                                  ]
                                                },
                                                "type": "If"
                                              },
                                              "Parse_JSON_for_PollAsyncResult2": {
                                                "runAfter": {
                                                  "RubrikPollAsyncResult_2": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "ParseJson",
                                                "inputs": {
                                                  "content": "@body('RubrikPollAsyncResult_2')",
                                                  "schema": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "id": {
                                                        "type": "string"
                                                      },
                                                      "links": {
                                                        "items": {
                                                          "properties": {
                                                            "href": {
                                                              "type": "string"
                                                            },
                                                            "rel": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "required": [
                                                            "href",
                                                            "rel"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        "type": "array"
                                                      },
                                                      "status": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                }
                                              },
                                              "RubrikPollAsyncResult_2": {
                                                "type": "Workflow",
                                                "inputs": {
                                                  "body": {
                                                    "BaseUrl": "@triggerBody()?['BaseUrl']",
                                                    "ClusterId": "@variables('ClusterId')",
                                                    "PollingInterval": "@body('Collect_Recovery_Data')?['data']?['polling interval for recovery ']",
                                                    "PollingTimeout": "@variables('PollingTimeoutRecovery')",
                                                    "RequestId": "@body('Parse_JSON_for_recover_snapshot_files')?['data']?['vsphereVMRecoverFilesNew']?['id']"
                                                  },
                                                  "headers": {
                                                    "Content-Type": "application/json"
                                                  },
                                                  "host": {
                                                    "triggerName": "manual",
                                                    "workflow": {
                                                      "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult"
                                                    }
                                                  }
                                                }
                                              },
                                              "Set_error_message_for_poll_async_result_in_file_recovery": {
                                                "runAfter": {
                                                  "RubrikPollAsyncResult_2": [
                                                    "Failed"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "Status",
                                                  "value": "Error in Poll Async Result"
                                                }
                                              }
                                            },
                                            "runAfter": {
                                              "Parse_JSON_for_recover_snapshot_files": [
                                                "Succeeded"
                                              ]
                                            },
                                            "else": {
                                              "actions": {
                                                "Set_error_message_for_recovery_not_started": {
                                                  "type": "SetVariable",
                                                  "inputs": {
                                                    "name": "Status",
                                                    "value": "@{concat('Recovery of snapshot using recoverable snapshot id ',body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshot']?['id'],' did not start.')}"
                                                  }
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "not": {
                                                    "equals": [
                                                      "@empty(body('Parse_JSON_for_recover_snapshot_files')?['data']?['vsphereVMRecoverFilesNew']?['id'])",
                                                      true
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          },
                                          "Parse_JSON_for_recover_snapshot_files": {
                                            "type": "ParseJson",
                                            "inputs": {
                                              "content": "@body('Recover_snapshot_files')",
                                              "schema": {
                                                "properties": {
                                                  "data": {
                                                    "properties": {
                                                      "vsphereVMRecoverFilesNew": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "id": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "contains": [
                                              "@body('Recover_snapshot_files')",
                                              "errors"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "runAfter": {
                                    "Recover_snapshot_files": [
                                      "Succeeded",
                                      "Failed"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_error_message_with_status_code_as_File_Recovery_status_": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "Status",
                                          "value": "Status code:@{outputs('Recover_snapshot_files')['statusCode']} Error:@{body('Recover_snapshot_files')?['message']}"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@outputs('Recover_snapshot_files')['statusCode']",
                                          200
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "For_each": {
                                  "foreach": "@variables('RestorePath')",
                                  "actions": {
                                    "Append_to_array_variable": {
                                      "runAfter": {
                                        "Increment_variable": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "AppendToArrayVariable",
                                      "inputs": {
                                        "name": "RestoreConfig",
                                        "value": {
                                          "restorePathPair": {
                                            "path": "@{variables('Path')[variables('Count')]}",
                                            "restorePath": "@{variables('RestorePath')[variables('Count')]}"
                                          }
                                        }
                                      }
                                    },
                                    "Increment_variable": {
                                      "type": "IncrementVariable",
                                      "inputs": {
                                        "name": "Count",
                                        "value": 1
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Set_restore_path": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Foreach",
                                  "runtimeConfiguration": {
                                    "concurrency": {
                                      "repetitions": 1
                                    }
                                  }
                                },
                                "Recover_snapshot_files": {
                                  "runAfter": {
                                    "Set_config": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Http",
                                  "inputs": {
                                    "body": {
                                      "query": "mutation VsphereVMRecoverFilesNew($clusterUuid: UUID!, $vsphereVmRecoverFilesNewId: String!, $config: RestoreFilesJobConfigInput!) {   vsphereVMRecoverFilesNew(clusterUuid: $clusterUuid, id: $vsphereVmRecoverFilesNewId, config: $config) {     endTime     error {       message     }     id     links {       href       rel     }     nodeId     progress     startTime     status   } }",
                                      "variables": {
                                        "clusterUuid": "@{variables('ClusterId')}",
                                        "config": "@variables('config')",
                                        "vsphereVmRecoverFilesNewId": "@{body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshotid']}"
                                      }
                                    },
                                    "headers": {
                                      "Authorization": "Bearer @{variables('access_token')}",
                                      "Content-Type": "application/json"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                      }
                                    },
                                    "method": "POST",
                                    "path": "/api/graphql",
                                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                  }
                                },
                                "Set_config": {
                                  "runAfter": {
                                    "For_each": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "config",
                                    "value": {
                                      "restoreConfig": "@variables('RestoreConfig')"
                                    }
                                  }
                                },
                                "Set_path": {
                                  "runAfter": {
                                    "check_if_polling_timeout_for_recovery_is_empty_or_less_than_or_equal_to_0__": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Path",
                                    "value": "@array(split(body('Collect_Recovery_Data')?['data']?['paths to recover'],','))"
                                  }
                                },
                                "Set_restore_path": {
                                  "runAfter": {
                                    "Set_path": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "RestorePath",
                                    "value": "@array(split(body('Collect_Recovery_Data')?['data']?['restore path for the file(s)'],','))"
                                  }
                                },
                                "check_if_polling_timeout_for_recovery_is_empty_or_less_than_or_equal_to_0__": {
                                  "actions": {
                                    "Set_default_value_for_polling_timeout_for_recovery": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "PollingTimeoutRecovery",
                                        "value": 720
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Collect_Recovery_Data": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "or": [
                                      {
                                        "equals": [
                                          "@empty(body('Collect_Recovery_Data')?['data']?['polling timeout for recovery'])",
                                          true
                                        ]
                                      },
                                      {
                                        "lessOrEquals": [
                                          "@body('Collect_Recovery_Data')?['data']?['polling timeout for recovery']",
                                          0
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "else": {
                                "actions": {
                                  "Set_message_for_recovery_is_not_enabled": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "Status",
                                      "value": "Recovery is not enabled. so recovery won't be performed."
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Collect_IOC_Scan_Data')?['data']?['perform recovery']",
                                      true
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_no_recovery_message_for_IOC_scan_and_recovery": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Status",
                                  "value": "The latest snapshot for the given time period is not infected so no recovery is required."
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Parse_JSON_of_RubrikIOCScan')?['isLatestInfected']",
                                  true
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "else": {
                        "actions": {
                          "Set_records_not_found_message": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Status",
                              "value": "No recoverable snapshots were found with the given IOC scan arguments."
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@empty(body('Parse_JSON_of_RubrikIOCScan')?['RecoverableSnapshotid'])",
                                true
                              ]
                            }
                          }
                        ]
                      },
                      "type": "If"
                    }
                  }
                },
                "Case_RUNNING": {
                  "case": "RUNNING",
                  "actions": {
                    "Set_timeout_message_for_IOC_scan": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Status",
                        "value": "Wait for IOC scan results timed out."
                      }
                    }
                  }
                }
              },
              "default": {
                "actions": {
                  "Set_unknown_status_message_for_IOC_scan": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Status",
                      "value": "Unknown status was received for the IOC scan."
                    }
                  }
                }
              },
              "expression": "@if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'FINISHED'),'FINISHED',if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'RUNNING'),'RUNNING',if(contains(body('Parse_JSON_of_RubrikIOCScan')?['RadarIOCScanStatus'],'ERROR'),'ERROR','Default')))",
              "type": "Switch"
            },
            "Is_object_type_not_a_VM": {
              "actions": {
                "Error_Response_for_not_a_VM_object": {
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exitingΓê⌐ΓöÉΓò£",
                    "statusCode": 400
                  }
                },
                "error_for_not_a_VM_object": {
                  "runAfter": {
                    "Error_Response_for_not_a_VM_object": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "message": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exitingΓê⌐ΓöÉΓò£"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Initialize_config": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "contains": [
                        "@variables('ObjectType')",
                        "Vm"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "List_all_Snapshots": {
              "runAfter": {
                "Get_7_days_ago_date": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query GetVSphereVmSnapshotInfoQuery($id: UUID!, $snapshotGroupBy: CdmSnapshotGroupByEnum!, $missedSnapshotGroupBy: MissedSnapshotGroupByEnum!, $timeRange: TimeRangeInput!, $timezoneOffset: Float!, $clusterConnected: Boolean!) {   snappable: vSphereVmNew(fid: $id) {     id     missedSnapshotGroupByConnection(       groupBy: $missedSnapshotGroupBy       filter: {timeRange: $timeRange}       timezoneOffset: $timezoneOffset     ) @include(if: $clusterConnected) {       nodes {         groupByInfo {           ... on TimeRangeWithUnit {             unit             start             end             __typename           }           __typename         }         missedSnapshotConnection {           count           nodes {             date             __typename           }           __typename         }         __typename       }       __typename     }     snapshotGroupByConnection(       groupBy: $snapshotGroupBy       filter: {timeRange: $timeRange}       timezoneOffset: $timezoneOffset     ) {       nodes {         groupByInfo {           ... on TimeRangeWithUnit {             unit             start             end             __typename           }           __typename         }         snapshotConnection {           count           nodes {             id             isIndexed             isUnindexable             __typename           }           __typename         }         __typename       }       __typename     }     __typename   } }",
                  "variables": {
                    "clusterConnected": true,
                    "id": "@{variables('ObjectId')}",
                    "missedSnapshotGroupBy": "Day",
                    "snapshotGroupBy": "Day",
                    "timeRange": {
                      "end": "@{utcNow()}",
                      "start": "@{body('Get_7_days_ago_date')}"
                    },
                    "timezoneOffset": 5.5
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Parse_JSON_of_RubrikIOCScan": {
              "runAfter": {
                "Check_that_IOC_scan_has_no_error": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('RubrikIOCScan')",
                "schema": {
                  "properties": {
                    "RadarIOCScan": {
                      "type": "object"
                    },
                    "RadarIOCScanStatus": {
                      "type": "string"
                    },
                    "RecoverableSnapshotid": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string"
                    },
                    "isLatestInfected": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "Response": {
              "runAfter": {
                "Does_Create_Snapshot_get_status_code_200": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ],
                "Does_List_all_Snapshots_get_status_code_200": [
                  "Succeeded",
                  "TimedOut",
                  "Failed",
                  "Skipped"
                ],
                "Is_IOC_scan_successful": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "Creat Snapshot Status": "@variables('CreateSnapshotStatus')",
                  "IOCScan ResultStatus": "@variables('IOCScanResultStatus')",
                  "IOCScan and Recovery Status": "@variables('Status')",
                  "List Snapshot Status": "@variables('ListSnapshotsStatus')"
                },
                "statusCode": "@if(or(contains(variables('Status'),'Error'),or(contains(variables('ListSnapshotsStatus'),'Error'),or(contains(variables('IOCScanResultStatus'),'Error'),contains(variables('CreateSnapshotStatus'),'Error')))),400,200)"
              }
            },
            "RubrikIOCScan": {
              "runAfter": {
                "Whether_to_fetch_Yara_rule(s)_from_a_URL": [
                  "Succeeded"
                ]
              },
              "type": "Workflow",
              "inputs": {
                "body": {
                  "BaseUrl": "@triggerBody()?['BaseUrl']",
                  "ClusterId": "@variables('ClusterId')",
                  "EndDate": "@body('Collect_IOC_Scan_Data')?['data']?['end date ']",
                  "IOCHash": "@body('Collect_IOC_Scan_Data')?['data']?['ioc hash ']",
                  "IOCPath": "@body('Collect_IOC_Scan_Data')?['data']?['ioc path ']",
                  "IOCYaraRule": "@variables('IOCYaraRule')",
                  "Limit": "@body('Collect_IOC_Scan_Data')?['data']?['limit to loop the IOC scan sub-playbook']",
                  "ObjectId": "@variables('ObjectId')",
                  "PathsToExclude": "@body('Collect_IOC_Scan_Data')?['data']?['paths to exclude']",
                  "PathsToExempt": "@body('Collect_IOC_Scan_Data')?['data']?['paths to exempt']",
                  "PathsToInclude": "@body('Collect_IOC_Scan_Data')?['data']?['paths to include ']",
                  "PollingInterval": "@body('Collect_IOC_Scan_Data')?['data']?['polling interval ']",
                  "PollingTimeout": "@variables('PollingTimeout')",
                  "RequestedHashType": "@body('Collect_IOC_Scan_Data')?['data']?['requested Hash Type']",
                  "ScanName": "@body('Collect_IOC_Scan_Data')?['data']?['scan Name']",
                  "StartDate": "@body('Collect_IOC_Scan_Data')?['data']?['start date ']",
                  "TimeDelta": "@{body('Collect_IOC_Scan_Data')?['data']?['time Delta ']}"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "triggerName": "manual",
                  "workflow": {
                    "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikIOCScan"
                  }
                }
              }
            },
            "Whether_to_fetch_Yara_rule(s)_from_a_URL": {
              "actions": {
                "Fetch_Yara_rule(s)_from_file_URL": {
                  "type": "Http",
                  "inputs": {
                    "method": "GET",
                    "uri": "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule file URL ']"
                  }
                },
                "Set_IOC_YaraRule": {
                  "runAfter": {
                    "Fetch_Yara_rule(s)_from_file_URL": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "IOCYaraRule",
                    "value": "@{body('Fetch_Yara_rule(s)_from_file_URL')}"
                  }
                }
              },
              "runAfter": {
                "Check_if_Polling_Timeout_is_less_than_or_equals_to_0": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Set_default_value_of_IOC_Yara_Rule": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "IOCYaraRule",
                      "value": "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule']"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@body('Collect_IOC_Scan_Data')?['data']?['ioc Yara rule file URL ']",
                        "@null"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "RubrikCustomConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook8-RubrikcustomconnectorConnectionName'))]",
                "connectionName": "[variables('playbook8-RubrikcustomconnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/customApis/Rubrikcustomconnector')]"
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook8-KeyvaultConnectionName'))]",
                "connectionName": "[variables('playbook8-KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]"
              },
              "teams": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook8-TeamsConnectionName'))]",
                "connectionName": "[variables('playbook8-TeamsConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Teams')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook8-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikRansomwareDiscoveryAndFileRecovery",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook8-RubrikcustomconnectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook8-KeyvaultConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook8-TeamsConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook8-RubrikcustomconnectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook8-RubrikcustomconnectorConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook8-KeyvaultConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook8-KeyvaultConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook8-TeamsConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook8-TeamsConnectionName')]",
        "api": {
          "id": "[variables('_playbook-3-connection-3')]"
        }
      }
    },
    {
      "properties": {
        "provisioningState": "Succeeded",
        "state": "Disabled",
        "definition": {
          "$schema": "https://schema.@{variables('azureManagementUrl')}/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "BaseUrl": {
                      "type": "string"
                    },
                    "ClusterId": {
                      "type": "string"
                    },
                    "ObjectId": {
                      "type": "string"
                    },
                    "ObjectType": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Authentication": {
              "runAfter": {
                "ClientSecret": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "client_id": "@body('ClientId')?['value']",
                  "client_secret": "@body('ClientSecret')?['value']"
                },
                "headers": {
                  "Content-Type": "application/json"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/api/client_token"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Check_if_URL_is_provided_to_fetch_yara_rule": {
              "actions": {
                "Fetch_yara_rule_from_URL": {
                  "type": "Http",
                  "inputs": {
                    "method": "GET",
                    "uri": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule file URL']"
                  }
                },
                "Set_variable_8": {
                  "runAfter": {
                    "Fetch_yara_rule_from_URL": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "Yara Rule",
                    "value": "@{body('Fetch_yara_rule_from_URL')}"
                  }
                }
              },
              "runAfter": {
                "check_if_polling_time_out_is_less_then_or_equal_to_0_or_not": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@empty(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule file URL'])",
                        "@true"
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Check_response_has_error_or_not": {
              "runAfter": {
                "RubrikIOCScan": [
                  "Succeeded",
                  "Failed",
                  "Skipped",
                  "TimedOut"
                ]
              },
              "else": {
                "actions": {
                  "Response_2": {
                    "runAfter": {
                      "Until_2": [
                        "Succeeded"
                      ]
                    },
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": "IOC Scan has error: @{body('RubrikIOCScan')?['error']}",
                      "statusCode": 400
                    }
                  },
                  "Set_variable_25": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ErrorMessage",
                      "value": "IOC Scan has error: @{body('RubrikIOCScan')?['error']}"
                    }
                  },
                  "Terminate_6": {
                    "runAfter": {
                      "Response_2": [
                        "Succeeded"
                      ]
                    },
                    "type": "Terminate",
                    "inputs": {
                      "runError": {
                        "message": "IOC Scan not completed: @{body('RubrikIOCScan')?['error']}"
                      },
                      "runStatus": "Failed"
                    }
                  },
                  "Until_2": {
                    "actions": {
                      "Delay_until_2": {
                        "type": "Wait",
                        "inputs": {
                          "until": {
                            "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                          }
                        }
                      }
                    },
                    "runAfter": {
                      "Set_variable_25": [
                        "Succeeded"
                      ]
                    },
                    "expression": "@equals(variables('Flow1SkipStatus'), true)",
                    "limit": {
                      "count": 60,
                      "timeout": "PT1H"
                    },
                    "type": "Until"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@empty(body('RubrikIOCScan')?['error'])",
                      "@true"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Check_status_code_in_response_of_Get_VM_metadata": {
              "actions": {
                "Check_if__Get_VM_metadata_contains_any_error_in_replay": {
                  "actions": {
                    "Set_variable_23": {
                      "runAfter": {
                        "Set_variable_3": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Flow2SkipStatus",
                        "value": "@true"
                      }
                    },
                    "Set_variable_3": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ErrorMessage",
                        "value": "@{body('Get_VM_metadata')?['errors'][0]?['message']}"
                      }
                    },
                    "Terminate_4": {
                      "runAfter": {
                        "Until": [
                          "Succeeded"
                        ]
                      },
                      "type": "Terminate",
                      "inputs": {
                        "runError": {
                          "message": "@variables('ErrorMessage')"
                        },
                        "runStatus": "Failed"
                      }
                    },
                    "Until": {
                      "actions": {
                        "Delay_until": {
                          "type": "Wait",
                          "inputs": {
                            "until": {
                              "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Set_variable_23": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@equals(variables('Flow1SkipStatus'), true)",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('Get_VM_metadata')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Get_VM_metadata": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_variable_22": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ErrorMessage",
                      "value": "Status Code:  @{outputs('Get_VM_metadata')['statusCode']}, Error message: @{body('Get_VM_metadata')?['message']}"
                    }
                  },
                  "Set_variable_24": {
                    "runAfter": {
                      "Set_variable_22": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Flow2SkipStatus",
                      "value": "@true"
                    }
                  },
                  "Terminate_7": {
                    "runAfter": {
                      "Until_3": [
                        "Succeeded"
                      ]
                    },
                    "type": "Terminate",
                    "inputs": {
                      "runError": {
                        "code": "@{outputs('Get_VM_metadata')['statusCode']}",
                        "message": "@{body('Get_VM_metadata')?['message']}"
                      },
                      "runStatus": "Failed"
                    }
                  },
                  "Until_3": {
                    "actions": {
                      "Delay_until_3": {
                        "type": "Wait",
                        "inputs": {
                          "until": {
                            "timestamp": "@addToTime('1970-01-01T00:00:00Z', int(add(int(div(sub(ticks(utcNow()),ticks('1970-01-01Z00:00:00')),10000000)), 10)), 'second')"
                          }
                        }
                      }
                    },
                    "runAfter": {
                      "Set_variable_24": [
                        "Succeeded"
                      ]
                    },
                    "expression": "@equals(variables('Flow1SkipStatus'), true)",
                    "limit": {
                      "count": 60,
                      "timeout": "PT1H"
                    },
                    "type": "Until"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('Get_VM_metadata')?['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "ClientId": {
              "runAfter": {
                "Is_Object_Type_VM": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientId')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "ClientSecret": {
              "runAfter": {
                "ClientId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('Rubrik-AS-Int-ClientSecret')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "ClusterId": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ClusterId",
                    "type": "string"
                  }
                ]
              }
            },
            "Collect_IOC_scan_and_general_recovery_data": {
              "runAfter": {
                "Initialize_HostId": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnectionWebhook",
              "inputs": {
                "body": {
                  "body": {
                    "messageBody": "{     \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",     \"type\": \"AdaptiveCard\",     \"version\": \"1.3\",     \"body\": [         {             \"type\": \"TextBlock\",             \"size\": \"Large\",             \"weight\": \"Bolder\",             \"text\": \"IOC Scan and Recovery Data\",             \"horizontalAlignment\": \"Center\",             \"style\": \"heading\",             \"color\": \"Accent\",             \"fontType\": \"Default\",             \"wrap\": true,             \"id\": \"heading\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Input arguments required to initiate IOC Scan(s) and recovery.\",             \"wrap\": true,             \"color\": \"Light\",             \"style\": \"default\",             \"separator\": true,             \"id\": \"info\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC hash to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip1\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC hash to scan for\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC path to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip2\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC path to scan for\"         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC Yara rule to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip3\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC Yara rule to scan for\",             \"isMultiline\": true         },         {             \"type\": \"TextBlock\",             \"text\": \"IOC Yara rule file URL to scan for\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip4\"         },         {             \"type\": \"Input.Text\",             \"id\": \"IOC Yara rule file URL\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Start date to initiate the IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip5\"         },         {             \"type\": \"Input.Date\",             \"id\": \"Start date to initiate\"         },         {             \"type\": \"TextBlock\",             \"text\": \"End date to initiate the IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip6\"         },         {             \"type\": \"Input.Date\",             \"id\": \"End date to initiate\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Time Delta to update the date range of IOC scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip7\"         },         {             \"type\": \"Input.Number\",             \"id\": \"Time Delta\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling interval for IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip8\"         },         {             \"type\": \"Input.Number\",             \"placeholder\": \"5\",             \"id\": \"Polling interval for IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling timeout for IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip9\"         },         {             \"type\": \"Input.Number\",             \"placeholder\": \"720\",             \"label\": \"In minutes\",             \"id\": \"Polling timeout for IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling interval for recovery asynchronous results\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip10\"         },         {             \"type\": \"Input.Number\",             \"placeholder\": \"5\",             \"id\": \"Polling interval for recovery\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Polling timeout for recovery asynchronous results\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip11\"         },         {             \"type\": \"Input.Number\",             \"placeholder\": \"720\",             \"id\": \"Polling timeout for recovery\",             \"label\": \"In minutes\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Limit to loop the IOC scan sub-playbook\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip12\"         },         {             \"type\": \"Input.Number\",             \"placeholder\": \"0\",             \"id\": \"Limit to loop the IOC scan sub-playbook\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to include in the IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip13\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to include in the IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to exclude in the IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip14\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to exclude in the IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Paths to exempt in the IOC Scan\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip15\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Paths to exempt in the IOC Scan\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to live-mount or export a recoverable snapshot?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip16\"         },         {             \"type\": \"Input.ChoiceSet\",             \"id\": \"live-mount or export\",             \"value\": \"Live-Mount\",             \"style\": \"expanded\",             \"choices\": [                 {                     \"title\": \"Live-Mount\",                     \"value\": \"Live-Mount\"                 },                 {                     \"title\": \"Export\",                     \"value\": \"Export\"                 },                 {                     \"title\": \"No Recovery\",                     \"value\": \"No Recovery\"                 }             ],             \"isRequired\": true,             \"errorMessage\": \"This field id required\",             \"label\": \"required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Scan Name\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip17\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Scan Name\"         }     ],     \"actions\": [         {             \"type\": \"Action.Submit\",             \"title\": \"Submit Answer\",             \"data\": {                 \"id\": \"LoginVal\"             },             \"style\": \"positive\",             \"id\": \"Submit\"         }     ] } ",
                    "recipient": {
                      "channelId": "19:bnaBaHVOHCBYW6MgUqrQK9R7mnkjvb9j7F1T9TaTct41@thread.tacv2",
                      "groupId": "33066078-fe8e-4fad-80a5-9b6728e915a4"
                    },
                    "updateMessage": "Thanks for your response!"
                  },
                  "notificationUrl": "@{listCallbackUrl()}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
              }
            },
            "Create_Snapshot_for_evidence": {
              "runAfter": {
                "Flow_2_Skip_Status": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "mutation TakeVSphereSnapshotMutation($snappableId: UUID!, $slaID: String) {     vsphereOnDemandSnapshot(snappableFid: $snappableId, slaID: $slaID) {       id       status     }   }",
                  "variables": {
                    "snappableId": "@{triggerBody()?['ObjectId']}"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Does_Create_Snapshot_for_evidence_get_status_code_200": {
              "actions": {
                "Does_Create_Snapshot_for_evidence_API_response_contains_errors": {
                  "actions": {
                    "Set_1_skip_status_for_this_flow_": {
                      "runAfter": {
                        "Set_error_message_of_API": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable",
                      "inputs": {
                        "name": "Flow1SkipStatus",
                        "value": "@true"
                      }
                    },
                    "Set_error_message_of_API": {
                      "type": "SetVariable",
                      "inputs": {
                        "name": "ErrorMessage1",
                        "value": "@{body('Create_Snapshot_for_evidence')?['errors'][0]?['message']}"
                      }
                    }
                  },
                  "else": {
                    "actions": {
                      "Has_snapshot_creation_started": {
                        "actions": {
                          "Is_the_snapshot_created_successfully": {
                            "actions": {
                              "Set_variable_2_error_message_": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage1",
                                  "value": "Snapshot Crested successfully"
                                }
                              },
                              "Set_variable_skip_flow": {
                                "runAfter": {
                                  "Set_variable_2_error_message_": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "Flow1SkipStatus",
                                  "value": "@true"
                                }
                              }
                            },
                            "runAfter": {
                              "Parse_response_of_RubrikPollAsyncResult": [
                                "Succeeded"
                              ]
                            },
                            "else": {
                              "actions": {
                                "set_error_message_if_RUNNING_or_else_condition": {
                                  "actions": {
                                    "Set_error_message_for_RUNNING_condition": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "ErrorMessage1",
                                        "value": "Wait for evidence snapshot creation results timed out. Please see incident context for further details."
                                      }
                                    },
                                    "Set_variable_30": {
                                      "runAfter": {
                                        "Set_error_message_for_RUNNING_condition": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "Flow1SkipStatus",
                                        "value": "@true"
                                      }
                                    }
                                  },
                                  "else": {
                                    "actions": {
                                      "Set_error_message_for_else_condition": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ErrorMessage1",
                                          "value": "Evidence snapshot was not created. Please see context for more details."
                                        }
                                      },
                                      "Set_variable_31": {
                                        "runAfter": {
                                          "Set_error_message_for_else_condition": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "Flow1SkipStatus",
                                          "value": "@true"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('Parse_response_of_RubrikPollAsyncResult')?['data']?['vSphereVMAsyncRequestStatus']?['status']",
                                          "RUNNING"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              }
                            },
                            "expression": {
                              "and": [
                                {
                                  "equals": [
                                    "@body('Parse_response_of_RubrikPollAsyncResult')?['status']",
                                    "SUCCEEDED"
                                  ]
                                }
                              ]
                            },
                            "type": "If"
                          },
                          "Parse_response_of_RubrikPollAsyncResult": {
                            "runAfter": {
                              "RubrikPollAsyncResult_3": [
                                "Succeeded"
                              ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                              "content": "@body('RubrikPollAsyncResult_3')",
                              "schema": {
                                "properties": {
                                  "__typename": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "links": {
                                    "items": {
                                      "properties": {
                                        "href": {
                                          "type": "string"
                                        },
                                        "rel": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "href",
                                        "rel"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "status": {
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            }
                          },
                          "RubrikPollAsyncResult_3": {
                            "type": "Workflow",
                            "inputs": {
                              "body": {
                                "BaseUrl": "@triggerBody()?['BaseUrl']",
                                "ClusterId": "d1879b0c-e18f-4bf6-8894-c35f8fa336a6",
                                "PollingInterval": 4,
                                "PollingTimeout": 720,
                                "RequestId": "@body('Parse_Response_of_Create_Snapshot_for_evidence')?['data']?['vsphereOnDemandSnapshot']?['id']"
                              },
                              "headers": {
                                "Content-Type": "application/json"
                              },
                              "host": {
                                "triggerName": "manual",
                                "workflow": {
                                  "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult"
                                }
                              }
                            }
                          },
                          "Set_Error_message_if_poll_async_gets_failed": {
                            "runAfter": {
                              "RubrikPollAsyncResult_3": [
                                "Skipped",
                                "Failed",
                                "TimedOut"
                              ]
                            },
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ErrorMessage1",
                              "value": "Error in Rubrik Poll Async Result Playbook"
                            }
                          }
                        },
                        "runAfter": {
                          "Parse_Response_of_Create_Snapshot_for_evidence": [
                            "Succeeded"
                          ]
                        },
                        "else": {
                          "actions": {
                            "Set_Errormessage": {
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ErrorMessage1",
                                "value": "Evidence snapshot was not created. Please see context for more details."
                              }
                            },
                            "Set_variable_28": {
                              "runAfter": {
                                "Set_Errormessage": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "Flow1SkipStatus",
                                "value": "@true"
                              }
                            }
                          }
                        },
                        "expression": {
                          "and": [
                            {
                              "not": {
                                "equals": [
                                  "@body('Parse_Response_of_Create_Snapshot_for_evidence')?['data']?['vsphereOnDemandSnapshot']?['id']",
                                  "@null"
                                ]
                              }
                            }
                          ]
                        },
                        "type": "If"
                      },
                      "Parse_Response_of_Create_Snapshot_for_evidence": {
                        "type": "ParseJson",
                        "inputs": {
                          "content": "@body('Create_Snapshot_for_evidence')",
                          "schema": {
                            "properties": {
                              "data": {
                                "properties": {
                                  "vsphereOnDemandSnapshot": {
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "contains": [
                          "@body('Create_Snapshot_for_evidence')",
                          "errors"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Create_Snapshot_for_evidence": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "else": {
                "actions": {
                  "Set_error_message_on_failed_status_of_create_snapshot_for_evidence": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ErrorMessage1",
                      "value": "No snapshots created for evidence."
                    }
                  },
                  "Set_skip_status_for_this_flow": {
                    "runAfter": {
                      "Set_error_message_on_failed_status_of_create_snapshot_for_evidence": [
                        "Succeeded"
                      ]
                    },
                    "type": "SetVariable",
                    "inputs": {
                      "name": "Flow1SkipStatus",
                      "value": "@true"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('Create_Snapshot_for_evidence')?['statusCode']",
                      200
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Flow_1_Skip_Status": {
              "runAfter": {
                "access_token": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Flow1SkipStatus",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Flow_2_Skip_Status": {
              "runAfter": {
                "Flow_1_Skip_Status": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Flow2SkipStatus",
                    "type": "boolean",
                    "value": "@false"
                  }
                ]
              }
            },
            "Get_VM_metadata": {
              "runAfter": {
                "Flow_2_Skip_Status": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "query": "query VSphereDetailQuery($id: UUID!) {   vSphereDetailData: vSphereVmNew(fid: $id) {     id     authorizedOperations     name     isRelic     effectiveSlaDomain {       ...EffectiveSLADomainFragment       __typename     }     effectiveSlaSourceObject {       fid       name       objectType       __typename     }     pendingSla {       id       name       __typename     }     protectionDate     reportSnappable {       id       logicalBytes       physicalBytes       archiveStorage       __typename     }     cluster {       id       name       status       version       lastConnectionTime       defaultAddress       ...ClusterNodeConnectionFragment       ...ClusterStateFragment       ...ClusterGlobalManagerFragment       __typename     }     primaryClusterLocation {       id       name       __typename     }     arrayIntegrationEnabled     snapshotConsistencyMandate     agentStatus {       agentStatus       __typename     }     preBackupScript {       scriptPath       failureHandling       timeoutMs       __typename     }     postBackupScript {       scriptPath       failureHandling       timeoutMs       __typename     }     postSnapScript {       scriptPath       failureHandling       timeoutMs       __typename     }     logicalPath {       fid       objectType       name       __typename     }     physicalPath {       fid       objectType       name       __typename     }     vsphereTagPath {       fid       objectType       name       __typename     }     oldestSnapshot {       id       date       isIndexed       __typename     }     totalSnapshots: snapshotConnection {       count       __typename     }     replicatedObjects {       id       primaryClusterLocation {         id         name         __typename       }       cluster {         name         id         __typename       }       __typename     }     newestArchivedSnapshot {       id       date       isIndexed       archivalLocations {         id         name         __typename       }       __typename     }     newestReplicatedSnapshot {       id       date       isIndexed       replicationLocations {         id         name         __typename       }       __typename     }     newestSnapshot {       id       date       isIndexed       __typename     }     onDemandSnapshotCount     vmwareToolsInstalled     cdmLink     __typename   } }  fragment EffectiveSLADomainFragment on SlaDomain {   id   name   ... on ClusterSlaDomain {     fid     cluster {       id       name       __typename     }     __typename   }   __typename }  fragment ClusterNodeConnectionFragment on Cluster {   clusterNodeConnection {     nodes {       id       status       ipAddress       __typename     }     __typename   }   __typename }  fragment ClusterStateFragment on Cluster {   state {     connectedState     clusterRemovalState     __typename   }   __typename }  fragment ClusterGlobalManagerFragment on Cluster {   passesConnectivityCheck   globalManagerConnectivityStatus {     urls {       url       isReachable       __typename     }     __typename   }   connectivityLastUpdated   __typename }",
                  "variables": {
                    "id": "@{triggerBody()?['ObjectId']}"
                  }
                },
                "headers": {
                  "Authorization": "Bearer @{variables('access_token')}",
                  "Content-Type": "application/json"
                },
                "method": "POST",
                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
              }
            },
            "Initialize_Error_Message_for_flow_Start_IOC_Scan": {
              "runAfter": {
                "Initialize_Error_Message_for_flow_of_creating_snapshot": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ErrorMessage",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_Error_Message_for_flow_of_creating_snapshot": {
              "runAfter": {
                "ObjectType": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ErrorMessage1",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_HostId": {
              "runAfter": {
                "Parse_Response_of_Get_VM_metadata": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "HostId",
                    "type": "string"
                  }
                ]
              }
            },
            "Initialize_polling_timeout_for_ioc_scan": {
              "runAfter": {
                "Collect_IOC_scan_and_general_recovery_data": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Polling Timeout",
                    "type": "integer",
                    "value": "@if(empty(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling timeout for IOC Scan']),0,int(body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling timeout for IOC Scan']))"
                  }
                ]
              }
            },
            "Initialize_yara_Rule": {
              "runAfter": {
                "Initialize_polling_timeout_for_ioc_scan": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Yara Rule",
                    "type": "string",
                    "value": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc Yara rule to scan for']"
                  }
                ]
              }
            },
            "Is_Authentication_Failed": {
              "actions": {
                "Response_3": {
                  "runAfter": {
                    "Set_Error_Message_2": [
                      "Succeeded"
                    ]
                  },
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": "@body('Authentication')?['message']",
                    "statusCode": "@body('Authentication')?['code']"
                  }
                },
                "Set_Error_Message_2": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ErrorMessage",
                    "value": "Status Code:  @{body('Authentication')?['code']} , Error message:  @{body('Authentication')?['message']}"
                  }
                },
                "Terminate_2": {
                  "runAfter": {
                    "Response_3": [
                      "Succeeded"
                    ]
                  },
                  "type": "Terminate",
                  "inputs": {
                    "runError": {
                      "code": "@{body('Authentication')?['code']}",
                      "message": "@{body('Authentication')?['message']}"
                    },
                    "runStatus": "Failed"
                  }
                }
              },
              "runAfter": {
                "Authentication": [
                  "Succeeded",
                  "Failed"
                ]
              },
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@outputs('Authentication')['statusCode']",
                        200
                      ]
                    }
                  }
                ]
              },
              "type": "If"
            },
            "Is_IOC_Scan_successful_(check_for_ERROR)": {
              "actions": {
                "Set_variable_5": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ErrorMessage",
                    "value": "There was an error while running the IOC scan. Please see incident context for further details."
                  }
                }
              },
              "runAfter": {
                "Response_RubrikIOCScan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "contains": [
                      "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                      "ERROR"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Is_IOC_Scan_successful_(check_for_FINISHED)": {
              "actions": {
                "Whether_to_perform_recovery": {
                  "actions": {
                    "Is_the_latest_snapshot_infected": {
                      "actions": {
                        "Are_there_any_recoverable_snapshots": {
                          "actions": {
                            "Default_value_of_HostId": {
                              "foreach": "@body('Parse_response_of_Get_HostID')?['data']?['vSphereDetailData']?['physicalPath']",
                              "actions": {
                                "Condition_3": {
                                  "actions": {
                                    "Set_variable_2": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "HostId",
                                        "value": "@items('Default_value_of_HostId')?['fid']"
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@items('Default_value_of_HostId')?['objectType']",
                                          "VSphereHost"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                }
                              },
                              "runAfter": {
                                "Parse_response_of_Get_HostID": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "Get_HostID": {
                              "type": "Http",
                              "inputs": {
                                "body": {
                                  "query": "query VSphereDetailQuery($id: UUID!) {   vSphereDetailData: vSphereVmNew(fid: $id) {     id     authorizedOperations     name     isRelic     effectiveSlaDomain {       ...EffectiveSLADomainFragment       __typename     }     effectiveSlaSourceObject {       fid       name       objectType       __typename     }     pendingSla {       id       name       __typename     }     protectionDate     reportSnappable {       id       logicalBytes       physicalBytes       archiveStorage       __typename     }     cluster {       id       name       status       version       lastConnectionTime       defaultAddress       ...ClusterNodeConnectionFragment       ...ClusterStateFragment       ...ClusterGlobalManagerFragment       __typename     }     primaryClusterLocation {       id       name       __typename     }     arrayIntegrationEnabled     snapshotConsistencyMandate     agentStatus {       agentStatus       __typename     }     preBackupScript {       scriptPath       failureHandling       timeoutMs       __typename     }     postBackupScript {       scriptPath       failureHandling       timeoutMs       __typename     }     postSnapScript {       scriptPath       failureHandling       timeoutMs       __typename     }     logicalPath {       fid       objectType       name       __typename     }     physicalPath {       fid       objectType       name       __typename     }     vsphereTagPath {       fid       objectType       name       __typename     }     oldestSnapshot {       id       date       isIndexed       __typename     }     totalSnapshots: snapshotConnection {       count       __typename     }     replicatedObjects {       id       primaryClusterLocation {         id         name         __typename       }       cluster {         name         id         __typename       }       __typename     }     newestArchivedSnapshot {       id       date       isIndexed       archivalLocations {         id         name         __typename       }       __typename     }     newestReplicatedSnapshot {       id       date       isIndexed       replicationLocations {         id         name         __typename       }       __typename     }     newestSnapshot {       id       date       isIndexed       __typename     }     onDemandSnapshotCount     vmwareToolsInstalled     cdmLink     __typename   } }  fragment EffectiveSLADomainFragment on SlaDomain {   id   name   ... on ClusterSlaDomain {     fid     cluster {       id       name       __typename     }     __typename   }   __typename }  fragment ClusterNodeConnectionFragment on Cluster {   clusterNodeConnection {     nodes {       id       status       ipAddress       __typename     }     __typename   }   __typename }  fragment ClusterStateFragment on Cluster {   state {     connectedState     clusterRemovalState     __typename   }   __typename }  fragment ClusterGlobalManagerFragment on Cluster {   passesConnectivityCheck   globalManagerConnectivityStatus {     urls {       url       isReachable       __typename     }     __typename   }   connectivityLastUpdated   __typename }",
                                  "variables": {
                                    "id": "@{triggerBody()?['ObjectId']}"
                                  }
                                },
                                "headers": {
                                  "Authorization": "Bearer @{variables('access_token')}",
                                  "Content-Type": "application/json"
                                },
                                "method": "POST",
                                "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                              }
                            },
                            "Get_HostID_contains_200_statuscode": {
                              "runAfter": {
                                "Get_HostID": [
                                  "Succeeded",
                                  "Failed"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Response_4": {
                                    "runAfter": {
                                      "Set_variable_32": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                      "body": "@body('Get_HostID')?['message']",
                                      "statusCode": "@outputs('Get_HostID')['statusCode']"
                                    }
                                  },
                                  "Set_variable_32": {
                                    "type": "SetVariable",
                                    "inputs": {
                                      "name": "ErrorMessage",
                                      "value": "Status Code : @{outputs('Get_HostID')['statusCode']}, message: @{body('Get_HostID')?['message']}"
                                    }
                                  },
                                  "Terminate_8": {
                                    "runAfter": {
                                      "Response_4": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                      "runError": {
                                        "code": "@{outputs('Get_HostID')['statusCode']}",
                                        "message": "@{body('Get_HostID')?['message']}"
                                      },
                                      "runStatus": "Failed"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@outputs('Get_HostID')['statusCode']",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Has_recovery_started": {
                              "actions": {
                                "Is_recovery_successfully_completed": {
                                  "actions": {
                                    "Response_13": {
                                      "type": "Response",
                                      "kind": "Http",
                                      "inputs": {
                                        "body": "Recovery successfully completed.",
                                        "statusCode": 200
                                      }
                                    },
                                    "Terminate_3": {
                                      "runAfter": {
                                        "Response_13": [
                                          "Succeeded"
                                        ]
                                      },
                                      "type": "Terminate",
                                      "inputs": {
                                        "runStatus": "Succeeded"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "RubrikPollAsyncResult_2": [
                                      "Succeeded",
                                      "Failed"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Response_14": {
                                        "runAfter": {
                                          "Set_variable_10": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Response",
                                        "kind": "Http",
                                        "inputs": {
                                          "body": "@concat('Recovery of VM using recoverable snapshot id ',body('Response_RubrikIOCScan')?['RecoverableSnapshotid'],'did not complete.')",
                                          "statusCode": 200
                                        }
                                      },
                                      "Set_variable_10": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "@{concat('Recovery of VM using recoverable snapshot id ',body('Response_RubrikIOCScan')?['RecoverableSnapshotid'],'did not complete.')}"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@body('RubrikPollAsyncResult_2')?['status']",
                                          "SUCCEEDED"
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "RubrikPollAsyncResult_2": {
                                  "type": "Workflow",
                                  "inputs": {
                                    "body": {
                                      "BaseUrl": "@triggerBody()?['BaseUrl']",
                                      "ClusterId": "@triggerBody()?['ClusterId']",
                                      "PollingInterval": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for recovery']",
                                      "PollingTimeout": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling timeout for IOC Scan']",
                                      "RequestId": "@{if(empty(body('Parse_Response_of_Live-Mount_recovered_snapshot')?['data']?['vSphereVMInitiateLiveMountV2']?['id']),body('Parse_JSON')?['data']?['vSphereVMExportSnapshotV2']?['id'],body('Parse_Response_of_Live-Mount_recovered_snapshot')?['data']?['vSphereVMInitiateLiveMountV2']?['id'])}"
                                    },
                                    "host": {
                                      "triggerName": "manual",
                                      "workflow": {
                                        "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikPollAsyncResult"
                                      }
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "Which_recovery_to_perform": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Response_11": {
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                      "body": "Recovery Not Started.",
                                      "statusCode": 400
                                    }
                                  },
                                  "Terminate_5": {
                                    "runAfter": {
                                      "Response_11": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Terminate",
                                    "inputs": {
                                      "runError": {
                                        "message": "Recovery Not Started."
                                      },
                                      "runStatus": "Failed"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "or": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@body('Live-Mount_recovered_snapshot')?['data']",
                                        "@null"
                                      ]
                                    }
                                  },
                                  {
                                    "not": {
                                      "equals": [
                                        "@body('Export_recovered_snapshot')?['data']",
                                        "@null"
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Parse_response_of_Get_HostID": {
                              "runAfter": {
                                "Get_HostID_contains_200_statuscode": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('Get_HostID')",
                                "schema": {
                                  "properties": {
                                    "data": {
                                      "properties": {
                                        "vSphereDetailData": {
                                          "properties": {
                                            "__typename": {
                                              "type": "string"
                                            },
                                            "agentStatus": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "agentStatus": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "arrayIntegrationEnabled": {
                                              "type": "boolean"
                                            },
                                            "authorizedOperations": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "cdmLink": {
                                              "type": "string"
                                            },
                                            "cluster": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "clusterNodeConnection": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "nodes": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "id": {
                                                            "type": "string"
                                                          },
                                                          "ipAddress": {
                                                            "type": "string"
                                                          },
                                                          "status": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "id",
                                                          "status",
                                                          "ipAddress",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "connectivityLastUpdated": {
                                                  "type": "string"
                                                },
                                                "globalManagerConnectivityStatus": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "urls": {
                                                      "items": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "isReachable": {
                                                            "type": "boolean"
                                                          },
                                                          "url": {
                                                            "type": "string"
                                                          }
                                                        },
                                                        "required": [
                                                          "url",
                                                          "isReachable",
                                                          "__typename"
                                                        ],
                                                        "type": "object"
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "lastConnectionTime": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "passesConnectivityCheck": {
                                                  "type": "boolean"
                                                },
                                                "state": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "clusterRemovalState": {
                                                      "type": "string"
                                                    },
                                                    "connectedState": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "status": {
                                                  "type": "string"
                                                },
                                                "version": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "effectiveSlaDomain": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "cluster": {
                                                  "properties": {
                                                    "__typename": {
                                                      "type": "string"
                                                    },
                                                    "id": {
                                                      "type": "string"
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "fid": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "effectiveSlaSourceObject": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "fid": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "objectType": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "id": {
                                              "type": "string"
                                            },
                                            "isRelic": {
                                              "type": "boolean"
                                            },
                                            "logicalPath": {
                                              "items": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "fid": {
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "objectType": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "fid",
                                                  "objectType",
                                                  "name",
                                                  "__typename"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "newestSnapshot": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "date": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "isIndexed": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "oldestSnapshot": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "date": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "isIndexed": {
                                                  "type": "boolean"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "onDemandSnapshotCount": {
                                              "type": "integer"
                                            },
                                            "physicalPath": {
                                              "items": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "fid": {
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "objectType": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "fid",
                                                  "objectType",
                                                  "name",
                                                  "__typename"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "primaryClusterLocation": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "name": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "protectionDate": {
                                              "type": "string"
                                            },
                                            "replicatedObjects": {
                                              "items": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "cluster": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "id": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "id": {
                                                    "type": "string"
                                                  },
                                                  "primaryClusterLocation": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "id": {
                                                        "type": "string"
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "required": [
                                                  "id",
                                                  "primaryClusterLocation",
                                                  "cluster",
                                                  "__typename"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            },
                                            "reportSnappable": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "archiveStorage": {
                                                  "type": "integer"
                                                },
                                                "id": {
                                                  "type": "string"
                                                },
                                                "logicalBytes": {
                                                  "type": "integer"
                                                },
                                                "physicalBytes": {
                                                  "type": "integer"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "snapshotConsistencyMandate": {
                                              "type": "string"
                                            },
                                            "totalSnapshots": {
                                              "properties": {
                                                "__typename": {
                                                  "type": "string"
                                                },
                                                "count": {
                                                  "type": "integer"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "vmwareToolsInstalled": {
                                              "type": "boolean"
                                            },
                                            "vsphereTagPath": {
                                              "items": {
                                                "properties": {
                                                  "__typename": {
                                                    "type": "string"
                                                  },
                                                  "fid": {
                                                    "type": "string"
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "objectType": {
                                                    "type": "string"
                                                  }
                                                },
                                                "required": [
                                                  "fid",
                                                  "objectType",
                                                  "name",
                                                  "__typename"
                                                ],
                                                "type": "object"
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            },
                            "Which_recovery_to_perform": {
                              "actions": {
                                "Collect_recovery_data_for_live-mounting_VM": {
                                  "type": "ApiConnectionWebhook",
                                  "inputs": {
                                    "body": {
                                      "body": {
                                        "messageBody": "{     \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",     \"type\": \"AdaptiveCard\",     \"version\": \"1.3\",     \"body\": [         {             \"type\": \"TextBlock\",             \"size\": \"Large\",             \"weight\": \"Bolder\",             \"text\": \"Live-Mount VM data\",             \"horizontalAlignment\": \"Center\",             \"style\": \"heading\",             \"color\": \"Accent\",             \"fontType\": \"Default\",             \"wrap\": true,             \"id\": \"heading\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Input arguments required to initiate live mounting of a recoverable snapshot.\",             \"wrap\": true,             \"color\": \"Light\",             \"style\": \"default\",             \"separator\": true,             \"id\": \"info\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Name to search for a Vsphere host that will be used for live mounting\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip1\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Name to search for a Vsphere host that will be used for live mounting\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Vsphere datastore name to use for live mounting\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip2\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Vsphere datastore name to use for live mounting\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to power on the live-mounted VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip3\"         },         {             \"type\": \"Input.ChoiceSet\",             \"id\": \"power on the live-mounted VM?\",             \"value\": \"False\",             \"style\": \"expanded\",             \"choices\": [                 {                     \"title\": \"False\",                     \"value\": \"False\"                 },                 {                     \"title\": \"True\",                     \"value\": \"True\"                 }             ],             \"isRequired\": true,             \"errorMessage\": \"This field id required\",             \"label\": \"required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether mac addresses of network devices be kept on the live-mounted VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip4\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"True\",                     \"value\": \"True\"                 },                 {                     \"title\": \"False\",                     \"value\": \"False\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"value\": \"True\",             \"style\": \"expanded\",             \"isRequired\": true,             \"errorMessage\": \"This field is required\",             \"label\": \"required\",             \"id\": \"mac addresses of network devices be kept on the live-mounted VM?\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to recover vSphere tags in the live-mounted VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip5\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"True\",                     \"value\": \"True\"                 },                 {                     \"title\": \"False\",                     \"value\": \"False\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"id\": \"recover vSphere tags in the live-mounted VM?\",             \"isRequired\": true,             \"errorMessage\": \"This filed is required\",             \"label\": \"required\",             \"value\": \"True\",             \"style\": \"expanded\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to remove the network devices of the original VM in the live-mounted VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip6\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"False\",                     \"value\": \"False\"                 },                 {                     \"title\": \"True\",                     \"value\": \"True\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"id\": \"remove the network devices of the original VM in the live-mounted VM?\",             \"isRequired\": true,             \"value\": \"False\",             \"errorMessage\": \"This field is required\",             \"style\": \"expanded\",             \"label\": \"required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to disable networking in the live-mounted VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip7\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"True\",                     \"value\": \"True\"                 },                 {                     \"title\": \"False\",                     \"value\": \"False\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"id\": \"disable networking in the live-mounted VM?\",             \"label\": \"required\",             \"value\": \"True\",             \"style\": \"expanded\",             \"isRequired\": true,             \"errorMessage\": \"This field is required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Live-mounted VM name\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip8\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Live-mounted VM name\"         }     ],     \"actions\": [         {             \"type\": \"Action.Submit\",             \"title\": \"Submit Answer\",             \"data\": {                 \"id\": \"LoginVal\"             },             \"style\": \"positive\",             \"id\": \"Submit\"         }     ] } ",
                                        "recipient": {
                                          "channelId": "19:bnaBaHVOHCBYW6MgUqrQK9R7mnkjvb9j7F1T9TaTct41@thread.tacv2",
                                          "groupId": "33066078-fe8e-4fad-80a5-9b6728e915a4"
                                        },
                                        "updateMessage": "Thanks for your response!"
                                      },
                                      "notificationUrl": "@{listCallbackUrl()}"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                      }
                                    },
                                    "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                  }
                                },
                                "Does_Live-Mount_recovered_snapshot_get_status_code_200": {
                                  "actions": {
                                    "Does_Live-Mount_recovered_snapshot_API_response_contains_errors": {
                                      "actions": {
                                        "Response_8": {
                                          "runAfter": {
                                            "Set_variable_11": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Response",
                                          "kind": "Http",
                                          "inputs": {
                                            "body": "@body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']",
                                            "statusCode": 200
                                          }
                                        },
                                        "Set_variable_11": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "ErrorMessage",
                                            "value": "@{body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']}"
                                          }
                                        },
                                        "Terminate_10": {
                                          "runAfter": {
                                            "Response_8": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Terminate",
                                          "inputs": {
                                            "runError": {
                                              "message": "@{body('Live-Mount_recovered_snapshot')?['errors'][0]?['message']}"
                                            },
                                            "runStatus": "Failed"
                                          }
                                        }
                                      },
                                      "else": {
                                        "actions": {
                                          "Parse_Response_of_Live-Mount_recovered_snapshot": {
                                            "type": "ParseJson",
                                            "inputs": {
                                              "content": "@body('Live-Mount_recovered_snapshot')",
                                              "schema": {
                                                "type": "object"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "contains": [
                                              "@body('Live-Mount_recovered_snapshot')",
                                              "errors"
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    }
                                  },
                                  "runAfter": {
                                    "Live-Mount_recovered_snapshot": [
                                      "Succeeded",
                                      "Failed"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Response_5": {
                                        "runAfter": {
                                          "Set_variable_12": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Response",
                                        "kind": "Http",
                                        "inputs": {
                                          "body": "@body('Live-Mount_recovered_snapshot')?['message']",
                                          "statusCode": "@outputs('Live-Mount_recovered_snapshot')['statusCode']"
                                        }
                                      },
                                      "Set_variable_12": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "ErrorMessage",
                                          "value": "Status Code: @{outputs('Live-Mount_recovered_snapshot')['statusCode']}, Error Message: @{body('Live-Mount_recovered_snapshot')?['message']}"
                                        }
                                      },
                                      "Terminate_9": {
                                        "runAfter": {
                                          "Response_5": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "Terminate",
                                        "inputs": {
                                          "runError": {
                                            "code": "@{outputs('Live-Mount_recovered_snapshot')?['statusCode']}",
                                            "message": "@{body('Live-Mount_recovered_snapshot')?['message']}"
                                          },
                                          "runStatus": "Failed"
                                        }
                                      }
                                    }
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@outputs('Live-Mount_recovered_snapshot')?['statusCode']",
                                          200
                                        ]
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Is_Vsphere_host_name_provided": {
                                  "actions": {
                                    "Does_Get_Vsphere_Host_ID_get_status_code_200": {
                                      "actions": {
                                        "Condition": {
                                          "actions": {
                                            "Set_variable_13": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "ErrorMessage",
                                                "value": "@{body('Get_Vsphere_Host_ID')?['errors'][0]?['message']}"
                                              }
                                            }
                                          },
                                          "else": {
                                            "actions": {
                                              "Response_of_Get_Vsphere_Host_ID": {
                                                "type": "ParseJson",
                                                "inputs": {
                                                  "content": "@body('Get_Vsphere_Host_ID')",
                                                  "schema": {
                                                    "properties": {
                                                      "data": {
                                                        "properties": {
                                                          "vSphereHostConnection": {
                                                            "properties": {
                                                              "__typename": {
                                                                "type": "string"
                                                              },
                                                              "edges": {
                                                                "items": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "node": {
                                                                      "properties": {
                                                                        "__typename": {
                                                                          "type": "string"
                                                                        },
                                                                        "id": {
                                                                          "type": "string"
                                                                        },
                                                                        "name": {
                                                                          "type": "string"
                                                                        },
                                                                        "physicalPath": {
                                                                          "items": {
                                                                            "properties": {
                                                                              "__typename": {
                                                                                "type": "string"
                                                                              },
                                                                              "fid": {
                                                                                "type": "string"
                                                                              },
                                                                              "name": {
                                                                                "type": "string"
                                                                              },
                                                                              "objectType": {
                                                                                "type": "string"
                                                                              }
                                                                            },
                                                                            "required": [
                                                                              "fid",
                                                                              "name",
                                                                              "objectType",
                                                                              "__typename"
                                                                            ],
                                                                            "type": "object"
                                                                          },
                                                                          "type": "array"
                                                                        }
                                                                      },
                                                                      "type": "object"
                                                                    }
                                                                  },
                                                                  "required": [
                                                                    "node",
                                                                    "__typename"
                                                                  ],
                                                                  "type": "object"
                                                                },
                                                                "type": "array"
                                                              },
                                                              "pageInfo": {
                                                                "properties": {
                                                                  "__typename": {
                                                                    "type": "string"
                                                                  },
                                                                  "endCursor": {
                                                                    "type": "string"
                                                                  },
                                                                  "hasNextPage": {
                                                                    "type": "boolean"
                                                                  },
                                                                  "hasPreviousPage": {
                                                                    "type": "boolean"
                                                                  }
                                                                },
                                                                "type": "object"
                                                              }
                                                            },
                                                            "type": "object"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                }
                                              },
                                              "Set_variable": {
                                                "runAfter": {
                                                  "Response_of_Get_Vsphere_Host_ID": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "HostId",
                                                  "value": "@{body('Response_of_Get_Vsphere_Host_ID')?['data']?['vSphereHostConnection']?['edges'][0]?['node']?['id']}"
                                                }
                                              }
                                            }
                                          },
                                          "expression": {
                                            "and": [
                                              {
                                                "contains": [
                                                  "@body('Get_Vsphere_Host_ID')",
                                                  "errors"
                                                ]
                                              }
                                            ]
                                          },
                                          "type": "If"
                                        }
                                      },
                                      "runAfter": {
                                        "Get_Vsphere_Host_ID": [
                                          "Succeeded",
                                          "Failed"
                                        ]
                                      },
                                      "else": {
                                        "actions": {
                                          "Set_variable_14": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "ErrorMessage",
                                              "value": "Status Code:  @{outputs('Get_Vsphere_Host_ID')?['statusCode']}, Error Message:  @{body('Get_Vsphere_Host_ID')?['message']}"
                                            }
                                          }
                                        }
                                      },
                                      "expression": {
                                        "and": [
                                          {
                                            "equals": [
                                              "@outputs('Get_Vsphere_Host_ID')?['statusCode']",
                                              200
                                            ]
                                          }
                                        ]
                                      },
                                      "type": "If"
                                    },
                                    "Get_Vsphere_Host_ID": {
                                      "type": "Http",
                                      "inputs": {
                                        "body": {
                                          "query": "query vSphereHostsQuery($first: Int!, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: HierarchySortOrder) {   vSphereHostConnection(     first: $first     after: $after     filter: $filter     sortBy: $sortBy     sortOrder: $sortOrder   ) {     edges {       node {         id         ...VSphereHostNameFragment         ...VSphereHostPhysicalPathFragment         __typename       }       __typename     }     pageInfo {       endCursor       hasNextPage       hasPreviousPage       __typename     }     __typename   } }   fragment VSphereHostNameFragment on VSphereHost {   name   __typename }   fragment VSphereHostPhysicalPathFragment on VSphereHost {   physicalPath {     fid     name     objectType     __typename   }   __typename }",
                                          "variables": {
                                            "filter": [
                                              {
                                                "field": "CLUSTER_ID",
                                                "texts": [
                                                  "@{triggerBody()?['ClusterId']}"
                                                ]
                                              },
                                              {
                                                "field": "NAME",
                                                "texts": [
                                                  "@{body('Collect_recovery_data_for_live-mounting_VM')?['data']?['name to search for a Vsphere host that will be used for live mounting']}"
                                                ]
                                              }
                                            ],
                                            "first": 1000,
                                            "sortBy": "NAME",
                                            "sortOrder": "DESC"
                                          }
                                        },
                                        "headers": {
                                          "Authorization": "Bearer @{variables('access_token')}",
                                          "Content-Type": "application/json"
                                        },
                                        "host": {
                                          "connection": {
                                            "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                          }
                                        },
                                        "method": "POST",
                                        "path": "/api/graphql",
                                        "uri": "https://rubrik-rcf-2512.my.rubrik.com/api/graphql"
                                      }
                                    }
                                  },
                                  "runAfter": {
                                    "Collect_recovery_data_for_live-mounting_VM": [
                                      "Succeeded"
                                    ]
                                  },
                                  "expression": {
                                    "and": [
                                      {
                                        "not": {
                                          "equals": [
                                            "@body('Collect_recovery_data_for_live-mounting_VM')?['data']?['name to search for a Vsphere host that will be used for live mounting']",
                                            "@null"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "type": "If"
                                },
                                "Live-Mount_recovered_snapshot": {
                                  "runAfter": {
                                    "Is_Vsphere_host_name_provided": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Http",
                                  "inputs": {
                                    "body": {
                                      "query": "   mutation vSphereLiveMountMutation(     $snappableId: String!     $hostId: String     $clusterId: String     $resourcePoolId: String     $snapshotFid: String     $shouldRecoverTags: Boolean!     $keepMacAddresses: Boolean!     $powerOn: Boolean!     $removeNetworkDevices: Boolean!     $vmName: String     $vNicBindings: [VmwareVNicBindingInfoV2Input!]     $recoveryPoint: DateTime   ) {     vSphereVMInitiateLiveMountV2(       id: $snappableId       config: {         hostId: $hostId         resourcePoolId: $resourcePoolId         clusterId: $clusterId         shouldRecoverTags: $shouldRecoverTags         vNicBindings: $vNicBindings         requiredRecoveryParameters: {           snapshotId: $snapshotFid           recoveryPoint: $recoveryPoint         }         mountExportSnapshotJobCommonOptionsV2: {           keepMacAddresses: $keepMacAddresses           powerOn: $powerOn           removeNetworkDevices: $removeNetworkDevices           vmName: $vmName         }       }     ) {       id       status     }   } ",
                                      "variables": {
                                        "clusterId": "@{triggerBody()?['ClusterId']}",
                                        "hostId": "@variables('HostId')",
                                        "keepMacAddresses": false,
                                        "powerOn": true,
                                        "removeNetworkDevices": false,
                                        "shouldRecoverTags": true,
                                        "snappableId": "@{body('Response_RubrikIOCScan')?['RadarIOCScan']?['data']?['threatHuntResult']?['results'][0]?['object']?['id']}",
                                        "snapshotFid": "@{body('RubrikIOCScan')?['RecoverableSnapshotid']}"
                                      }
                                    },
                                    "headers": {
                                      "Authorization": "Bearer @{variables('access_token')}",
                                      "Content-Type": "application/json"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                      }
                                    },
                                    "method": "POST",
                                    "path": "/api/graphql",
                                    "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                  }
                                }
                              },
                              "runAfter": {
                                "Default_value_of_HostId": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Check_Export_recovered_snapshot_response_code": {
                                    "actions": {
                                      "Condition_2": {
                                        "actions": {
                                          "Response_10": {
                                            "runAfter": {
                                              "Set_variable_34": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Response",
                                            "kind": "Http",
                                            "inputs": {
                                              "body": "@body('Export_recovered_snapshot')?['errors'][0]?['message']",
                                              "statusCode": 200
                                            }
                                          },
                                          "Set_variable_34": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "ErrorMessage",
                                              "value": "@{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                            }
                                          },
                                          "Terminate_15": {
                                            "runAfter": {
                                              "Response_10": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Terminate",
                                            "inputs": {
                                              "runError": {
                                                "message": "@{body('Export_recovered_snapshot')?['errors'][0]?['message']}"
                                              },
                                              "runStatus": "Failed"
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Parse_JSON": {
                                              "type": "ParseJson",
                                              "inputs": {
                                                "content": "@body('Export_recovered_snapshot')",
                                                "schema": {
                                                  "properties": {
                                                    "data": {
                                                      "properties": {
                                                        "vSphereVMExportSnapshotV2": {
                                                          "properties": {
                                                            "id": {
                                                              "type": "string"
                                                            },
                                                            "status": {
                                                              "type": "string"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "contains": [
                                                "@body('Export_recovered_snapshot')",
                                                "errors"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "runAfter": {
                                      "Export_recovered_snapshot": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Response_7": {
                                          "runAfter": {
                                            "Set_variable_33": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Response",
                                          "kind": "Http",
                                          "inputs": {
                                            "body": "@body('Export_recovered_snapshot')?['message']",
                                            "statusCode": "@outputs('Export_recovered_snapshot')['statusCode']"
                                          }
                                        },
                                        "Set_variable_33": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "ErrorMessage",
                                            "value": "Status Code: @{outputs('Export_recovered_snapshot')['statusCode']}, message: @{body('Export_recovered_snapshot')?['message']}"
                                          }
                                        },
                                        "Terminate_16": {
                                          "runAfter": {
                                            "Response_7": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Terminate",
                                          "inputs": {
                                            "runError": {
                                              "code": "@{outputs('Export_recovered_snapshot')['statusCode']}",
                                              "message": "@{body('Export_recovered_snapshot')?['message']}"
                                            },
                                            "runStatus": "Failed"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Export_recovered_snapshot')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Collect_recovery_data_for_exporting_VM": {
                                    "type": "ApiConnectionWebhook",
                                    "inputs": {
                                      "body": {
                                        "body": {
                                          "messageBody": "{     \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",     \"type\": \"AdaptiveCard\",     \"version\": \"1.3\",     \"body\": [         {             \"type\": \"TextBlock\",             \"size\": \"Large\",             \"weight\": \"Bolder\",             \"text\": \"Export VM data\",             \"horizontalAlignment\": \"Center\",             \"style\": \"heading\",             \"color\": \"Accent\",             \"fontType\": \"Default\",             \"wrap\": true,             \"id\": \"heading\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Input arguments required to initiate exporting of a recoverable snapshot.\",             \"wrap\": true,             \"color\": \"Light\",             \"style\": \"default\",             \"separator\": true,             \"id\": \"info\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Name to search for a Vsphere host that will be used while exporting\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip1\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Name to search for a Vsphere host in exporting\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Name to search for a Vsphere datastore that will be used for exporting\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip2\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Name to search for a Vsphere datastore in exporting\",             \"isRequired\": true,             \"errorMessage\": \"This field is required\",             \"label\": \"required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to power on the exported VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"separator\": true,             \"id\": \"Ip3\"         },         {             \"type\": \"Input.ChoiceSet\",             \"id\": \"power on the exported VM?\",             \"value\": \"False\",             \"style\": \"expanded\",             \"choices\": [                 {                     \"title\": \"False\",                     \"value\": \"False\"                 },                 {                     \"title\": \"True\",                     \"value\": \"True\"                 }             ],             \"isRequired\": true,             \"errorMessage\": \"This field id required\",             \"label\": \"required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether mac addresses of network devices be kept on the exported VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip4\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"True\",                     \"value\": \"True\"                 },                 {                     \"title\": \"False\",                     \"value\": \"False\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"value\": \"True\",             \"style\": \"expanded\",             \"isRequired\": true,             \"errorMessage\": \"This field is required\",             \"label\": \"required\",             \"id\": \"mac addresses of network devices be kept on the exported VM\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to recover vSphere tags in the exported VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip5\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"True\",                     \"value\": \"True\"                 },                 {                     \"title\": \"False\",                     \"value\": \"False\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"id\": \"recover vSphere tags in the exported VM?\",             \"isRequired\": true,             \"errorMessage\": \"This filed is required\",             \"label\": \"required\",             \"value\": \"True\",             \"style\": \"expanded\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to remove the network devices of the original VM in the exported VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip6\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"False\",                     \"value\": \"False\"                 },                 {                     \"title\": \"True\",                     \"value\": \"True\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"id\": \"remove the network devices of the original VM in the exported VM?\",             \"isRequired\": true,             \"value\": \"False\",             \"errorMessage\": \"This field is required\",             \"style\": \"expanded\",             \"label\": \"required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Whether to disable networking in the exported VM?\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip7\"         },         {             \"type\": \"Input.ChoiceSet\",             \"choices\": [                 {                     \"title\": \"True\",                     \"value\": \"True\"                 },                 {                     \"title\": \"False\",                     \"value\": \"False\"                 }             ],             \"placeholder\": \"Placeholder text\",             \"id\": \"disable networking in the exported VM?\",             \"label\": \"required\",             \"value\": \"True\",             \"style\": \"expanded\",             \"isRequired\": true,             \"errorMessage\": \"This field is required\"         },         {             \"type\": \"TextBlock\",             \"text\": \"Exported VM name\",             \"wrap\": true,             \"weight\": \"Bolder\",             \"id\": \"Ip8\"         },         {             \"type\": \"Input.Text\",             \"id\": \"Exported VM name\"         }     ],     \"actions\": [         {             \"type\": \"Action.Submit\",             \"title\": \"Submit Answer\",             \"data\": {                 \"id\": \"LoginVal\"             },             \"style\": \"positive\",             \"id\": \"Submit\"         }     ] } ",
                                          "recipient": {
                                            "channelId": "19:bnaBaHVOHCBYW6MgUqrQK9R7mnkjvb9j7F1T9TaTct41@thread.tacv2",
                                            "groupId": "33066078-fe8e-4fad-80a5-9b6728e915a4"
                                          },
                                          "updateMessage": "Thanks for your response!"
                                        },
                                        "notificationUrl": "@{listCallbackUrl()}"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['teams']['connectionId']"
                                        }
                                      },
                                      "path": "/v1.0/teams/conversation/gatherinput/poster/Flow bot/location/@{encodeURIComponent('Channel')}/$subscriptions"
                                    }
                                  },
                                  "Does_Get_Vsphere_Datastore_ID_get_status_code_200": {
                                    "actions": {
                                      "Does_Get_Vsphere_Datastore_ID_API_response_contains_errors": {
                                        "actions": {
                                          "Response_9": {
                                            "runAfter": {
                                              "Set_variable_17": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Response",
                                            "kind": "Http",
                                            "inputs": {
                                              "body": "@body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']",
                                              "statusCode": 200
                                            }
                                          },
                                          "Set_variable_17": {
                                            "type": "SetVariable",
                                            "inputs": {
                                              "name": "ErrorMessage",
                                              "value": "@{body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']}"
                                            }
                                          },
                                          "Terminate_13": {
                                            "runAfter": {
                                              "Response_9": [
                                                "Succeeded"
                                              ]
                                            },
                                            "type": "Terminate",
                                            "inputs": {
                                              "runError": {
                                                "message": "@{body('Get_Vsphere_Datastore_ID')?['errors'][0]?['message']}"
                                              },
                                              "runStatus": "Failed"
                                            }
                                          }
                                        },
                                        "else": {
                                          "actions": {
                                            "Response_of_Get_Vsphere_Datastore_ID": {
                                              "type": "ParseJson",
                                              "inputs": {
                                                "content": "@body('Get_Vsphere_Datastore_ID')",
                                                "schema": {
                                                  "properties": {
                                                    "data": {
                                                      "properties": {
                                                        "vSphereHost": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "descendantConnection": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "edges": {
                                                                  "items": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "node": {
                                                                        "properties": {
                                                                          "__typename": {
                                                                            "type": "string"
                                                                          },
                                                                          "capacity": {
                                                                            "type": "integer"
                                                                          },
                                                                          "datastoreType": {
                                                                            "type": "string"
                                                                          },
                                                                          "freeSpace": {
                                                                            "type": "integer"
                                                                          },
                                                                          "id": {
                                                                            "type": "string"
                                                                          },
                                                                          "isLocal": {
                                                                            "type": "boolean"
                                                                          },
                                                                          "name": {
                                                                            "type": "string"
                                                                          }
                                                                        },
                                                                        "type": "object"
                                                                      }
                                                                    },
                                                                    "required": [
                                                                      "node",
                                                                      "__typename"
                                                                    ],
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                },
                                                                "pageInfo": {
                                                                  "properties": {
                                                                    "__typename": {
                                                                      "type": "string"
                                                                    },
                                                                    "endCursor": {
                                                                      "type": "string"
                                                                    },
                                                                    "hasNextPage": {
                                                                      "type": "boolean"
                                                                    },
                                                                    "hasPreviousPage": {
                                                                      "type": "boolean"
                                                                    }
                                                                  },
                                                                  "type": "object"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "type": "object"
                                                        }
                                                      },
                                                      "type": "object"
                                                    }
                                                  },
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "contains": [
                                                "@body('Get_Vsphere_Datastore_ID')",
                                                "errors"
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      }
                                    },
                                    "runAfter": {
                                      "Get_Vsphere_Datastore_ID": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "else": {
                                      "actions": {
                                        "Response_6": {
                                          "runAfter": {
                                            "Set_variable_18": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Response",
                                          "kind": "Http",
                                          "inputs": {
                                            "body": "@body('Get_Vsphere_Datastore_ID')['message']",
                                            "statusCode": "@output('Get_Vsphere_Datastore_ID')['statusCode']"
                                          }
                                        },
                                        "Set_variable_18": {
                                          "type": "SetVariable",
                                          "inputs": {
                                            "name": "ErrorMessage",
                                            "value": "Status Code: @{output('Get_Vsphere_Datastore_ID')['statusCode']}, Error message:  @{body('Get_Vsphere_Datastore_ID')['message']}"
                                          }
                                        },
                                        "Terminate_14": {
                                          "runAfter": {
                                            "Response_6": [
                                              "Succeeded"
                                            ]
                                          },
                                          "type": "Terminate",
                                          "inputs": {
                                            "runError": {
                                              "code": "@{output('Get_Vsphere_Datastore_ID')['statusCode']}",
                                              "message": "@{body('Get_Vsphere_Datastore_ID')['message']}"
                                            },
                                            "runStatus": "Failed"
                                          }
                                        }
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@outputs('Get_Vsphere_Datastore_ID')['statusCode']",
                                            200
                                          ]
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "Export_recovered_snapshot": {
                                    "runAfter": {
                                      "Does_Get_Vsphere_Datastore_ID_get_status_code_200": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "query": "mutation vSphereExportSnapshotV2Mutation($config: ExportSnapshotJobConfigV2Input!, $id: String!) {   vSphereVMExportSnapshotV2(config: $config, id: $id) {     id   } }",
                                        "variables": {
                                          "config": {
                                            "datastoreId": "@body('Response_of_Get_Vsphere_Datastore_ID')?['data']?['vSphereHost']?['descendantConnection']?['edges'][0]?['node']?['id']",
                                            "hostId": "@variables('HostId')",
                                            "mountExportSnapshotJobCommonOptionsV2": {
                                              "keepMacAddresses": false,
                                              "removeNetworkDevices": false,
                                              "vmName": "mariadb exported 1"
                                            },
                                            "requiredRecoveryParameters": {
                                              "snapshotId": "@{body('Response_RubrikIOCScan')?['RecoverableSnapshotid']}"
                                            },
                                            "shouldRecoverTags": false
                                          },
                                          "id": "@body('Response_RubrikIOCScan')?['RadarIOCScan']?['data']?['threatHuntResult']?['results'][0]?['object']?['id']"
                                        }
                                      },
                                      "headers": {
                                        "Authorization": "Bearer @{variables('access_token')}",
                                        "Content-Type": "application/json"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                        }
                                      },
                                      "method": "POST",
                                      "path": "/api/graphql",
                                      "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                    }
                                  },
                                  "Get_Vsphere_Datastore_ID": {
                                    "runAfter": {
                                      "Is_Vsphere_host_name_provided_for_exporting_vm": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "body": {
                                        "query": "query VSphereHostDatastoresQuery($hostId: UUID!, $first: Int, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: HierarchySortOrder) {   vSphereHost(fid: $hostId) {     descendantConnection(       first: $first       after: $after       filter: $filter       sortBy: $sortBy       sortOrder: $sortOrder       typeFilter: [VSphereDatastore]     ) {       edges {         node {           id           ...HierarchyObjectNameColumnFragment           ... on VSphereDatastore {             capacity             isLocal             freeSpace             datastoreType             __typename           }           __typename         }         __typename       }       pageInfo {         endCursor         hasNextPage         hasPreviousPage         __typename       }       __typename     }     __typename   } }   fragment HierarchyObjectNameColumnFragment on HierarchyObject {   name   __typename }",
                                        "variables": {
                                          "filter": [
                                            {
                                              "field": "NAME",
                                              "texts": [
                                                "@{body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere datastore in exporting']}"
                                              ]
                                            }
                                          ],
                                          "first": 20,
                                          "hostId": "@{variables('HostId')}",
                                          "sortBy": "NAME",
                                          "sortOrder": "ASC"
                                        }
                                      },
                                      "headers": {
                                        "Authorization": "Bearer @{variables('access_token')}",
                                        "Content-Type": "application/json"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                        }
                                      },
                                      "method": "POST",
                                      "path": "/api/graphql",
                                      "uri": "@{triggerBody()?['BaseUrl']}/api/graphql"
                                    }
                                  },
                                  "Is_Vsphere_host_name_provided_for_exporting_vm": {
                                    "actions": {
                                      "Does_Get_Vsphere_Host_ID_-_2_get_status_code_200": {
                                        "actions": {
                                          "Does_Get_Vsphere_Host_ID_-_2_API_response_contains_errors": {
                                            "actions": {
                                              "Set_variable_16": {
                                                "type": "SetVariable",
                                                "inputs": {
                                                  "name": "ErrorMessage",
                                                  "value": "@{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}"
                                                }
                                              },
                                              "Terminate_12": {
                                                "runAfter": {
                                                  "Set_variable_16": [
                                                    "Succeeded"
                                                  ]
                                                },
                                                "type": "Terminate",
                                                "inputs": {
                                                  "runError": {
                                                    "message": "@{body('Get_Vsphere_Host_ID_-_2')?['errors'][0]?['message']}"
                                                  },
                                                  "runStatus": "Failed"
                                                }
                                              }
                                            },
                                            "expression": {
                                              "and": [
                                                {
                                                  "contains": [
                                                    "@body('Get_Vsphere_Host_ID_-_2')",
                                                    "errors"
                                                  ]
                                                }
                                              ]
                                            },
                                            "type": "If"
                                          }
                                        },
                                        "runAfter": {
                                          "Get_Vsphere_Host_ID_-_2": [
                                            "Succeeded"
                                          ]
                                        },
                                        "else": {
                                          "actions": {
                                            "Set_variable_15": {
                                              "type": "SetVariable",
                                              "inputs": {
                                                "name": "ErrorMessage",
                                                "value": "Status Code: @{outputs('Get_Vsphere_Host_ID_-_2')['statusCode']}, Error Message: @{body('Get_Vsphere_Host_ID_-_2')?['message']}"
                                              }
                                            },
                                            "Terminate_11": {
                                              "runAfter": {
                                                "Set_variable_15": [
                                                  "Succeeded"
                                                ]
                                              },
                                              "type": "Terminate",
                                              "inputs": {
                                                "runError": {
                                                  "code": "@{outputs('Get_Vsphere_Host_ID_-_2')['statusCode']}",
                                                  "message": "@{body('Get_Vsphere_Host_ID_-_2')?['message']}"
                                                },
                                                "runStatus": "Failed"
                                              }
                                            }
                                          }
                                        },
                                        "expression": {
                                          "and": [
                                            {
                                              "equals": [
                                                "@outputs('Get_Vsphere_Host_ID_-_2')['statusCode']",
                                                200
                                              ]
                                            }
                                          ]
                                        },
                                        "type": "If"
                                      },
                                      "Get_Vsphere_Host_ID_-_2": {
                                        "type": "ApiConnection",
                                        "inputs": {
                                          "body": {
                                            "query": "query vSphereHostsQuery($first: Int!, $after: String, $filter: [Filter!], $sortBy: HierarchySortByField, $sortOrder: HierarchySortOrder) {   vSphereHostConnection(     first: $first     after: $after     filter: $filter     sortBy: $sortBy     sortOrder: $sortOrder   ) {     edges {       node {         id         ...VSphereHostNameFragment         ...VSphereHostPhysicalPathFragment         __typename       }       __typename     }     pageInfo {       endCursor       hasNextPage       hasPreviousPage       __typename     }     __typename   } }   fragment VSphereHostNameFragment on VSphereHost {   name   __typename }   fragment VSphereHostPhysicalPathFragment on VSphereHost {   physicalPath {     fid     name     objectType     __typename   }   __typename }",
                                            "variables": "{\"filter\":[{\"field\":\"\",\"texts\":[\"cc19573c-db6c-418a-9d48-067a256543ba\"]},{\"field\":\"@{body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere host in exporting']}\",\"texts\":[\"sjc-40302-sand1-esx02\"]}],\"first\":1000,\"sortBy\":\"NAME\",\"sortOrder\":\"DESC\"}"
                                          },
                                          "host": {
                                            "connection": {
                                              "name": "@parameters('$connections')['RubrikCustomConnector']['connectionId']"
                                            }
                                          },
                                          "method": "post",
                                          "path": "/api/graphql",
                                          "queries": {
                                            "access_token": "@variables('access_token')"
                                          }
                                        }
                                      },
                                      "Response_of_Get_Vsphere_Host_ID_-_2": {
                                        "runAfter": {
                                          "Does_Get_Vsphere_Host_ID_-_2_get_status_code_200": [
                                            "Succeeded"
                                          ]
                                        },
                                        "type": "ParseJson",
                                        "inputs": {
                                          "content": "@body('Get_Vsphere_Host_ID_-_2')",
                                          "schema": {
                                            "properties": {
                                              "data": {
                                                "properties": {
                                                  "vSphereHostConnection": {
                                                    "properties": {
                                                      "__typename": {
                                                        "type": "string"
                                                      },
                                                      "edges": {
                                                        "items": {
                                                          "properties": {
                                                            "__typename": {
                                                              "type": "string"
                                                            },
                                                            "node": {
                                                              "properties": {
                                                                "__typename": {
                                                                  "type": "string"
                                                                },
                                                                "id": {
                                                                  "type": "string"
                                                                },
                                                                "name": {
                                                                  "type": "string"
                                                                },
                                                                "physicalPath": {
                                                                  "items": {
                                                                    "properties": {
                                                                      "__typename": {
                                                                        "type": "string"
                                                                      },
                                                                      "fid": {
                                                                        "type": "string"
                                                                      },
                                                                      "name": {
                                                                        "type": "string"
                                                                      },
                                                                      "objectType": {
                                                                        "type": "string"
                                                                      }
                                                                    },
                                                                    "required": [
                                                                      "fid",
                                                                      "name",
                                                                      "objectType",
                                                                      "__typename"
                                                                    ],
                                                                    "type": "object"
                                                                  },
                                                                  "type": "array"
                                                                }
                                                              },
                                                              "type": "object"
                                                            }
                                                          },
                                                          "required": [
                                                            "node",
                                                            "__typename"
                                                          ],
                                                          "type": "object"
                                                        },
                                                        "type": "array"
                                                      },
                                                      "pageInfo": {
                                                        "properties": {
                                                          "__typename": {
                                                            "type": "string"
                                                          },
                                                          "endCursor": {
                                                            "type": "string"
                                                          },
                                                          "hasNextPage": {
                                                            "type": "boolean"
                                                          },
                                                          "hasPreviousPage": {
                                                            "type": "boolean"
                                                          }
                                                        },
                                                        "type": "object"
                                                      }
                                                    },
                                                    "type": "object"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        }
                                      }
                                    },
                                    "runAfter": {
                                      "Collect_recovery_data_for_exporting_VM": [
                                        "Succeeded"
                                      ]
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "not": {
                                            "equals": [
                                              "@body('Collect_recovery_data_for_exporting_VM')?['data']?['name to search for a Vsphere host in exporting']",
                                              "@null"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "type": "If"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['live-mount or export']",
                                      "LIVE-MOUNT"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "else": {
                            "actions": {
                              "Set_variable_9": {
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "ErrorMessage",
                                  "value": "No recoverable snapshots were found with the given IOC scan arguments."
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Response_RubrikIOCScan')?['RecoverableSnapshotid']",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "else": {
                        "actions": {
                          "Set_variable_4": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "ErrorMessage",
                              "value": "The latest snapshot for the given time period is not infected so no recovery is required."
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Response_RubrikIOCScan')?['isLatestInfected']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    }
                  },
                  "else": {
                    "actions": {
                      "Set_variable_21": {
                        "type": "SetVariable",
                        "inputs": {
                          "name": "ErrorMessage",
                          "value": "No recovery selected"
                        }
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['live-mount or export']",
                            "NO RECOVERY"
                          ]
                        }
                      }
                    ]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "Response_RubrikIOCScan": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Set_variable_6": {
                    "type": "SetVariable",
                    "inputs": {
                      "name": "ErrorMessage",
                      "value": "There was an error while running the IOC scan. "
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "contains": [
                      "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                      "FINISHED"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Is_IOC_Scan_successful_(check_for_RUNNING)": {
              "actions": {
                "Set_variable_7": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ErrorMessage",
                    "value": "Wait for IOC scan results timed out. Please see incident context for further details."
                  }
                }
              },
              "runAfter": {
                "Response_RubrikIOCScan": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "contains": [
                      "@body('Response_RubrikIOCScan')?['RadarIOCScanStatus']",
                      "RUNNING"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Is_Object_Type_VM": {
              "runAfter": {
                "Initialize_Error_Message_for_flow_Start_IOC_Scan": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Response_12": {
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exitingΓê⌐ΓöÉΓò£",
                      "statusCode": 400
                    }
                  },
                  "Terminate": {
                    "runAfter": {
                      "Response_12": [
                        "Succeeded"
                      ]
                    },
                    "type": "Terminate",
                    "inputs": {
                      "runError": {
                        "message": "The object associated with the anomaly incident is not a Virtual Machine. Hence, exitingΓê⌐ΓöÉΓò£"
                      },
                      "runStatus": "Failed"
                    }
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "contains": [
                      "@variables('ObjectType')",
                      "Vm"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "ObjectId": {
              "runAfter": {
                "ClusterId": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectId",
                    "type": "string",
                    "value": "0cc517e9-23f7-5579-86f1-d9cb8e5d67a7"
                  }
                ]
              }
            },
            "ObjectType": {
              "runAfter": {
                "ObjectId": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ObjectType",
                    "type": "string",
                    "value": "Vmware"
                  }
                ]
              }
            },
            "Parse_Response_of_Get_VM_metadata": {
              "runAfter": {
                "Check_status_code_in_response_of_Get_VM_metadata": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('Get_VM_metadata')",
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "vSphereDetailData": {
                          "properties": {
                            "__typename": {
                              "type": "string"
                            },
                            "agentStatus": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "agentStatus": {
                                  "type": "string"
                                }
                              },
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "arrayIntegrationEnabled": {
                              "type": "boolean"
                            },
                            "authorizedOperations": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "cdmLink": {
                              "type": "string"
                            },
                            "cluster": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "clusterNodeConnection": {
                                  "properties": {
                                    "__typename": {
                                      "type": "string"
                                    },
                                    "nodes": {
                                      "items": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "ipAddress": {
                                            "type": "string"
                                          },
                                          "status": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "status",
                                          "ipAddress",
                                          "__typename"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "connectivityLastUpdated": {
                                  "type": "string"
                                },
                                "globalManagerConnectivityStatus": {
                                  "properties": {
                                    "__typename": {
                                      "type": "string"
                                    },
                                    "urls": {
                                      "items": {
                                        "properties": {
                                          "__typename": {
                                            "type": "string"
                                          },
                                          "isReachable": {
                                            "type": "boolean"
                                          },
                                          "url": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "url",
                                          "isReachable",
                                          "__typename"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "lastConnectionTime": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "passesConnectivityCheck": {
                                  "type": "boolean"
                                },
                                "state": {
                                  "properties": {
                                    "__typename": {
                                      "type": "string"
                                    },
                                    "clusterRemovalState": {
                                      "type": "string"
                                    },
                                    "connectedState": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "version": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "effectiveSlaDomain": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "cluster": {
                                  "properties": {
                                    "__typename": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "fid": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "effectiveSlaSourceObject": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "fid": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "objectType": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "id": {
                              "type": "string"
                            },
                            "isRelic": {
                              "type": "boolean"
                            },
                            "logicalPath": {
                              "items": {
                                "properties": {
                                  "__typename": {
                                    "type": "string"
                                  },
                                  "fid": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "objectType": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "fid",
                                  "objectType",
                                  "name",
                                  "__typename"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "name": {
                              "type": "string"
                            },
                            "newestSnapshot": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "date": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "isIndexed": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "oldestSnapshot": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "date": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "isIndexed": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "onDemandSnapshotCount": {
                              "type": "integer"
                            },
                            "physicalPath": {
                              "items": {
                                "properties": {
                                  "__typename": {
                                    "type": "string"
                                  },
                                  "fid": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "objectType": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "fid",
                                  "objectType",
                                  "name",
                                  "__typename"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "primaryClusterLocation": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "protectionDate": {
                              "type": "string"
                            },
                            "replicatedObjects": {
                              "items": {
                                "properties": {
                                  "__typename": {
                                    "type": "string"
                                  },
                                  "cluster": {
                                    "properties": {
                                      "__typename": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "primaryClusterLocation": {
                                    "properties": {
                                      "__typename": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "name": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "id",
                                  "primaryClusterLocation",
                                  "cluster",
                                  "__typename"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "reportSnappable": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "archiveStorage": {
                                  "type": "integer"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "logicalBytes": {
                                  "type": "integer"
                                },
                                "physicalBytes": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "snapshotConsistencyMandate": {
                              "type": "string"
                            },
                            "totalSnapshots": {
                              "properties": {
                                "__typename": {
                                  "type": "string"
                                },
                                "count": {
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "vmwareToolsInstalled": {
                              "type": "boolean"
                            },
                            "vsphereTagPath": {
                              "items": {
                                "properties": {
                                  "__typename": {
                                    "type": "string"
                                  },
                                  "fid": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "objectType": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "fid",
                                  "objectType",
                                  "name",
                                  "__typename"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "Response": {
              "runAfter": {
                "Does_Create_Snapshot_for_evidence_get_status_code_200": [
                  "Succeeded",
                  "Failed",
                  "Skipped",
                  "TimedOut"
                ],
                "Is_IOC_Scan_successful_(check_for_ERROR)": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ],
                "Is_IOC_Scan_successful_(check_for_FINISHED)": [
                  "Succeeded",
                  "TimedOut",
                  "Skipped",
                  "Failed"
                ],
                "Is_IOC_Scan_successful_(check_for_RUNNING)": [
                  "Succeeded",
                  "Failed",
                  "Skipped",
                  "TimedOut"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": {
                  "message after start IOC Scan": "@{variables('ErrorMessage')}",
                  "message from snapshot creation": "@{variables('ErrorMessage1')}",
                  "status": "SUCCESSED"
                },
                "statusCode": "@if(or(contains(variables('ErrorMessage'),'Statuc Code'),contains(variables('ErrorMessage1'),'Status Code')),400,200)"
              }
            },
            "Response_RubrikIOCScan": {
              "runAfter": {
                "Check_response_has_error_or_not": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('RubrikIOCScan')",
                "schema": {
                  "properties": {
                    "RadarIOCScan": {
                      "type": "object"
                    },
                    "RadarIOCScanStatus": {
                      "type": "string"
                    },
                    "RecoverableSnapshotid": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string"
                    },
                    "isLatestInfected": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "RubrikIOCScan": {
              "runAfter": {
                "Check_if_URL_is_provided_to_fetch_yara_rule": [
                  "Succeeded"
                ]
              },
              "type": "Workflow",
              "inputs": {
                "body": {
                  "BaseUrl": "@triggerBody()?['BaseUrl']",
                  "ClusterId": "d1879b0c-e18f-4bf6-8894-c35f8fa336a6",
                  "EndDate": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['end date to initiate']",
                  "IOCHash": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc hash to scan for']",
                  "IOCPath": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['ioc path to scan for']",
                  "IOCYaraRule": "@variables('Yara Rule')",
                  "Limit": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['limit to loop the IOC scan sub-playbook']",
                  "ObjectId": "@triggerBody()?['ObjectId']",
                  "PathsToExclude": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to exclude in the IOC Scan']",
                  "PathsToExempt": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to exempt in the IOC Scan']",
                  "PathsToInclude": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['paths to include in the IOC Scan']",
                  "PollingInterval": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['polling interval for IOC Scan']",
                  "PollingTimeout": "@variables('Polling Timeout')",
                  "ScanName": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['scan Name']",
                  "StartDate": "@body('Collect_IOC_scan_and_general_recovery_data')?['data']?['start date to initiate']",
                  "TimeDelta": "@{body('Collect_IOC_scan_and_general_recovery_data')?['data']?['time Delta']}"
                },
                "host": {
                  "triggerName": "manual",
                  "workflow": {
                    "id": "/subscriptions/ec3e5f16-67b5-40aa-9289-23311c95451c/resourceGroups/RubrikIntegration_22926/providers/Microsoft.Logic/workflows/RubrikIOCScan"
                  }
                }
              }
            },
            "access_token": {
              "runAfter": {
                "Is_Authentication_Failed": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "access_token",
                    "type": "string",
                    "value": "@{body('Authentication')?['access_token']}"
                  }
                ]
              }
            },
            "check_if_polling_time_out_is_less_then_or_equal_to_0_or_not": {
              "actions": {
                "Set_default_value_of_polling_timeout": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "Polling Timeout",
                    "value": 720
                  }
                }
              },
              "runAfter": {
                "Initialize_yara_Rule": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "lessOrEquals": [
                      "@variables('Polling Timeout')",
                      0
                    ]
                  }
                ]
              },
              "type": "If"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "RubrikCustomConnector": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook9-RubrikcustomconnectorConnectionName'))]",
                "connectionName": "[variables('playbook9-RubrikcustomconnectorConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/customApis/Rubrikcustomconnector')]"
              },
              "keyvault": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook9-KeyvaultConnectionName'))]",
                "connectionName": "[variables('playbook9-KeyvaultConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Keyvault')]"
              },
              "teams": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('playbook9-TeamsConnectionName'))]",
                "connectionName": "[variables('playbook9-TeamsConnectionName')]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', parameters('workspace-location'), '/managedApis/Teams')]"
              }
            }
          }
        }
      },
      "name": "[parameters('playbook9-PlaybookName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('workspace-location')]",
      "tags": {
        "hidden-SentinelTemplateName": "RubrikRansomwareDiscoveryAndVMRecovery",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "apiVersion": "2017-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('playbook9-RubrikcustomconnectorConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook9-KeyvaultConnectionName'))]",
        "[resourceId('Microsoft.Web/connections', variables('playbook9-TeamsConnectionName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook9-RubrikcustomconnectorConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook9-RubrikcustomconnectorConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-2')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook9-KeyvaultConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook9-KeyvaultConnectionName')]",
        "api": {
          "id": "[variables('_playbook-2-connection-3')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('playbook9-TeamsConnectionName')]",
      "location": "[parameters('workspace-location')]",
      "kind": "V1",
      "properties": {
        "displayName": "[variables('playbook9-TeamsConnectionName')]",
        "api": {
          "id": "[variables('_playbook-3-connection-3')]"
        }
      }
    },
    {
      "id": "[variables('_connector1-source')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('connector1-name'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "RubrikAlerts",
          "publisher": "Rubrik",
          "descriptionMarkdown": "The [Rubrik](https://cloud.RubrikXXX.com/tio/app.html#/vulnerability-management/vulnerabilities/by-plugins/vulnerability-details/) connector provides the capability to ingest RubrikXXX logs and events into Azure Sentinel. The connector provides visibility into Message and Click events in Azure Sentinel to view dashboards, create custom alerts, and to improve monitoring and investigation capabilities.",
          "graphQueries": [
            {
              "metricName": "Total Ransomware data received",
              "legend": "Rubrik_Alerts_CL",
              "baseQuery": "Rubrik_Alerts_CL"
            }
          ],
          "sampleQueries": [
            {
              "description": "Rubrik Events - All Alerts Activities.",
              "query": "Rubrik_Alerts_CL\n | sort by TimeGenerated desc"
            }
          ],
          "dataTypes": [
            {
              "name": "Rubrik_Alerts_CL",
              "lastDataReceivedQuery": "Rubrik_Alerts_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "Rubrik_Alerts_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": true
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              },
              {
                "name": "REST API Credentials/permissions",
                "description": "**Rubrik Secret Key** is required.  See the documentation to learn more about API on the `https://developer.RubrikXXX.com/docs/api-basics"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the Rubrik API to pull its logs into Azure Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. [Follow these steps](https://bitbucket.org/crestdatasys/azure-sentinel-RubrikXXX-integration/raw/8a3d1a1f8e7b29d9e08f9c59f3869fcfdffcb099/Parsers/RubrikXXX.txt) to create the Kusto functions alias, **Rubrik**"
            },
            {
              "description": "****STEP 1 - Configuration steps for the Rubrik API**\n\n [Follow these instructions](https://docs.RubrikXXX.com/RubrikXXX/Content/Settings/GenerateAPIKey.htm) to create an API Key."
            },
            {
              "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Rubrik Sentinel data connector, have the Workspace ID and Workspace Primary Key (can be copied from the following), as well as the RubrikXXX API Authorization Key(s), readily available..",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the Rubrik connector.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fniralishah-crest%2FRubrikSentinelConnector%2Fmain%2Fazuredeploy_Connector_RubrikWebhookEventsAPI_AzureFunction.json)\n2. Select the preferred **Subscription**, **Resource Group** and **Location**. \n3. Enter the **Workspace ID**, **Workspace Key**, **RubrikSecretKey**, **RubrikURL** `(https://<Rubrik-instance>.Rubrik.com/api/v1/)` , **RubrikAlertsTableName**. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the Rubrik Sentinel data connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://bitbucket.org/crestdatasys/azure-sentinel-RubrikXXX-integration/raw/7333a9d03b078fdcc136222b0133b0bbbbe71b30/RubrikXXXConnector/RubrikXXXSentinelConn.zip) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. RubrikXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8 or above.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Azure Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select **+ New application setting**.\n3. Add each of the following application settings individually, with their respective values (case-sensitive): \n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tRubrikSecretKey\n\t\tRubrikURL\n\t\tRubrikAlertsTableName\n\t\tlogAnalyticsUri (optional)\n - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: https://<CustomerId>.ods.opinsights.azure.us. \n4. Once all application settings have been entered, click **Save**."
            }
          ],
          "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on Kusto to work as expected. Follow the steps to use this Kusto functions alias **Rubrik** in queries and workbooks [Follow steps to get this Kusto functions>](https://bitbucket.org/crestdatasys/azure-sentinel-RubrikXXX-integration/raw/8a3d1a1f8e7b29d9e08f9c59f3869fcfdffcb099/Parsers/RubrikXXX.txt)."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "1.0.0",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "Rubrik",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "{Bharvi",
          "email": "bhutbharvi@gmail.com}"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook1-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook2-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook3-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook4-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook5-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook6-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook7-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook8-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "[variables('_playbook9-Playbooks')]",
              "version": "1.0.0"
            },
            {
              "kind": "DataConnector",
              "contentId": "[variables('_RubrikConnector')]",
              "version": "1.0.0"
            }
          ]
        },
        "firstPublishDate": "2022-07-19",
        "lastPublishDate": "2023-07-19",
        "providers": [
          "abcd"
        ],
        "categories": {
          "domains": [
            "security"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}
